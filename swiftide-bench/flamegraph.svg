<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="52980"><g><title>swiftide-bench`&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (6 samples, 0.01%)</title><rect x="0.0151%" y="741" width="0.0113%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="6"/><text x="0.2651%" y="751.50"></text></g><g><title>swiftide-bench`&lt;futures_util::stream::iter::Iter&lt;I&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.01%)</title><rect x="0.0151%" y="725" width="0.0113%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="6"/><text x="0.2651%" y="735.50"></text></g><g><title>swiftide-bench`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 0.01%)</title><rect x="0.0151%" y="709" width="0.0113%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="6"/><text x="0.2651%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::OpKernelContext::Output (7 samples, 0.01%)</title><rect x="0.0359%" y="325" width="0.0132%" height="15" fill="rgb(248,212,6)" fg:x="19" fg:w="7"/><text x="0.2859%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::OpKernelContext::OutputMLValue (7 samples, 0.01%)</title><rect x="0.0359%" y="309" width="0.0132%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="7"/><text x="0.2859%" y="319.50"></text></g><g><title>swiftide-bench`onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (7 samples, 0.01%)</title><rect x="0.0359%" y="293" width="0.0132%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="7"/><text x="0.2859%" y="303.50"></text></g><g><title>swiftide-bench`onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (7 samples, 0.01%)</title><rect x="0.0359%" y="277" width="0.0132%" height="15" fill="rgb(207,160,47)" fg:x="19" fg:w="7"/><text x="0.2859%" y="287.50"></text></g><g><title>swiftide-bench`onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (7 samples, 0.01%)</title><rect x="0.0359%" y="261" width="0.0132%" height="15" fill="rgb(228,23,34)" fg:x="19" fg:w="7"/><text x="0.2859%" y="271.50"></text></g><g><title>swiftide-bench`onnxruntime::Tensor::InitOrtValue(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&amp;, std::__1::shared_ptr (7 samples, 0.01%)</title><rect x="0.0359%" y="245" width="0.0132%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="7"/><text x="0.2859%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&amp;, std::__1::shared_ptr (7 samples, 0.01%)</title><rect x="0.0359%" y="229" width="0.0132%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="7"/><text x="0.2859%" y="239.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::Alloc (7 samples, 0.01%)</title><rect x="0.0359%" y="213" width="0.0132%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="7"/><text x="0.2859%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::AllocateRawInternal(unsigned long, bool, onnxruntime::Stream*, bool, std::__1::function&lt;void  (7 samples, 0.01%)</title><rect x="0.0359%" y="197" width="0.0132%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="7"/><text x="0.2859%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::Extend (7 samples, 0.01%)</title><rect x="0.0359%" y="181" width="0.0132%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="7"/><text x="0.2859%" y="191.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::RegionManager::AddAllocationRegion (7 samples, 0.01%)</title><rect x="0.0359%" y="165" width="0.0132%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="7"/><text x="0.2859%" y="175.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (30 samples, 0.06%)</title><rect x="0.0491%" y="277" width="0.0566%" height="15" fill="rgb(217,207,13)" fg:x="26" fg:w="30"/><text x="0.2991%" y="287.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (259 samples, 0.49%)</title><rect x="0.1057%" y="245" width="0.4889%" height="15" fill="rgb(231,73,38)" fg:x="56" fg:w="259"/><text x="0.3557%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (12 samples, 0.02%)</title><rect x="0.5946%" y="245" width="0.0227%" height="15" fill="rgb(225,20,46)" fg:x="315" fg:w="12"/><text x="0.8446%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (314 samples, 0.59%)</title><rect x="0.0491%" y="325" width="0.5927%" height="15" fill="rgb(210,31,41)" fg:x="26" fg:w="314"/><text x="0.2991%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (314 samples, 0.59%)</title><rect x="0.0491%" y="309" width="0.5927%" height="15" fill="rgb(221,200,47)" fg:x="26" fg:w="314"/><text x="0.2991%" y="319.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (314 samples, 0.59%)</title><rect x="0.0491%" y="293" width="0.5927%" height="15" fill="rgb(226,26,5)" fg:x="26" fg:w="314"/><text x="0.2991%" y="303.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (284 samples, 0.54%)</title><rect x="0.1057%" y="277" width="0.5361%" height="15" fill="rgb(249,33,26)" fg:x="56" fg:w="284"/><text x="0.3557%" y="287.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259&gt;, void (long, long)&gt;::operator() (284 samples, 0.54%)</title><rect x="0.1057%" y="261" width="0.5361%" height="15" fill="rgb(235,183,28)" fg:x="56" fg:w="284"/><text x="0.3557%" y="271.50"></text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (13 samples, 0.02%)</title><rect x="0.6172%" y="245" width="0.0245%" height="15" fill="rgb(221,5,38)" fg:x="327" fg:w="13"/><text x="0.8672%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (9 samples, 0.02%)</title><rect x="0.6248%" y="229" width="0.0170%" height="15" fill="rgb(247,18,42)" fg:x="331" fg:w="9"/><text x="0.8748%" y="239.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (9 samples, 0.02%)</title><rect x="0.6418%" y="261" width="0.0170%" height="15" fill="rgb(241,131,45)" fg:x="340" fg:w="9"/><text x="0.8918%" y="271.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute (368 samples, 0.69%)</title><rect x="0.0340%" y="357" width="0.6946%" height="15" fill="rgb(249,31,29)" fg:x="18" fg:w="368"/><text x="0.2840%" y="367.50"></text></g><g><title>swiftide-bench`onnxruntime::UntypedBroadcastTwo (368 samples, 0.69%)</title><rect x="0.0340%" y="341" width="0.6946%" height="15" fill="rgb(225,111,53)" fg:x="18" fg:w="368"/><text x="0.2840%" y="351.50"></text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (46 samples, 0.09%)</title><rect x="0.6418%" y="325" width="0.0868%" height="15" fill="rgb(238,160,17)" fg:x="340" fg:w="46"/><text x="0.8918%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (46 samples, 0.09%)</title><rect x="0.6418%" y="309" width="0.0868%" height="15" fill="rgb(214,148,48)" fg:x="340" fg:w="46"/><text x="0.8918%" y="319.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (46 samples, 0.09%)</title><rect x="0.6418%" y="293" width="0.0868%" height="15" fill="rgb(232,36,49)" fg:x="340" fg:w="46"/><text x="0.8918%" y="303.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (46 samples, 0.09%)</title><rect x="0.6418%" y="277" width="0.0868%" height="15" fill="rgb(209,103,24)" fg:x="340" fg:w="46"/><text x="0.8918%" y="287.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (37 samples, 0.07%)</title><rect x="0.6587%" y="261" width="0.0698%" height="15" fill="rgb(229,88,8)" fg:x="349" fg:w="37"/><text x="0.9087%" y="271.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (37 samples, 0.07%)</title><rect x="0.6587%" y="245" width="0.0698%" height="15" fill="rgb(213,181,19)" fg:x="349" fg:w="37"/><text x="0.9087%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::Gather::Compute (21 samples, 0.04%)</title><rect x="0.7286%" y="357" width="0.0396%" height="15" fill="rgb(254,191,54)" fg:x="386" fg:w="21"/><text x="0.9786%" y="367.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::GatherCopyData&lt;long long&gt; (20 samples, 0.04%)</title><rect x="0.7305%" y="341" width="0.0378%" height="15" fill="rgb(241,83,37)" fg:x="387" fg:w="20"/><text x="0.9805%" y="351.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (19 samples, 0.04%)</title><rect x="0.7324%" y="325" width="0.0359%" height="15" fill="rgb(233,36,39)" fg:x="388" fg:w="19"/><text x="0.9824%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (19 samples, 0.04%)</title><rect x="0.7324%" y="309" width="0.0359%" height="15" fill="rgb(226,3,54)" fg:x="388" fg:w="19"/><text x="0.9824%" y="319.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (19 samples, 0.04%)</title><rect x="0.7324%" y="293" width="0.0359%" height="15" fill="rgb(245,192,40)" fg:x="388" fg:w="19"/><text x="0.9824%" y="303.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (17 samples, 0.03%)</title><rect x="0.7361%" y="277" width="0.0321%" height="15" fill="rgb(238,167,29)" fg:x="390" fg:w="17"/><text x="0.9861%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.03%)</title><rect x="0.7361%" y="261" width="0.0321%" height="15" fill="rgb(232,182,51)" fg:x="390" fg:w="17"/><text x="0.9861%" y="271.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (31 samples, 0.06%)</title><rect x="0.7682%" y="277" width="0.0585%" height="15" fill="rgb(231,60,39)" fg:x="407" fg:w="31"/><text x="1.0182%" y="287.50"></text></g><g><title>swiftide-bench`onnxruntime::LayerNormImpl::Compute (65 samples, 0.12%)</title><rect x="0.7682%" y="357" width="0.1227%" height="15" fill="rgb(208,69,12)" fg:x="407" fg:w="65"/><text x="1.0182%" y="367.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (65 samples, 0.12%)</title><rect x="0.7682%" y="341" width="0.1227%" height="15" fill="rgb(235,93,37)" fg:x="407" fg:w="65"/><text x="1.0182%" y="351.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (65 samples, 0.12%)</title><rect x="0.7682%" y="325" width="0.1227%" height="15" fill="rgb(213,116,39)" fg:x="407" fg:w="65"/><text x="1.0182%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (65 samples, 0.12%)</title><rect x="0.7682%" y="309" width="0.1227%" height="15" fill="rgb(222,207,29)" fg:x="407" fg:w="65"/><text x="1.0182%" y="319.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (65 samples, 0.12%)</title><rect x="0.7682%" y="293" width="0.1227%" height="15" fill="rgb(206,96,30)" fg:x="407" fg:w="65"/><text x="1.0182%" y="303.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (34 samples, 0.06%)</title><rect x="0.8267%" y="277" width="0.0642%" height="15" fill="rgb(218,138,4)" fg:x="438" fg:w="34"/><text x="1.0767%" y="287.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (34 samples, 0.06%)</title><rect x="0.8267%" y="261" width="0.0642%" height="15" fill="rgb(250,191,14)" fg:x="438" fg:w="34"/><text x="1.0767%" y="271.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::(anonymous namespace)::ComputeImpl&lt;float, float&gt;(onnxruntime::OpKernelContext*, long long, float, bool)::&apos;lambda&apos;(long)::operator() (34 samples, 0.06%)</title><rect x="0.8267%" y="245" width="0.0642%" height="15" fill="rgb(239,60,40)" fg:x="438" fg:w="34"/><text x="1.0767%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (502 samples, 0.95%)</title><rect x="0.8909%" y="261" width="0.9475%" height="15" fill="rgb(206,27,48)" fg:x="472" fg:w="502"/><text x="1.1409%" y="271.50"></text></g><g><title>swiftide-bench`.LAdd.Compute16.x4.BlockBy4Loop (1,070 samples, 2.02%)</title><rect x="1.8384%" y="197" width="2.0196%" height="15" fill="rgb(225,35,8)" fg:x="974" fg:w="1070"/><text x="2.0884%" y="207.50">s..</text></g><g><title>swiftide-bench`.LAdd.Output16.x4.Block (8 samples, 0.02%)</title><rect x="3.8581%" y="197" width="0.0151%" height="15" fill="rgb(250,213,24)" fg:x="2044" fg:w="8"/><text x="4.1081%" y="207.50"></text></g><g><title>swiftide-bench`.LAdd.ProcessNextColumnLoop16x4 (7 samples, 0.01%)</title><rect x="3.8732%" y="197" width="0.0132%" height="15" fill="rgb(247,123,22)" fg:x="2052" fg:w="7"/><text x="4.1232%" y="207.50"></text></g><g><title>swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop (1,325 samples, 2.50%)</title><rect x="3.8864%" y="197" width="2.5009%" height="15" fill="rgb(231,138,38)" fg:x="2059" fg:w="1325"/><text x="4.1364%" y="207.50">sw..</text></g><g><title>swiftide-bench`.LZero.Output16.x4.Block (37 samples, 0.07%)</title><rect x="6.3892%" y="197" width="0.0698%" height="15" fill="rgb(231,145,46)" fg:x="3385" fg:w="37"/><text x="6.6392%" y="207.50"></text></g><g><title>swiftide-bench`.LZero.ProcessNextColumnLoop16x4 (10 samples, 0.02%)</title><rect x="6.4590%" y="197" width="0.0189%" height="15" fill="rgb(251,118,11)" fg:x="3422" fg:w="10"/><text x="6.7090%" y="207.50"></text></g><g><title>swiftide-bench`.LZero.ProcessRemaining16.x4.Blocks (8 samples, 0.02%)</title><rect x="6.4779%" y="197" width="0.0151%" height="15" fill="rgb(217,147,25)" fg:x="3432" fg:w="8"/><text x="6.7279%" y="207.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (6 samples, 0.01%)</title><rect x="6.4930%" y="197" width="0.0113%" height="15" fill="rgb(247,81,37)" fg:x="3440" fg:w="6"/><text x="6.7430%" y="207.50"></text></g><g><title>swiftide-bench`MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*) (2,975 samples, 5.62%)</title><rect x="0.8909%" y="341" width="5.6153%" height="15" fill="rgb(209,12,38)" fg:x="472" fg:w="2975"/><text x="1.1409%" y="351.50">swiftid..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (2,975 samples, 5.62%)</title><rect x="0.8909%" y="325" width="5.6153%" height="15" fill="rgb(227,1,9)" fg:x="472" fg:w="2975"/><text x="1.1409%" y="335.50">swiftid..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (2,975 samples, 5.62%)</title><rect x="0.8909%" y="309" width="5.6153%" height="15" fill="rgb(248,47,43)" fg:x="472" fg:w="2975"/><text x="1.1409%" y="319.50">swiftid..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (2,975 samples, 5.62%)</title><rect x="0.8909%" y="293" width="5.6153%" height="15" fill="rgb(221,10,30)" fg:x="472" fg:w="2975"/><text x="1.1409%" y="303.50">swiftid..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (2,975 samples, 5.62%)</title><rect x="0.8909%" y="277" width="5.6153%" height="15" fill="rgb(210,229,1)" fg:x="472" fg:w="2975"/><text x="1.1409%" y="287.50">swiftid..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (2,473 samples, 4.67%)</title><rect x="1.8384%" y="261" width="4.6678%" height="15" fill="rgb(222,148,37)" fg:x="974" fg:w="2473"/><text x="2.0884%" y="271.50">swift..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (2,473 samples, 4.67%)</title><rect x="1.8384%" y="245" width="4.6678%" height="15" fill="rgb(234,67,33)" fg:x="974" fg:w="2473"/><text x="2.0884%" y="255.50">swift..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (2,473 samples, 4.67%)</title><rect x="1.8384%" y="229" width="4.6678%" height="15" fill="rgb(247,98,35)" fg:x="974" fg:w="2473"/><text x="2.0884%" y="239.50">swift..</text></g><g><title>swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (2,473 samples, 4.67%)</title><rect x="1.8384%" y="213" width="4.6678%" height="15" fill="rgb(247,138,52)" fg:x="974" fg:w="2473"/><text x="2.0884%" y="223.50">swift..</text></g><g><title>swiftide-bench`onnxruntime::MatMul&lt;float&gt;::Compute (2,979 samples, 5.62%)</title><rect x="0.8909%" y="357" width="5.6229%" height="15" fill="rgb(213,79,30)" fg:x="472" fg:w="2979"/><text x="1.1409%" y="367.50">swiftid..</text></g><g><title>swiftide-bench`MlasTranspose(unsigned int const*, unsigned int*, unsigned long, unsigned long) (70 samples, 0.13%)</title><rect x="6.5138%" y="325" width="0.1321%" height="15" fill="rgb(246,177,23)" fg:x="3451" fg:w="70"/><text x="6.7638%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (22 samples, 0.04%)</title><rect x="6.6478%" y="229" width="0.0415%" height="15" fill="rgb(230,62,27)" fg:x="3522" fg:w="22"/><text x="6.8978%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.01%)</title><rect x="6.6893%" y="213" width="0.0113%" height="15" fill="rgb(216,154,8)" fg:x="3544" fg:w="6"/><text x="6.9393%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::strided_copy_detail::NdCounter::Step (17 samples, 0.03%)</title><rect x="6.7006%" y="213" width="0.0321%" height="15" fill="rgb(244,35,45)" fg:x="3550" fg:w="17"/><text x="6.9506%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::Transpose::Compute (135 samples, 0.25%)</title><rect x="6.5138%" y="357" width="0.2548%" height="15" fill="rgb(251,115,12)" fg:x="3451" fg:w="135"/><text x="6.7638%" y="367.50"></text></g><g><title>swiftide-bench`onnxruntime::TransposeImpl(gsl::span (135 samples, 0.25%)</title><rect x="6.5138%" y="341" width="0.2548%" height="15" fill="rgb(240,54,50)" fg:x="3451" fg:w="135"/><text x="6.7638%" y="351.50"></text></g><g><title>swiftide-bench`onnxruntime::TransposeSingleAxisOutwards(gsl::span (65 samples, 0.12%)</title><rect x="6.6459%" y="325" width="0.1227%" height="15" fill="rgb(233,84,52)" fg:x="3521" fg:w="65"/><text x="6.8959%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::DispatchStridedCopy&lt;onnxruntime::TypeList&lt;float, double, long long, unsigned long long, int, unsigned int, short, unsigned short, signed char, unsigned char, onnxruntime::MLFloat16, onnxruntime::BFloat16, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;(onnxruntime::concurrency::ThreadPool*, onnxruntime::Tensor&amp;, long, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, onnxruntime::Tensor const&amp;, long, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator (65 samples, 0.12%)</title><rect x="6.6459%" y="309" width="0.1227%" height="15" fill="rgb(207,117,47)" fg:x="3521" fg:w="65"/><text x="6.8959%" y="319.50"></text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator (65 samples, 0.12%)</title><rect x="6.6459%" y="293" width="0.1227%" height="15" fill="rgb(249,43,39)" fg:x="3521" fg:w="65"/><text x="6.8959%" y="303.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (64 samples, 0.12%)</title><rect x="6.6478%" y="277" width="0.1208%" height="15" fill="rgb(209,38,44)" fg:x="3522" fg:w="64"/><text x="6.8978%" y="287.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (64 samples, 0.12%)</title><rect x="6.6478%" y="261" width="0.1208%" height="15" fill="rgb(236,212,23)" fg:x="3522" fg:w="64"/><text x="6.8978%" y="271.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (64 samples, 0.12%)</title><rect x="6.6478%" y="245" width="0.1208%" height="15" fill="rgb(242,79,21)" fg:x="3522" fg:w="64"/><text x="6.8978%" y="255.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (42 samples, 0.08%)</title><rect x="6.6893%" y="229" width="0.0793%" height="15" fill="rgb(211,96,35)" fg:x="3544" fg:w="42"/><text x="6.9393%" y="239.50"></text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;)::&apos;lambda0&apos;(long, long)::operator() (19 samples, 0.04%)</title><rect x="6.7327%" y="213" width="0.0359%" height="15" fill="rgb(253,215,40)" fg:x="3567" fg:w="19"/><text x="6.9827%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (34 samples, 0.06%)</title><rect x="6.7686%" y="245" width="0.0642%" height="15" fill="rgb(211,81,21)" fg:x="3586" fg:w="34"/><text x="7.0186%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::SoftmaxCPU&lt;float&gt; (254 samples, 0.48%)</title><rect x="6.7686%" y="357" width="0.4794%" height="15" fill="rgb(208,190,38)" fg:x="3586" fg:w="254"/><text x="7.0186%" y="367.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmax(float const*, float*, unsigned long, unsigned long, bool, onnxruntime::concurrency::ThreadPool*) (254 samples, 0.48%)</title><rect x="6.7686%" y="341" width="0.4794%" height="15" fill="rgb(235,213,38)" fg:x="3586" fg:w="254"/><text x="7.0186%" y="351.50"></text></g><g><title>swiftide-bench`MlasExecuteThreaded(void (*)(void*, long), void*, long, onnxruntime::concurrency::ThreadPool*) (254 samples, 0.48%)</title><rect x="6.7686%" y="325" width="0.4794%" height="15" fill="rgb(237,122,38)" fg:x="3586" fg:w="254"/><text x="7.0186%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (254 samples, 0.48%)</title><rect x="6.7686%" y="309" width="0.4794%" height="15" fill="rgb(244,218,35)" fg:x="3586" fg:w="254"/><text x="7.0186%" y="319.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (254 samples, 0.48%)</title><rect x="6.7686%" y="293" width="0.4794%" height="15" fill="rgb(240,68,47)" fg:x="3586" fg:w="254"/><text x="7.0186%" y="303.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (254 samples, 0.48%)</title><rect x="6.7686%" y="277" width="0.4794%" height="15" fill="rgb(210,16,53)" fg:x="3586" fg:w="254"/><text x="7.0186%" y="287.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (254 samples, 0.48%)</title><rect x="6.7686%" y="261" width="0.4794%" height="15" fill="rgb(235,124,12)" fg:x="3586" fg:w="254"/><text x="7.0186%" y="271.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (220 samples, 0.42%)</title><rect x="6.8328%" y="245" width="0.4153%" height="15" fill="rgb(224,169,11)" fg:x="3620" fg:w="220"/><text x="7.0828%" y="255.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (220 samples, 0.42%)</title><rect x="6.8328%" y="229" width="0.4153%" height="15" fill="rgb(250,166,2)" fg:x="3620" fg:w="220"/><text x="7.0828%" y="239.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmaxThreaded(void*, long) (220 samples, 0.42%)</title><rect x="6.8328%" y="213" width="0.4153%" height="15" fill="rgb(242,216,29)" fg:x="3620" fg:w="220"/><text x="7.0828%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (81 samples, 0.15%)</title><rect x="7.2480%" y="261" width="0.1529%" height="15" fill="rgb(230,116,27)" fg:x="3840" fg:w="81"/><text x="7.4980%" y="271.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (3,989 samples, 7.53%)</title><rect x="0.0283%" y="597" width="7.5293%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="3989"/><text x="0.2783%" y="607.50">swiftide-b..</text></g><g><title>swiftide-bench`rayon::iter::plumbing::Producer::fold_with (3,989 samples, 7.53%)</title><rect x="0.0283%" y="581" width="7.5293%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="3989"/><text x="0.2783%" y="591.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,989 samples, 7.53%)</title><rect x="0.0283%" y="565" width="7.5293%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="3989"/><text x="0.2783%" y="575.50">swiftide-b..</text></g><g><title>swiftide-bench`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,989 samples, 7.53%)</title><rect x="0.0283%" y="549" width="7.5293%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="3989"/><text x="0.2783%" y="559.50">swiftide-b..</text></g><g><title>swiftide-bench`ort::session::Session::run (3,986 samples, 7.52%)</title><rect x="0.0340%" y="533" width="7.5236%" height="15" fill="rgb(233,208,19)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="543.50">swiftide-b..</text></g><g><title>swiftide-bench`OrtApis::Run (3,986 samples, 7.52%)</title><rect x="0.0340%" y="517" width="7.5236%" height="15" fill="rgb(216,164,2)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="527.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Run(OrtRunOptions const&amp;, gsl::span&lt;char const* const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const* const, 18446744073709551615ul&gt;, gsl::span&lt;char const* const, 18446744073709551615ul&gt;, gsl::span (3,986 samples, 7.52%)</title><rect x="0.0340%" y="501" width="7.5236%" height="15" fill="rgb(220,129,5)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="511.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Run(OrtRunOptions const&amp;, gsl::span&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;*, std::__1::vector&lt;OrtDevice, std::__1::allocator (3,986 samples, 7.52%)</title><rect x="0.0340%" y="485" width="7.5236%" height="15" fill="rgb(242,17,10)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="495.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::utils::ExecuteGraph(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator (3,986 samples, 7.52%)</title><rect x="0.0340%" y="469" width="7.5236%" height="15" fill="rgb(242,107,0)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="479.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::utils::ExecuteGraph(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator (3,986 samples, 7.52%)</title><rect x="0.0340%" y="453" width="7.5236%" height="15" fill="rgb(251,28,31)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="463.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::utils::ExecuteGraphImpl(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager const&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (3,986 samples, 7.52%)</title><rect x="0.0340%" y="437" width="7.5236%" height="15" fill="rgb(233,223,10)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="447.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::ExecuteThePlan(onnxruntime::SessionState const&amp;, gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;int const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (3,986 samples, 7.52%)</title><rect x="0.0340%" y="421" width="7.5236%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="431.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::RunSince (3,986 samples, 7.52%)</title><rect x="0.0340%" y="405" width="7.5236%" height="15" fill="rgb(232,23,21)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="415.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::LaunchKernelStep::Execute (3,986 samples, 7.52%)</title><rect x="0.0340%" y="389" width="7.5236%" height="15" fill="rgb(244,5,23)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="399.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::ExecuteKernel (3,986 samples, 7.52%)</title><rect x="0.0340%" y="373" width="7.5236%" height="15" fill="rgb(226,81,46)" fg:x="18" fg:w="3986"/><text x="0.2840%" y="383.50">swiftide-b..</text></g><g><title>swiftide-bench`onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute (164 samples, 0.31%)</title><rect x="7.2480%" y="357" width="0.3096%" height="15" fill="rgb(247,70,30)" fg:x="3840" fg:w="164"/><text x="7.4980%" y="367.50"></text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos; (164 samples, 0.31%)</title><rect x="7.2480%" y="341" width="0.3096%" height="15" fill="rgb(212,68,19)" fg:x="3840" fg:w="164"/><text x="7.4980%" y="351.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (164 samples, 0.31%)</title><rect x="7.2480%" y="325" width="0.3096%" height="15" fill="rgb(240,187,13)" fg:x="3840" fg:w="164"/><text x="7.4980%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (164 samples, 0.31%)</title><rect x="7.2480%" y="309" width="0.3096%" height="15" fill="rgb(223,113,26)" fg:x="3840" fg:w="164"/><text x="7.4980%" y="319.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (164 samples, 0.31%)</title><rect x="7.2480%" y="293" width="0.3096%" height="15" fill="rgb(206,192,2)" fg:x="3840" fg:w="164"/><text x="7.4980%" y="303.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (164 samples, 0.31%)</title><rect x="7.2480%" y="277" width="0.3096%" height="15" fill="rgb(241,108,4)" fg:x="3840" fg:w="164"/><text x="7.4980%" y="287.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (83 samples, 0.16%)</title><rect x="7.4009%" y="261" width="0.1567%" height="15" fill="rgb(247,173,49)" fg:x="3921" fg:w="83"/><text x="7.6509%" y="271.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (83 samples, 0.16%)</title><rect x="7.4009%" y="245" width="0.1567%" height="15" fill="rgb(224,114,35)" fg:x="3921" fg:w="83"/><text x="7.6509%" y="255.50"></text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&amp;&amp;, long)::&apos;lambda&apos;(long)::operator() (83 samples, 0.16%)</title><rect x="7.4009%" y="229" width="0.1567%" height="15" fill="rgb(245,159,27)" fg:x="3921" fg:w="83"/><text x="7.6509%" y="239.50"></text></g><g><title>swiftide-bench`MlasErfKernel (60 samples, 0.11%)</title><rect x="7.4443%" y="213" width="0.1133%" height="15" fill="rgb(245,172,44)" fg:x="3944" fg:w="60"/><text x="7.6943%" y="223.50"></text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (3,999 samples, 7.55%)</title><rect x="0.0113%" y="773" width="7.5481%" height="15" fill="rgb(236,23,11)" fg:x="6" fg:w="3999"/><text x="0.2613%" y="783.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::try_flatten_unordered::TryFlattenUnordered&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (3,997 samples, 7.54%)</title><rect x="0.0151%" y="757" width="7.5444%" height="15" fill="rgb(205,117,38)" fg:x="8" fg:w="3997"/><text x="0.2651%" y="767.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (3,991 samples, 7.53%)</title><rect x="0.0264%" y="741" width="7.5330%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="3991"/><text x="0.2764%" y="751.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3,991 samples, 7.53%)</title><rect x="0.0264%" y="725" width="7.5330%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="3991"/><text x="0.2764%" y="735.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;swiftide_indexing::transformers::embed::Embed as swiftide_core::indexing_traits::BatchableTransformer&gt;::batch_transform::_{{closure}} (3,991 samples, 7.53%)</title><rect x="0.0264%" y="709" width="7.5330%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="3991"/><text x="0.2764%" y="719.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3,991 samples, 7.53%)</title><rect x="0.0264%" y="693" width="7.5330%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="3991"/><text x="0.2764%" y="703.50">swiftide-b..</text></g><g><title>swiftide-bench`swiftide_integrations::fastembed::embedding_model::_&lt;impl swiftide_core::indexing_traits::EmbeddingModel for swiftide_integrations::fastembed::FastEmbed&gt;::embed::_{{closure}} (3,991 samples, 7.53%)</title><rect x="0.0264%" y="677" width="7.5330%" height="15" fill="rgb(251,123,47)" fg:x="14" fg:w="3991"/><text x="0.2764%" y="687.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3,991 samples, 7.53%)</title><rect x="0.0264%" y="661" width="7.5330%" height="15" fill="rgb(221,13,13)" fg:x="14" fg:w="3991"/><text x="0.2764%" y="671.50">swiftide-b..</text></g><g><title>swiftide-bench`fastembed::text_embedding::impl::_&lt;impl fastembed::text_embedding::init::TextEmbedding&gt;::embed (3,991 samples, 7.53%)</title><rect x="0.0264%" y="645" width="7.5330%" height="15" fill="rgb(238,131,9)" fg:x="14" fg:w="3991"/><text x="0.2764%" y="655.50">swiftide-b..</text></g><g><title>swiftide-bench`rayon::result::_&lt;impl rayon::iter::FromParallelIterator&lt;core::result::Result&lt;T,E&gt;&gt; for core::result::Result&lt;C,E&gt;&gt;::from_par_iter (3,990 samples, 7.53%)</title><rect x="0.0283%" y="629" width="7.5311%" height="15" fill="rgb(211,50,8)" fg:x="15" fg:w="3990"/><text x="0.2783%" y="639.50">swiftide-b..</text></g><g><title>swiftide-bench`rayon::iter::extend::_&lt;impl rayon::iter::ParallelExtend&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::par_extend (3,990 samples, 7.53%)</title><rect x="0.0283%" y="613" width="7.5311%" height="15" fill="rgb(245,182,24)" fg:x="15" fg:w="3990"/><text x="0.2783%" y="623.50">swiftide-b..</text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.01%)</title><rect x="7.5670%" y="501" width="0.0113%" height="15" fill="rgb(242,14,37)" fg:x="4009" fg:w="6"/><text x="7.8170%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (42 samples, 0.08%)</title><rect x="7.5670%" y="517" width="0.0793%" height="15" fill="rgb(246,228,12)" fg:x="4009" fg:w="42"/><text x="7.8170%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free_large (36 samples, 0.07%)</title><rect x="7.5783%" y="501" width="0.0680%" height="15" fill="rgb(213,55,15)" fg:x="4015" fg:w="36"/><text x="7.8283%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (36 samples, 0.07%)</title><rect x="7.5783%" y="485" width="0.0680%" height="15" fill="rgb(209,9,3)" fg:x="4015" fg:w="36"/><text x="7.8283%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (36 samples, 0.07%)</title><rect x="7.5783%" y="469" width="0.0680%" height="15" fill="rgb(230,59,30)" fg:x="4015" fg:w="36"/><text x="7.8283%" y="479.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;ort::session::Session&gt; (47 samples, 0.09%)</title><rect x="7.5595%" y="677" width="0.0887%" height="15" fill="rgb(209,121,21)" fg:x="4005" fg:w="47"/><text x="7.8095%" y="687.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (47 samples, 0.09%)</title><rect x="7.5595%" y="661" width="0.0887%" height="15" fill="rgb(220,109,13)" fg:x="4005" fg:w="47"/><text x="7.8095%" y="671.50"></text></g><g><title>swiftide-bench`&lt;ort::session::SharedSessionInner as core::ops::drop::Drop&gt;::drop (47 samples, 0.09%)</title><rect x="7.5595%" y="645" width="0.0887%" height="15" fill="rgb(232,18,1)" fg:x="4005" fg:w="47"/><text x="7.8095%" y="655.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::~InferenceSession (47 samples, 0.09%)</title><rect x="7.5595%" y="629" width="0.0887%" height="15" fill="rgb(215,41,42)" fg:x="4005" fg:w="47"/><text x="7.8095%" y="639.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::~InferenceSession (47 samples, 0.09%)</title><rect x="7.5595%" y="613" width="0.0887%" height="15" fill="rgb(224,123,36)" fg:x="4005" fg:w="47"/><text x="7.8095%" y="623.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::~SessionState (46 samples, 0.09%)</title><rect x="7.5613%" y="597" width="0.0868%" height="15" fill="rgb(240,125,3)" fg:x="4006" fg:w="46"/><text x="7.8113%" y="607.50"></text></g><g><title>swiftide-bench`onnxruntime::MatMul&lt;float&gt;::~MatMul (46 samples, 0.09%)</title><rect x="7.5613%" y="581" width="0.0868%" height="15" fill="rgb(205,98,50)" fg:x="4006" fg:w="46"/><text x="7.8113%" y="591.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;std::__1::unique_ptr&lt;void, std::__1::function&lt;void (void*)&gt;&gt; onnxruntime::IAllocator::MakeUniquePtr&lt;void&gt;(std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt;, unsigned long, bool, onnxruntime::Stream*, std::__1::function&lt;void (onnxruntime::Stream&amp;, onnxruntime::synchronize::Notification&amp;)&gt;)::&apos;lambda&apos;(void*), std::__1::allocator&lt;std::__1::unique_ptr&lt;void, std::__1::function&lt;void (void*)&gt;&gt; onnxruntime::IAllocator::MakeUniquePtr&lt;void&gt;(std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt;, unsigned long, bool, onnxruntime::Stream*, std::__1::function&lt;void (onnxruntime::Stream&amp;, onnxruntime::synchronize::Notification&amp;)&gt;)::&apos;lambda&apos;(void*)&gt;, void (void*)&gt;::destroy (43 samples, 0.08%)</title><rect x="7.5670%" y="565" width="0.0812%" height="15" fill="rgb(205,185,37)" fg:x="4009" fg:w="43"/><text x="7.8170%" y="575.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::~BFCArena (43 samples, 0.08%)</title><rect x="7.5670%" y="549" width="0.0812%" height="15" fill="rgb(238,207,15)" fg:x="4009" fg:w="43"/><text x="7.8170%" y="559.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::~BFCArena (43 samples, 0.08%)</title><rect x="7.5670%" y="533" width="0.0812%" height="15" fill="rgb(213,199,42)" fg:x="4009" fg:w="43"/><text x="7.8170%" y="543.50"></text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (4,048 samples, 7.64%)</title><rect x="0.0094%" y="789" width="7.6406%" height="15" fill="rgb(235,201,11)" fg:x="5" fg:w="4048"/><text x="0.2594%" y="799.50">swiftide-b..</text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;futures_util::stream::try_stream::MapOk&lt;swiftide_core::indexing_stream::IndexingStream,swiftide_indexing::pipeline::Pipeline::then_store_with&lt;swiftide_integrations::qdrant::Qdrant&gt;::{{closure}}&gt;&gt;&gt; (48 samples, 0.09%)</title><rect x="7.5595%" y="773" width="0.0906%" height="15" fill="rgb(207,46,11)" fg:x="4005" fg:w="48"/><text x="7.8095%" y="783.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_flatten_unordered::TryFlattenUnordered&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;futures_util::stream::try_stream::MapOk&lt;futures_util::stream::try_stream::try_chunks::TryChunks&lt;swiftide_core::indexing_stream::IndexingStream&gt;,swiftide_indexing::pipeline::Pipeline::then_in_batch&lt;swiftide_indexing::transformers::embed::Embed&gt;::{{closure}}&gt;&gt;&gt;&gt; (48 samples, 0.09%)</title><rect x="7.5595%" y="757" width="0.0906%" height="15" fill="rgb(241,35,35)" fg:x="4005" fg:w="48"/><text x="7.8095%" y="767.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_flatten_unordered::NestedTryStreamIntoEitherTryStream&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;futures_util::stream::try_stream::MapOk&lt;futures_util::stream::try_stream::try_chunks::TryChunks&lt;swiftide_core::indexing_stream::IndexingStream&gt;,swiftide_indexing::pipeline::Pipeline::then_in_batch&lt;swiftide_indexing::transformers::embed::Embed&gt;::{{closure}}&gt;&gt;&gt;&gt; (48 samples, 0.09%)</title><rect x="7.5595%" y="741" width="0.0906%" height="15" fill="rgb(243,32,47)" fg:x="4005" fg:w="48"/><text x="7.8095%" y="751.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (48 samples, 0.09%)</title><rect x="7.5595%" y="725" width="0.0906%" height="15" fill="rgb(247,202,23)" fg:x="4005" fg:w="48"/><text x="7.8095%" y="735.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (48 samples, 0.09%)</title><rect x="7.5595%" y="709" width="0.0906%" height="15" fill="rgb(219,102,11)" fg:x="4005" fg:w="48"/><text x="7.8095%" y="719.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (48 samples, 0.09%)</title><rect x="7.5595%" y="693" width="0.0906%" height="15" fill="rgb(243,110,44)" fg:x="4005" fg:w="48"/><text x="7.8095%" y="703.50"></text></g><g><title>swiftide-bench`fastembed::common::load_tokenizer_hf_hub (6 samples, 0.01%)</title><rect x="7.6519%" y="741" width="0.0113%" height="15" fill="rgb(222,74,54)" fg:x="4054" fg:w="6"/><text x="7.9019%" y="751.50"></text></g><g><title>swiftide-bench`fastembed::common::load_tokenizer (6 samples, 0.01%)</title><rect x="7.6519%" y="725" width="0.0113%" height="15" fill="rgb(216,99,12)" fg:x="4054" fg:w="6"/><text x="7.9019%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.02%)</title><rect x="7.6708%" y="469" width="0.0151%" height="15" fill="rgb(226,22,26)" fg:x="4064" fg:w="8"/><text x="7.9208%" y="479.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(char const*, int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.04%)</title><rect x="7.6708%" y="485" width="0.0378%" height="15" fill="rgb(217,163,10)" fg:x="4064" fg:w="20"/><text x="7.9208%" y="495.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::EpsCopyInputStream::Next (12 samples, 0.02%)</title><rect x="7.6859%" y="469" width="0.0227%" height="15" fill="rgb(213,25,53)" fg:x="4072" fg:w="12"/><text x="7.9359%" y="479.50"></text></g><g><title>swiftide-bench`google::protobuf::io::CopyingInputStreamAdaptor::Next (12 samples, 0.02%)</title><rect x="7.6859%" y="453" width="0.0227%" height="15" fill="rgb(252,105,26)" fg:x="4072" fg:w="12"/><text x="7.9359%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`read (12 samples, 0.02%)</title><rect x="7.6859%" y="437" width="0.0227%" height="15" fill="rgb(220,39,43)" fg:x="4072" fg:w="12"/><text x="7.9359%" y="447.50"></text></g><g><title>swiftide-bench`onnxruntime::Model::Load (27 samples, 0.05%)</title><rect x="7.6689%" y="597" width="0.0510%" height="15" fill="rgb(229,68,48)" fg:x="4063" fg:w="27"/><text x="7.9189%" y="607.50"></text></g><g><title>swiftide-bench`google::protobuf::MessageLite::ParseFromZeroCopyStream (27 samples, 0.05%)</title><rect x="7.6689%" y="581" width="0.0510%" height="15" fill="rgb(252,8,32)" fg:x="4063" fg:w="27"/><text x="7.9189%" y="591.50"></text></g><g><title>swiftide-bench`onnx::ModelProto::_InternalParse (26 samples, 0.05%)</title><rect x="7.6708%" y="565" width="0.0491%" height="15" fill="rgb(223,20,43)" fg:x="4064" fg:w="26"/><text x="7.9208%" y="575.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::ParseContext::ParseMessage (26 samples, 0.05%)</title><rect x="7.6708%" y="549" width="0.0491%" height="15" fill="rgb(229,81,49)" fg:x="4064" fg:w="26"/><text x="7.9208%" y="559.50"></text></g><g><title>swiftide-bench`onnx::GraphProto::_InternalParse (26 samples, 0.05%)</title><rect x="7.6708%" y="533" width="0.0491%" height="15" fill="rgb(236,28,36)" fg:x="4064" fg:w="26"/><text x="7.9208%" y="543.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::ParseContext::ParseMessage (26 samples, 0.05%)</title><rect x="7.6708%" y="517" width="0.0491%" height="15" fill="rgb(249,185,26)" fg:x="4064" fg:w="26"/><text x="7.9208%" y="527.50"></text></g><g><title>swiftide-bench`onnx::TensorProto::_InternalParse (26 samples, 0.05%)</title><rect x="7.6708%" y="501" width="0.0491%" height="15" fill="rgb(249,174,33)" fg:x="4064" fg:w="26"/><text x="7.9208%" y="511.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::InlineGreedyStringParser(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.01%)</title><rect x="7.7086%" y="485" width="0.0113%" height="15" fill="rgb(233,201,37)" fg:x="4084" fg:w="6"/><text x="7.9586%" y="495.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (6 samples, 0.01%)</title><rect x="7.7086%" y="469" width="0.0113%" height="15" fill="rgb(221,78,26)" fg:x="4084" fg:w="6"/><text x="7.9586%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.01%)</title><rect x="7.7086%" y="453" width="0.0113%" height="15" fill="rgb(250,127,30)" fg:x="4084" fg:w="6"/><text x="7.9586%" y="463.50"></text></g><g><title>swiftide-bench`(anonymous namespace)::CreateSessionAndLoadModel(OrtSessionOptions const*, OrtEnv const*, char const*, void const*, unsigned long, std::__1::unique_ptr&lt;onnxruntime::InferenceSession, std::__1::default_delete (31 samples, 0.06%)</title><rect x="7.6633%" y="709" width="0.0585%" height="15" fill="rgb(230,49,44)" fg:x="4060" fg:w="31"/><text x="7.9133%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (30 samples, 0.06%)</title><rect x="7.6652%" y="693" width="0.0566%" height="15" fill="rgb(229,67,23)" fg:x="4061" fg:w="30"/><text x="7.9152%" y="703.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::LoadOnnxModel(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (30 samples, 0.06%)</title><rect x="7.6652%" y="677" width="0.0566%" height="15" fill="rgb(249,83,47)" fg:x="4061" fg:w="30"/><text x="7.9152%" y="687.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::LoadWithLoader(std::__1::function&lt;onnxruntime::common::Status (std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;)&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (30 samples, 0.06%)</title><rect x="7.6652%" y="661" width="0.0566%" height="15" fill="rgb(215,43,3)" fg:x="4061" fg:w="30"/><text x="7.9152%" y="671.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::InferenceSession::LoadOnnxModel(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;)::$_3, std::__1::allocator&lt;onnxruntime::InferenceSession::LoadOnnxModel(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;)::$_3&gt;, onnxruntime::common::Status (std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;)&gt;::operator()(std::__1::shared_ptr (30 samples, 0.06%)</title><rect x="7.6652%" y="645" width="0.0566%" height="15" fill="rgb(238,154,13)" fg:x="4061" fg:w="30"/><text x="7.9152%" y="655.50"></text></g><g><title>swiftide-bench`onnxruntime::Model::Load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;, std::__1::list&lt;std::__1::shared_ptr&lt;onnxruntime::IOnnxRuntimeOpSchemaCollection&gt;, std::__1::allocator&lt;std::__1::shared_ptr (30 samples, 0.06%)</title><rect x="7.6652%" y="629" width="0.0566%" height="15" fill="rgb(219,56,2)" fg:x="4061" fg:w="30"/><text x="7.9152%" y="639.50"></text></g><g><title>swiftide-bench`onnxruntime::Model::Load(int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;, std::__1::list&lt;std::__1::shared_ptr&lt;onnxruntime::IOnnxRuntimeOpSchemaCollection&gt;, std::__1::allocator&lt;std::__1::shared_ptr (30 samples, 0.06%)</title><rect x="7.6652%" y="613" width="0.0566%" height="15" fill="rgb(233,0,4)" fg:x="4061" fg:w="30"/><text x="7.9152%" y="623.50"></text></g><g><title>swiftide-bench`onnxruntime::Graph::Resolve (7 samples, 0.01%)</title><rect x="7.7237%" y="629" width="0.0132%" height="15" fill="rgb(235,30,7)" fg:x="4092" fg:w="7"/><text x="7.9737%" y="639.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::TransformGraph (13 samples, 0.02%)</title><rect x="7.7218%" y="677" width="0.0245%" height="15" fill="rgb(250,79,13)" fg:x="4091" fg:w="13"/><text x="7.9718%" y="687.50"></text></g><g><title>swiftide-bench`onnxruntime::GraphTransformerManager::ApplyTransformers (13 samples, 0.02%)</title><rect x="7.7218%" y="661" width="0.0245%" height="15" fill="rgb(211,146,34)" fg:x="4091" fg:w="13"/><text x="7.9718%" y="671.50"></text></g><g><title>swiftide-bench`onnxruntime::GraphTransformer::Apply (13 samples, 0.02%)</title><rect x="7.7218%" y="645" width="0.0245%" height="15" fill="rgb(228,22,38)" fg:x="4091" fg:w="13"/><text x="7.9718%" y="655.50"></text></g><g><title>swiftide-bench`onnxruntime::SequentialPlanner::CreatePlan(onnxruntime::Node const*, onnxruntime::GraphViewer const&amp;, gsl::span&lt;onnxruntime::NodeArg const* const, 18446744073709551615ul&gt;, onnxruntime::ExecutionProviders const&amp;, std::__1::unordered_map&lt;unsigned long, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::unordered_map&lt;unsigned long, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (7 samples, 0.01%)</title><rect x="7.7501%" y="645" width="0.0132%" height="15" fill="rgb(235,168,5)" fg:x="4106" fg:w="7"/><text x="8.0001%" y="655.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::CreatePlan(onnxruntime::IStreamCommandHandleRegistry const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.01%)</title><rect x="7.7501%" y="629" width="0.0132%" height="15" fill="rgb(221,155,16)" fg:x="4106" fg:w="7"/><text x="8.0001%" y="639.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::ComputeReusePlan (7 samples, 0.01%)</title><rect x="7.7501%" y="613" width="0.0132%" height="15" fill="rgb(215,215,53)" fg:x="4106" fg:w="7"/><text x="8.0001%" y="623.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::ComputeSingleStreamReusePlan (7 samples, 0.01%)</title><rect x="7.7501%" y="597" width="0.0132%" height="15" fill="rgb(223,4,10)" fg:x="4106" fg:w="7"/><text x="8.0001%" y="607.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::FindReusableTensor (6 samples, 0.01%)</title><rect x="7.7520%" y="581" width="0.0113%" height="15" fill="rgb(234,103,6)" fg:x="4107" fg:w="6"/><text x="8.0020%" y="591.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.01%)</title><rect x="7.7633%" y="597" width="0.0113%" height="15" fill="rgb(227,97,0)" fg:x="4113" fg:w="6"/><text x="8.0133%" y="607.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::PrepackConstantInitializedTensors(onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned long, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, unsigned long&gt;&gt;&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, OrtValue const*, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.02%)</title><rect x="7.7633%" y="645" width="0.0227%" height="15" fill="rgb(234,150,53)" fg:x="4113" fg:w="12"/><text x="8.0133%" y="655.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::PrepackConstantInitializedTensors(onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned long, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, unsigned long&gt;&gt;&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, OrtValue const*, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, OrtValue const*&gt;&gt;&gt; const&amp;)::$_2::operator() (12 samples, 0.02%)</title><rect x="7.7633%" y="629" width="0.0227%" height="15" fill="rgb(228,201,54)" fg:x="4113" fg:w="12"/><text x="8.0133%" y="639.50"></text></g><g><title>swiftide-bench`onnxruntime::MatMul&lt;float&gt;::PrePack(onnxruntime::Tensor const&amp;, int, std::__1::shared_ptr (12 samples, 0.02%)</title><rect x="7.7633%" y="613" width="0.0227%" height="15" fill="rgb(222,22,37)" fg:x="4113" fg:w="12"/><text x="8.0133%" y="623.50"></text></g><g><title>swiftide-bench`onnxruntime::GemmPackBFp32(std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt;&amp;, onnxruntime::Tensor const&amp;, bool, std::__1::unique_ptr&lt;void, std::__1::function&lt;void  (6 samples, 0.01%)</title><rect x="7.7746%" y="597" width="0.0113%" height="15" fill="rgb(237,53,32)" fg:x="4119" fg:w="6"/><text x="8.0246%" y="607.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (6 samples, 0.01%)</title><rect x="7.7746%" y="581" width="0.0113%" height="15" fill="rgb(233,25,53)" fg:x="4119" fg:w="6"/><text x="8.0246%" y="591.50"></text></g><g><title>swiftide-bench`onnxruntime::utils::TensorProtoToTensor (13 samples, 0.02%)</title><rect x="7.7860%" y="629" width="0.0245%" height="15" fill="rgb(210,40,34)" fg:x="4125" fg:w="13"/><text x="8.0360%" y="639.50"></text></g><g><title>swiftide-bench`onnxruntime::(anonymous namespace)::UnpackTensorWithRawDataImpl (13 samples, 0.02%)</title><rect x="7.7860%" y="613" width="0.0245%" height="15" fill="rgb(241,220,44)" fg:x="4125" fg:w="13"/><text x="8.0360%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="7.7860%" y="597" width="0.0245%" height="15" fill="rgb(235,28,35)" fg:x="4125" fg:w="13"/><text x="8.0360%" y="607.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::FinalizeSessionStateImpl(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, onnxruntime::KernelRegistryManager const&amp;, onnxruntime::Node const*, onnxruntime::SessionOptions const&amp;, bool, onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned long, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, unsigned long&gt;&gt;&gt;&amp;, onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, OrtDevice, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (33 samples, 0.06%)</title><rect x="7.7501%" y="661" width="0.0623%" height="15" fill="rgb(210,56,17)" fg:x="4106" fg:w="33"/><text x="8.0001%" y="671.50"></text></g><g><title>swiftide-bench`onnxruntime::session_state_utils::SaveInitializedTensors(onnxruntime::Env const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, onnxruntime::GraphViewer const&amp;, std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt; const&amp;, onnxruntime::OrtValueNameIdxMap const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, onnxruntime::ITensorAllocator&amp;, std::__1::function&lt;onnxruntime::common::Status (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, OrtValue const&amp;, onnxruntime::OrtCallback const&amp;, bool, bool)&gt; const&amp;, onnxruntime::logging::Logger const&amp;, onnxruntime::DataTransferManager const&amp;, onnxruntime::ExecutionPlanBase const&amp;, onnxruntime::SessionOptions const&amp;, std::__1::function&lt;void (onnxruntime::ITensorAllocator&amp;)&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::unique_ptr&lt;onnxruntime::Tensor, std::__1::default_delete (14 samples, 0.03%)</title><rect x="7.7860%" y="645" width="0.0264%" height="15" fill="rgb(224,130,29)" fg:x="4125" fg:w="14"/><text x="8.0360%" y="655.50"></text></g><g><title>swiftide-bench`OrtApis::CreateSession (80 samples, 0.15%)</title><rect x="7.6633%" y="725" width="0.1510%" height="15" fill="rgb(235,212,8)" fg:x="4060" fg:w="80"/><text x="7.9133%" y="735.50"></text></g><g><title>swiftide-bench`(anonymous namespace)::InitializeSession(OrtSessionOptions const*, std::__1::unique_ptr&lt;onnxruntime::InferenceSession, std::__1::default_delete (49 samples, 0.09%)</title><rect x="7.7218%" y="709" width="0.0925%" height="15" fill="rgb(223,33,50)" fg:x="4091" fg:w="49"/><text x="7.9718%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Initialize (49 samples, 0.09%)</title><rect x="7.7218%" y="693" width="0.0925%" height="15" fill="rgb(219,149,13)" fg:x="4091" fg:w="49"/><text x="7.9718%" y="703.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::FinalizeSessionState(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (34 samples, 0.06%)</title><rect x="7.7501%" y="677" width="0.0642%" height="15" fill="rgb(250,156,29)" fg:x="4106" fg:w="34"/><text x="8.0001%" y="687.50"></text></g><g><title>swiftide-bench`std::rt::lang_start_internal (4,142 samples, 7.82%)</title><rect x="0.0094%" y="885" width="7.8180%" height="15" fill="rgb(216,193,19)" fg:x="5" fg:w="4142"/><text x="0.2594%" y="895.50">swiftide-be..</text></g><g><title>swiftide-bench`std::rt::lang_start::_{{closure}} (4,142 samples, 7.82%)</title><rect x="0.0094%" y="869" width="7.8180%" height="15" fill="rgb(216,135,14)" fg:x="5" fg:w="4142"/><text x="0.2594%" y="879.50">swiftide-be..</text></g><g><title>swiftide-bench`std::sys::backtrace::__rust_begin_short_backtrace (4,142 samples, 7.82%)</title><rect x="0.0094%" y="853" width="7.8180%" height="15" fill="rgb(241,47,5)" fg:x="5" fg:w="4142"/><text x="0.2594%" y="863.50">swiftide-be..</text></g><g><title>swiftide-bench`swiftide_bench::main (4,142 samples, 7.82%)</title><rect x="0.0094%" y="837" width="7.8180%" height="15" fill="rgb(233,42,35)" fg:x="5" fg:w="4142"/><text x="0.2594%" y="847.50">swiftide-be..</text></g><g><title>swiftide-bench`tokio::runtime::runtime::Runtime::block_on (4,142 samples, 7.82%)</title><rect x="0.0094%" y="821" width="7.8180%" height="15" fill="rgb(231,13,6)" fg:x="5" fg:w="4142"/><text x="0.2594%" y="831.50">swiftide-be..</text></g><g><title>swiftide-bench`tokio::runtime::park::CachedParkThread::block_on (4,142 samples, 7.82%)</title><rect x="0.0094%" y="805" width="7.8180%" height="15" fill="rgb(207,181,40)" fg:x="5" fg:w="4142"/><text x="0.2594%" y="815.50">swiftide-be..</text></g><g><title>swiftide-bench`swiftide_integrations::fastembed::FastEmbed::try_default (93 samples, 0.18%)</title><rect x="7.6519%" y="789" width="0.1755%" height="15" fill="rgb(254,173,49)" fg:x="4054" fg:w="93"/><text x="7.9019%" y="799.50"></text></g><g><title>swiftide-bench`swiftide_integrations::fastembed::FastEmbedBuilder::build (93 samples, 0.18%)</title><rect x="7.6519%" y="773" width="0.1755%" height="15" fill="rgb(221,1,38)" fg:x="4054" fg:w="93"/><text x="7.9019%" y="783.50"></text></g><g><title>swiftide-bench`fastembed::text_embedding::impl::_&lt;impl fastembed::text_embedding::init::TextEmbedding&gt;::try_new (93 samples, 0.18%)</title><rect x="7.6519%" y="757" width="0.1755%" height="15" fill="rgb(206,124,46)" fg:x="4054" fg:w="93"/><text x="7.9019%" y="767.50"></text></g><g><title>swiftide-bench`ort::session::builder::SessionBuilder::commit_from_file (87 samples, 0.16%)</title><rect x="7.6633%" y="741" width="0.1642%" height="15" fill="rgb(249,21,11)" fg:x="4060" fg:w="87"/><text x="7.9133%" y="751.50"></text></g><g><title>swiftide-bench`ort::environment::get_environment (7 samples, 0.01%)</title><rect x="7.8143%" y="725" width="0.0132%" height="15" fill="rgb(222,201,40)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="735.50"></text></g><g><title>swiftide-bench`ort::environment::EnvironmentBuilder::commit (7 samples, 0.01%)</title><rect x="7.8143%" y="709" width="0.0132%" height="15" fill="rgb(235,61,29)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="719.50"></text></g><g><title>swiftide-bench`OrtApis::CreateEnvWithCustomLogger(void (*) (7 samples, 0.01%)</title><rect x="7.8143%" y="693" width="0.0132%" height="15" fill="rgb(219,207,3)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="703.50"></text></g><g><title>swiftide-bench`OrtEnv::GetInstance (7 samples, 0.01%)</title><rect x="7.8143%" y="677" width="0.0132%" height="15" fill="rgb(222,56,46)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="687.50"></text></g><g><title>swiftide-bench`onnxruntime::Environment::Create(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete&lt;onnxruntime::logging::LoggingManager&gt;&gt;, std::__1::unique_ptr&lt;onnxruntime::Environment, std::__1::default_delete (7 samples, 0.01%)</title><rect x="7.8143%" y="661" width="0.0132%" height="15" fill="rgb(239,76,54)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="671.50"></text></g><g><title>swiftide-bench`onnxruntime::Environment::Initialize(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete (7 samples, 0.01%)</title><rect x="7.8143%" y="645" width="0.0132%" height="15" fill="rgb(231,124,27)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="655.50"></text></g><g><title>libc++.1.dylib`std::__1::__call_once(unsigned long volatile&amp;, void*, void (*) (7 samples, 0.01%)</title><rect x="7.8143%" y="629" width="0.0132%" height="15" fill="rgb(249,195,6)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="639.50"></text></g><g><title>swiftide-bench`void std::__1::__call_once_proxy[abi:v160006]&lt;std::__1::tuple&lt;onnxruntime::Environment::Initialize(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete&lt;onnxruntime::logging::LoggingManager&gt;&gt;, OrtThreadingOptions const*, bool)::$_5&amp;&amp;&gt;&gt; (7 samples, 0.01%)</title><rect x="7.8143%" y="613" width="0.0132%" height="15" fill="rgb(237,174,47)" fg:x="4140" fg:w="7"/><text x="8.0643%" y="623.50"></text></g><g><title>dyld`start (4,148 samples, 7.83%)</title><rect x="0.0000%" y="917" width="7.8294%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="4148"/><text x="0.2500%" y="927.50">dyld`start</text></g><g><title>swiftide-bench`main (4,143 samples, 7.82%)</title><rect x="0.0094%" y="901" width="7.8199%" height="15" fill="rgb(231,57,52)" fg:x="5" fg:w="4143"/><text x="0.2594%" y="911.50">swiftide-be..</text></g><g><title>libsystem_kernel.dylib`__exit (17 samples, 0.03%)</title><rect x="7.8294%" y="917" width="0.0321%" height="15" fill="rgb(248,177,22)" fg:x="4148" fg:w="17"/><text x="8.0794%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (13 samples, 0.02%)</title><rect x="7.8615%" y="917" width="0.0245%" height="15" fill="rgb(215,211,37)" fg:x="4165" fg:w="13"/><text x="8.1115%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.04%)</title><rect x="17.7841%" y="805" width="0.0359%" height="15" fill="rgb(241,128,51)" fg:x="9422" fg:w="19"/><text x="18.0341%" y="815.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (35 samples, 0.07%)</title><rect x="17.8199%" y="805" width="0.0661%" height="15" fill="rgb(227,165,31)" fg:x="9441" fg:w="35"/><text x="18.0699%" y="815.50"></text></g><g><title>swiftide-bench`onnxruntime::strided_copy_detail::NdCounter::Step (20 samples, 0.04%)</title><rect x="17.8879%" y="805" width="0.0378%" height="15" fill="rgb(228,167,24)" fg:x="9477" fg:w="20"/><text x="18.1379%" y="815.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (292 samples, 0.55%)</title><rect x="17.9256%" y="789" width="0.5512%" height="15" fill="rgb(228,143,12)" fg:x="9497" fg:w="292"/><text x="18.1756%" y="799.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (10 samples, 0.02%)</title><rect x="18.4768%" y="789" width="0.0189%" height="15" fill="rgb(249,149,8)" fg:x="9789" fg:w="10"/><text x="18.7268%" y="799.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (15 samples, 0.03%)</title><rect x="18.5032%" y="773" width="0.0283%" height="15" fill="rgb(243,35,44)" fg:x="9803" fg:w="15"/><text x="18.7532%" y="783.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259&gt;, void (long, long)&gt;::operator() (323 samples, 0.61%)</title><rect x="17.9256%" y="805" width="0.6097%" height="15" fill="rgb(246,89,9)" fg:x="9497" fg:w="323"/><text x="18.1756%" y="815.50"></text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (21 samples, 0.04%)</title><rect x="18.4957%" y="789" width="0.0396%" height="15" fill="rgb(233,213,13)" fg:x="9799" fg:w="21"/><text x="18.7457%" y="799.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmaxThreaded(void*, long) (230 samples, 0.43%)</title><rect x="18.5353%" y="789" width="0.4341%" height="15" fill="rgb(233,141,41)" fg:x="9820" fg:w="230"/><text x="18.7853%" y="799.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::(anonymous namespace)::ComputeImpl&lt;float, float&gt;(onnxruntime::OpKernelContext*, long long, float, bool)::&apos;lambda&apos;(long)::operator() (32 samples, 0.06%)</title><rect x="18.9694%" y="789" width="0.0604%" height="15" fill="rgb(239,167,4)" fg:x="10050" fg:w="32"/><text x="19.2194%" y="799.50"></text></g><g><title>swiftide-bench`.LAdd.Compute16.x4.BlockBy4Loop (1,074 samples, 2.03%)</title><rect x="19.0298%" y="757" width="2.0272%" height="15" fill="rgb(209,217,16)" fg:x="10082" fg:w="1074"/><text x="19.2798%" y="767.50">s..</text></g><g><title>swiftide-bench`.LAdd.Output16.x4.Block (11 samples, 0.02%)</title><rect x="21.0570%" y="757" width="0.0208%" height="15" fill="rgb(219,88,35)" fg:x="11156" fg:w="11"/><text x="21.3070%" y="767.50"></text></g><g><title>swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop (1,358 samples, 2.56%)</title><rect x="21.0853%" y="757" width="2.5632%" height="15" fill="rgb(220,193,23)" fg:x="11171" fg:w="1358"/><text x="21.3353%" y="767.50">sw..</text></g><g><title>swiftide-bench`.LZero.Output16.x4.Block (34 samples, 0.06%)</title><rect x="23.6485%" y="757" width="0.0642%" height="15" fill="rgb(230,90,52)" fg:x="12529" fg:w="34"/><text x="23.8985%" y="767.50"></text></g><g><title>swiftide-bench`.LZero.ProcessNextColumnLoop16x4 (6 samples, 0.01%)</title><rect x="23.7127%" y="757" width="0.0113%" height="15" fill="rgb(252,106,19)" fg:x="12563" fg:w="6"/><text x="23.9627%" y="767.50"></text></g><g><title>swiftide-bench`.LZero.ProcessRemaining16.x4.Blocks (9 samples, 0.02%)</title><rect x="23.7240%" y="757" width="0.0170%" height="15" fill="rgb(206,74,20)" fg:x="12569" fg:w="9"/><text x="23.9740%" y="767.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (8 samples, 0.02%)</title><rect x="23.7410%" y="757" width="0.0151%" height="15" fill="rgb(230,138,44)" fg:x="12578" fg:w="8"/><text x="23.9910%" y="767.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (2,507 samples, 4.73%)</title><rect x="19.0298%" y="789" width="4.7320%" height="15" fill="rgb(235,182,43)" fg:x="10082" fg:w="2507"/><text x="19.2798%" y="799.50">swifti..</text></g><g><title>swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (2,507 samples, 4.73%)</title><rect x="19.0298%" y="773" width="4.7320%" height="15" fill="rgb(242,16,51)" fg:x="10082" fg:w="2507"/><text x="19.2798%" y="783.50">swifti..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (2,850 samples, 5.38%)</title><rect x="18.5353%" y="805" width="5.3794%" height="15" fill="rgb(248,9,4)" fg:x="9820" fg:w="2850"/><text x="18.7853%" y="815.50">swiftid..</text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&amp;&amp;, long)::&apos;lambda&apos;(long)::operator() (81 samples, 0.15%)</title><rect x="23.7618%" y="789" width="0.1529%" height="15" fill="rgb(210,31,22)" fg:x="12589" fg:w="81"/><text x="24.0118%" y="799.50"></text></g><g><title>swiftide-bench`MlasErfKernel (60 samples, 0.11%)</title><rect x="23.8014%" y="773" width="0.1133%" height="15" fill="rgb(239,54,39)" fg:x="12610" fg:w="60"/><text x="24.0514%" y="783.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallelInternal(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, unsigned int, bool, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;()::operator() (3,272 samples, 6.18%)</title><rect x="17.7727%" y="837" width="6.1759%" height="15" fill="rgb(230,99,41)" fg:x="9416" fg:w="3272"/><text x="18.0227%" y="847.50">swiftide..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (3,267 samples, 6.17%)</title><rect x="17.7822%" y="821" width="6.1665%" height="15" fill="rgb(253,106,12)" fg:x="9421" fg:w="3267"/><text x="18.0322%" y="831.50">swiftide..</text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;)::&apos;lambda0&apos;(long, long)::operator() (18 samples, 0.03%)</title><rect x="23.9147%" y="805" width="0.0340%" height="15" fill="rgb(213,46,41)" fg:x="12670" fg:w="18"/><text x="24.1647%" y="815.50"></text></g><g><title>swiftide-bench`nsync::nsync_mu_semaphore_p_with_deadline (12 samples, 0.02%)</title><rect x="23.9487%" y="805" width="0.0227%" height="15" fill="rgb(215,133,35)" fg:x="12688" fg:w="12"/><text x="24.1987%" y="815.50"></text></g><g><title>libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock (12 samples, 0.02%)</title><rect x="23.9487%" y="789" width="0.0227%" height="15" fill="rgb(213,28,5)" fg:x="12688" fg:w="12"/><text x="24.1987%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (10 samples, 0.02%)</title><rect x="23.9524%" y="773" width="0.0189%" height="15" fill="rgb(215,77,49)" fg:x="12690" fg:w="10"/><text x="24.2024%" y="783.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerData::SetBlocked(std::__1::function&lt;bool ()&gt;, std::__1::function&lt;void  (13 samples, 0.02%)</title><rect x="23.9487%" y="837" width="0.0245%" height="15" fill="rgb(248,100,22)" fg:x="12688" fg:w="13"/><text x="24.1987%" y="847.50"></text></g><g><title>swiftide-bench`nsync::nsync_cv_wait_with_deadline_generic(nsync::nsync_cv_s_*, void*, void (*)(void*), void (*) (13 samples, 0.02%)</title><rect x="23.9487%" y="821" width="0.0245%" height="15" fill="rgb(208,67,9)" fg:x="12688" fg:w="13"/><text x="24.1987%" y="831.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (215 samples, 0.41%)</title><rect x="23.9807%" y="805" width="0.4058%" height="15" fill="rgb(219,133,21)" fg:x="12705" fg:w="215"/><text x="24.2307%" y="815.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (422 samples, 0.80%)</title><rect x="24.3884%" y="805" width="0.7965%" height="15" fill="rgb(246,46,29)" fg:x="12921" fg:w="422"/><text x="24.6384%" y="815.50"></text></g><g><title>swiftide-bench`onnxruntime::strided_copy_detail::NdCounter::Step (178 samples, 0.34%)</title><rect x="25.1869%" y="805" width="0.3360%" height="15" fill="rgb(246,185,52)" fg:x="13344" fg:w="178"/><text x="25.4369%" y="815.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (3,587 samples, 6.77%)</title><rect x="25.5228%" y="789" width="6.7705%" height="15" fill="rgb(252,136,11)" fg:x="13522" fg:w="3587"/><text x="25.7728%" y="799.50">swiftide-..</text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (161 samples, 0.30%)</title><rect x="32.2933%" y="789" width="0.3039%" height="15" fill="rgb(219,138,53)" fg:x="17109" fg:w="161"/><text x="32.5433%" y="799.50"></text></g><g><title>swiftide-bench`onnxruntime::InputBroadcaster::AdvanceBy (12 samples, 0.02%)</title><rect x="32.5972%" y="789" width="0.0227%" height="15" fill="rgb(211,51,23)" fg:x="17270" fg:w="12"/><text x="32.8472%" y="799.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (128 samples, 0.24%)</title><rect x="32.7086%" y="773" width="0.2416%" height="15" fill="rgb(247,221,28)" fg:x="17329" fg:w="128"/><text x="32.9586%" y="783.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259&gt;, void (long, long)&gt;::operator() (3,951 samples, 7.46%)</title><rect x="25.5228%" y="805" width="7.4575%" height="15" fill="rgb(251,222,45)" fg:x="13522" fg:w="3951"/><text x="25.7728%" y="815.50">swiftide-b..</text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (191 samples, 0.36%)</title><rect x="32.6199%" y="789" width="0.3605%" height="15" fill="rgb(217,162,53)" fg:x="17282" fg:w="191"/><text x="32.8699%" y="799.50"></text></g><g><title>swiftide-bench`onnxruntime::InputBroadcaster::AdvanceBy (16 samples, 0.03%)</title><rect x="32.9502%" y="773" width="0.0302%" height="15" fill="rgb(229,93,14)" fg:x="17457" fg:w="16"/><text x="33.2002%" y="783.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmaxThreaded(void*, long) (2,537 samples, 4.79%)</title><rect x="32.9804%" y="789" width="4.7886%" height="15" fill="rgb(209,67,49)" fg:x="17473" fg:w="2537"/><text x="33.2304%" y="799.50">swifti..</text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::(anonymous namespace)::ComputeImpl&lt;float, float&gt;(onnxruntime::OpKernelContext*, long long, float, bool)::&apos;lambda&apos;(long)::operator() (476 samples, 0.90%)</title><rect x="37.7709%" y="789" width="0.8985%" height="15" fill="rgb(213,87,29)" fg:x="20011" fg:w="476"/><text x="38.0209%" y="799.50"></text></g><g><title>swiftide-bench`.LAdd.Compute16.x4.BlockBy4Loop (12,420 samples, 23.44%)</title><rect x="38.6712%" y="757" width="23.4428%" height="15" fill="rgb(205,151,52)" fg:x="20488" fg:w="12420"/><text x="38.9212%" y="767.50">swiftide-bench`.LAdd.Compute16.x4.Blo..</text></g><g><title>swiftide-bench`.LAdd.Output16.x4.Block (75 samples, 0.14%)</title><rect x="62.1197%" y="757" width="0.1416%" height="15" fill="rgb(253,215,39)" fg:x="32911" fg:w="75"/><text x="62.3697%" y="767.50"></text></g><g><title>swiftide-bench`.LAdd.ProcessNextColumnLoop16x4 (63 samples, 0.12%)</title><rect x="62.2612%" y="757" width="0.1189%" height="15" fill="rgb(221,220,41)" fg:x="32986" fg:w="63"/><text x="62.5112%" y="767.50"></text></g><g><title>swiftide-bench`.LAdd.ProcessRemaining16.x4.Blocks (10 samples, 0.02%)</title><rect x="62.3801%" y="757" width="0.0189%" height="15" fill="rgb(218,133,21)" fg:x="33049" fg:w="10"/><text x="62.6301%" y="767.50"></text></g><g><title>swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop (16,644 samples, 31.42%)</title><rect x="62.3990%" y="757" width="31.4156%" height="15" fill="rgb(221,193,43)" fg:x="33059" fg:w="16644"/><text x="62.6490%" y="767.50">swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop</text></g><g><title>swiftide-bench`.LZero.Output16.x4.Block (360 samples, 0.68%)</title><rect x="93.8165%" y="757" width="0.6795%" height="15" fill="rgb(240,128,52)" fg:x="49704" fg:w="360"/><text x="94.0665%" y="767.50"></text></g><g><title>swiftide-bench`.LZero.ProcessNextColumnLoop16x4 (101 samples, 0.19%)</title><rect x="94.4960%" y="757" width="0.1906%" height="15" fill="rgb(253,114,12)" fg:x="50064" fg:w="101"/><text x="94.7460%" y="767.50"></text></g><g><title>swiftide-bench`.LZero.ProcessRemaining16.x4.Blocks (110 samples, 0.21%)</title><rect x="94.6867%" y="757" width="0.2076%" height="15" fill="rgb(215,223,47)" fg:x="50165" fg:w="110"/><text x="94.9367%" y="767.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (102 samples, 0.19%)</title><rect x="94.8943%" y="757" width="0.1925%" height="15" fill="rgb(248,225,23)" fg:x="50275" fg:w="102"/><text x="95.1443%" y="767.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (29,901 samples, 56.44%)</title><rect x="38.6693%" y="789" width="56.4383%" height="15" fill="rgb(250,108,0)" fg:x="20487" fg:w="29901"/><text x="38.9193%" y="799.50">swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, u..</text></g><g><title>swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (29,901 samples, 56.44%)</title><rect x="38.6693%" y="773" width="56.4383%" height="15" fill="rgb(228,208,7)" fg:x="20487" fg:w="29901"/><text x="38.9193%" y="783.50">swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long,..</text></g><g><title>swiftide-bench`MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long) (6 samples, 0.01%)</title><rect x="95.0963%" y="757" width="0.0113%" height="15" fill="rgb(244,45,10)" fg:x="50382" fg:w="6"/><text x="95.3463%" y="767.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (34,184 samples, 64.52%)</title><rect x="32.9804%" y="805" width="64.5225%" height="15" fill="rgb(207,125,25)" fg:x="17473" fg:w="34184"/><text x="33.2304%" y="815.50">swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, s..</text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&amp;&amp;, long)::&apos;lambda&apos;(long)::operator() (1,269 samples, 2.40%)</title><rect x="95.1076%" y="789" width="2.3952%" height="15" fill="rgb(210,195,18)" fg:x="50388" fg:w="1269"/><text x="95.3576%" y="799.50">sw..</text></g><g><title>swiftide-bench`MlasErfKernel (974 samples, 1.84%)</title><rect x="95.6644%" y="773" width="1.8384%" height="15" fill="rgb(249,80,12)" fg:x="50683" fg:w="974"/><text x="95.9144%" y="783.50">s..</text></g><g><title>swiftide-bench`onnxruntime::(anonymous namespace)::PosixThread::ThreadMain (47,742 samples, 90.11%)</title><rect x="7.8898%" y="885" width="90.1133%" height="15" fill="rgb(221,65,9)" fg:x="4180" fg:w="47742"/><text x="8.1398%" y="895.50">swiftide-bench`onnxruntime::(anonymous namespace)::PosixThread::ThreadMain</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop (47,742 samples, 90.11%)</title><rect x="7.8898%" y="869" width="90.1133%" height="15" fill="rgb(235,49,36)" fg:x="4180" fg:w="47742"/><text x="8.1398%" y="879.50">swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop (47,741 samples, 90.11%)</title><rect x="7.8917%" y="853" width="90.1114%" height="15" fill="rgb(225,32,20)" fg:x="4181" fg:w="47741"/><text x="8.1417%" y="863.50">swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;(), std::__1::allocator&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;()&gt;, void ()&gt;::operator() (39,221 samples, 74.03%)</title><rect x="23.9732%" y="837" width="74.0298%" height="15" fill="rgb(215,141,46)" fg:x="12701" fg:w="39221"/><text x="24.2232%" y="847.50">swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferre..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (39,220 samples, 74.03%)</title><rect x="23.9751%" y="821" width="74.0279%" height="15" fill="rgb(250,160,47)" fg:x="12702" fg:w="39220"/><text x="24.2251%" y="831.50">swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long,..</text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;)::&apos;lambda0&apos;(long, long)::operator() (265 samples, 0.50%)</title><rect x="97.5028%" y="805" width="0.5002%" height="15" fill="rgb(216,222,40)" fg:x="51657" fg:w="265"/><text x="97.7528%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (10 samples, 0.02%)</title><rect x="98.0049%" y="805" width="0.0189%" height="15" fill="rgb(234,217,39)" fg:x="51923" fg:w="10"/><text x="98.2549%" y="815.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.0257%" y="645" width="0.0132%" height="15" fill="rgb(207,178,40)" fg:x="51934" fg:w="7"/><text x="98.2757%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (8 samples, 0.02%)</title><rect x="98.0257%" y="677" width="0.0151%" height="15" fill="rgb(221,136,13)" fg:x="51934" fg:w="8"/><text x="98.2757%" y="687.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (8 samples, 0.02%)</title><rect x="98.0257%" y="661" width="0.0151%" height="15" fill="rgb(249,199,10)" fg:x="51934" fg:w="8"/><text x="98.2757%" y="671.50"></text></g><g><title>swiftide-bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="98.0502%" y="629" width="0.0113%" height="15" fill="rgb(249,222,13)" fg:x="51947" fg:w="6"/><text x="98.3002%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::nfd (7 samples, 0.01%)</title><rect x="98.0502%" y="677" width="0.0132%" height="15" fill="rgb(244,185,38)" fg:x="51947" fg:w="7"/><text x="98.3002%" y="687.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="98.0502%" y="661" width="0.0132%" height="15" fill="rgb(236,202,9)" fg:x="51947" fg:w="7"/><text x="98.3002%" y="671.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.0502%" y="645" width="0.0132%" height="15" fill="rgb(250,229,37)" fg:x="51947" fg:w="7"/><text x="98.3002%" y="655.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.02%)</title><rect x="98.0653%" y="645" width="0.0170%" height="15" fill="rgb(206,174,23)" fg:x="51955" fg:w="9"/><text x="98.3153%" y="655.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (7 samples, 0.01%)</title><rect x="98.0691%" y="629" width="0.0132%" height="15" fill="rgb(211,33,43)" fg:x="51957" fg:w="7"/><text x="98.3191%" y="639.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (7 samples, 0.01%)</title><rect x="98.0691%" y="613" width="0.0132%" height="15" fill="rgb(245,58,50)" fg:x="51957" fg:w="7"/><text x="98.3191%" y="623.50"></text></g><g><title>swiftide-bench`tracing_core::dispatcher::get_default (7 samples, 0.01%)</title><rect x="98.0691%" y="597" width="0.0132%" height="15" fill="rgb(244,68,36)" fg:x="51957" fg:w="7"/><text x="98.3191%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (11 samples, 0.02%)</title><rect x="98.0634%" y="677" width="0.0208%" height="15" fill="rgb(232,229,15)" fg:x="51954" fg:w="11"/><text x="98.3134%" y="687.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (11 samples, 0.02%)</title><rect x="98.0634%" y="661" width="0.0208%" height="15" fill="rgb(254,30,23)" fg:x="51954" fg:w="11"/><text x="98.3134%" y="671.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (32 samples, 0.06%)</title><rect x="98.0257%" y="709" width="0.0604%" height="15" fill="rgb(235,160,14)" fg:x="51934" fg:w="32"/><text x="98.2757%" y="719.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (32 samples, 0.06%)</title><rect x="98.0257%" y="693" width="0.0604%" height="15" fill="rgb(212,155,44)" fg:x="51934" fg:w="32"/><text x="98.2757%" y="703.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (40 samples, 0.08%)</title><rect x="98.0238%" y="741" width="0.0755%" height="15" fill="rgb(226,2,50)" fg:x="51933" fg:w="40"/><text x="98.2738%" y="751.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (40 samples, 0.08%)</title><rect x="98.0238%" y="725" width="0.0755%" height="15" fill="rgb(234,177,6)" fg:x="51933" fg:w="40"/><text x="98.2738%" y="735.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41 samples, 0.08%)</title><rect x="98.0238%" y="773" width="0.0774%" height="15" fill="rgb(217,24,9)" fg:x="51933" fg:w="41"/><text x="98.2738%" y="783.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (41 samples, 0.08%)</title><rect x="98.0238%" y="757" width="0.0774%" height="15" fill="rgb(220,13,46)" fg:x="51933" fg:w="41"/><text x="98.2738%" y="767.50"></text></g><g><title>swiftide-bench`tracing_core::dispatcher::get_default (8 samples, 0.02%)</title><rect x="98.1351%" y="533" width="0.0151%" height="15" fill="rgb(239,221,27)" fg:x="51992" fg:w="8"/><text x="98.3851%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.04%)</title><rect x="98.1163%" y="581" width="0.0378%" height="15" fill="rgb(222,198,25)" fg:x="51982" fg:w="20"/><text x="98.3663%" y="591.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (18 samples, 0.03%)</title><rect x="98.1200%" y="565" width="0.0340%" height="15" fill="rgb(211,99,13)" fg:x="51984" fg:w="18"/><text x="98.3700%" y="575.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (13 samples, 0.02%)</title><rect x="98.1295%" y="549" width="0.0245%" height="15" fill="rgb(232,111,31)" fg:x="51989" fg:w="13"/><text x="98.3795%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (24 samples, 0.05%)</title><rect x="98.1106%" y="629" width="0.0453%" height="15" fill="rgb(245,82,37)" fg:x="51979" fg:w="24"/><text x="98.3606%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (23 samples, 0.04%)</title><rect x="98.1125%" y="613" width="0.0434%" height="15" fill="rgb(227,149,46)" fg:x="51980" fg:w="23"/><text x="98.3625%" y="623.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (23 samples, 0.04%)</title><rect x="98.1125%" y="597" width="0.0434%" height="15" fill="rgb(218,36,50)" fg:x="51980" fg:w="23"/><text x="98.3625%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::lowercase (9 samples, 0.02%)</title><rect x="98.1559%" y="629" width="0.0170%" height="15" fill="rgb(226,80,48)" fg:x="52003" fg:w="9"/><text x="98.4059%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (9 samples, 0.02%)</title><rect x="98.1559%" y="613" width="0.0170%" height="15" fill="rgb(238,224,15)" fg:x="52003" fg:w="9"/><text x="98.4059%" y="623.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9 samples, 0.02%)</title><rect x="98.1559%" y="597" width="0.0170%" height="15" fill="rgb(241,136,10)" fg:x="52003" fg:w="9"/><text x="98.4059%" y="607.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="98.1597%" y="581" width="0.0132%" height="15" fill="rgb(208,32,45)" fg:x="52005" fg:w="7"/><text x="98.4097%" y="591.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="98.1616%" y="565" width="0.0113%" height="15" fill="rgb(207,135,9)" fg:x="52006" fg:w="6"/><text x="98.4116%" y="575.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="98.1616%" y="549" width="0.0113%" height="15" fill="rgb(206,86,44)" fg:x="52006" fg:w="6"/><text x="98.4116%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::nfd (10 samples, 0.02%)</title><rect x="98.1729%" y="629" width="0.0189%" height="15" fill="rgb(245,177,15)" fg:x="52012" fg:w="10"/><text x="98.4229%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (10 samples, 0.02%)</title><rect x="98.1729%" y="613" width="0.0189%" height="15" fill="rgb(206,64,50)" fg:x="52012" fg:w="10"/><text x="98.4229%" y="623.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="98.1729%" y="597" width="0.0189%" height="15" fill="rgb(234,36,40)" fg:x="52012" fg:w="10"/><text x="98.4229%" y="607.50"></text></g><g><title>swiftide-bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.02%)</title><rect x="98.1748%" y="581" width="0.0170%" height="15" fill="rgb(213,64,8)" fg:x="52013" fg:w="9"/><text x="98.4248%" y="591.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (8 samples, 0.02%)</title><rect x="98.1767%" y="565" width="0.0151%" height="15" fill="rgb(210,75,36)" fg:x="52014" fg:w="8"/><text x="98.4267%" y="575.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="98.1804%" y="549" width="0.0113%" height="15" fill="rgb(229,88,21)" fg:x="52016" fg:w="6"/><text x="98.4304%" y="559.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (18 samples, 0.03%)</title><rect x="98.2106%" y="565" width="0.0340%" height="15" fill="rgb(252,204,47)" fg:x="52032" fg:w="18"/><text x="98.4606%" y="575.50"></text></g><g><title>swiftide-bench`tracing_core::dispatcher::get_default (16 samples, 0.03%)</title><rect x="98.2144%" y="549" width="0.0302%" height="15" fill="rgb(208,77,27)" fg:x="52034" fg:w="16"/><text x="98.4644%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.04%)</title><rect x="98.2050%" y="597" width="0.0415%" height="15" fill="rgb(221,76,26)" fg:x="52029" fg:w="22"/><text x="98.4550%" y="607.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (20 samples, 0.04%)</title><rect x="98.2088%" y="581" width="0.0378%" height="15" fill="rgb(225,139,18)" fg:x="52031" fg:w="20"/><text x="98.4588%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (30 samples, 0.06%)</title><rect x="98.1918%" y="629" width="0.0566%" height="15" fill="rgb(230,137,11)" fg:x="52022" fg:w="30"/><text x="98.4418%" y="639.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (29 samples, 0.05%)</title><rect x="98.1937%" y="613" width="0.0547%" height="15" fill="rgb(212,28,1)" fg:x="52023" fg:w="29"/><text x="98.4437%" y="623.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (74 samples, 0.14%)</title><rect x="98.1106%" y="645" width="0.1397%" height="15" fill="rgb(248,164,17)" fg:x="51979" fg:w="74"/><text x="98.3606%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (76 samples, 0.14%)</title><rect x="98.1106%" y="661" width="0.1435%" height="15" fill="rgb(222,171,42)" fg:x="51979" fg:w="76"/><text x="98.3606%" y="671.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (9 samples, 0.02%)</title><rect x="98.2597%" y="661" width="0.0170%" height="15" fill="rgb(243,84,45)" fg:x="52058" fg:w="9"/><text x="98.5097%" y="671.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::split (7 samples, 0.01%)</title><rect x="98.2635%" y="645" width="0.0132%" height="15" fill="rgb(252,49,23)" fg:x="52060" fg:w="7"/><text x="98.5135%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (96 samples, 0.18%)</title><rect x="98.1031%" y="693" width="0.1812%" height="15" fill="rgb(215,19,7)" fg:x="51975" fg:w="96"/><text x="98.3531%" y="703.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (96 samples, 0.18%)</title><rect x="98.1031%" y="677" width="0.1812%" height="15" fill="rgb(238,81,41)" fg:x="51975" fg:w="96"/><text x="98.3531%" y="687.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (101 samples, 0.19%)</title><rect x="98.1012%" y="725" width="0.1906%" height="15" fill="rgb(210,199,37)" fg:x="51974" fg:w="101"/><text x="98.3512%" y="735.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (101 samples, 0.19%)</title><rect x="98.1012%" y="709" width="0.1906%" height="15" fill="rgb(244,192,49)" fg:x="51974" fg:w="101"/><text x="98.3512%" y="719.50"></text></g><g><title>swiftide-bench`tracing_core::dispatcher::get_default (6 samples, 0.01%)</title><rect x="98.3050%" y="485" width="0.0113%" height="15" fill="rgb(226,211,11)" fg:x="52082" fg:w="6"/><text x="98.5550%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (13 samples, 0.02%)</title><rect x="98.2937%" y="581" width="0.0245%" height="15" fill="rgb(236,162,54)" fg:x="52076" fg:w="13"/><text x="98.5437%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (12 samples, 0.02%)</title><rect x="98.2956%" y="565" width="0.0227%" height="15" fill="rgb(220,229,9)" fg:x="52077" fg:w="12"/><text x="98.5456%" y="575.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="98.2956%" y="549" width="0.0227%" height="15" fill="rgb(250,87,22)" fg:x="52077" fg:w="12"/><text x="98.5456%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.02%)</title><rect x="98.2956%" y="533" width="0.0227%" height="15" fill="rgb(239,43,17)" fg:x="52077" fg:w="12"/><text x="98.5456%" y="543.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (10 samples, 0.02%)</title><rect x="98.2994%" y="517" width="0.0189%" height="15" fill="rgb(231,177,25)" fg:x="52079" fg:w="10"/><text x="98.5494%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (8 samples, 0.02%)</title><rect x="98.3031%" y="501" width="0.0151%" height="15" fill="rgb(219,179,1)" fg:x="52081" fg:w="8"/><text x="98.5531%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="98.3352%" y="581" width="0.0132%" height="15" fill="rgb(238,219,53)" fg:x="52098" fg:w="7"/><text x="98.5852%" y="591.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.3352%" y="565" width="0.0132%" height="15" fill="rgb(232,167,36)" fg:x="52098" fg:w="7"/><text x="98.5852%" y="575.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="98.3371%" y="549" width="0.0113%" height="15" fill="rgb(244,19,51)" fg:x="52099" fg:w="6"/><text x="98.5871%" y="559.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="98.3371%" y="533" width="0.0113%" height="15" fill="rgb(224,6,22)" fg:x="52099" fg:w="6"/><text x="98.5871%" y="543.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="98.3371%" y="517" width="0.0113%" height="15" fill="rgb(224,145,5)" fg:x="52099" fg:w="6"/><text x="98.5871%" y="527.50"></text></g><g><title>swiftide-bench`tracing_core::dispatcher::get_default (6 samples, 0.01%)</title><rect x="98.3371%" y="501" width="0.0113%" height="15" fill="rgb(234,130,49)" fg:x="52099" fg:w="6"/><text x="98.5871%" y="511.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (31 samples, 0.06%)</title><rect x="98.2937%" y="597" width="0.0585%" height="15" fill="rgb(254,6,2)" fg:x="52076" fg:w="31"/><text x="98.5437%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (32 samples, 0.06%)</title><rect x="98.2937%" y="613" width="0.0604%" height="15" fill="rgb(208,96,46)" fg:x="52076" fg:w="32"/><text x="98.5437%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (39 samples, 0.07%)</title><rect x="98.2918%" y="645" width="0.0736%" height="15" fill="rgb(239,3,39)" fg:x="52075" fg:w="39"/><text x="98.5418%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (39 samples, 0.07%)</title><rect x="98.2918%" y="629" width="0.0736%" height="15" fill="rgb(233,210,1)" fg:x="52075" fg:w="39"/><text x="98.5418%" y="639.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41 samples, 0.08%)</title><rect x="98.2918%" y="677" width="0.0774%" height="15" fill="rgb(244,137,37)" fg:x="52075" fg:w="41"/><text x="98.5418%" y="687.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (41 samples, 0.08%)</title><rect x="98.2918%" y="661" width="0.0774%" height="15" fill="rgb(240,136,2)" fg:x="52075" fg:w="41"/><text x="98.5418%" y="671.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="98.3767%" y="533" width="0.0113%" height="15" fill="rgb(239,18,37)" fg:x="52120" fg:w="6"/><text x="98.6267%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (11 samples, 0.02%)</title><rect x="98.3692%" y="565" width="0.0208%" height="15" fill="rgb(218,185,22)" fg:x="52116" fg:w="11"/><text x="98.6192%" y="575.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (11 samples, 0.02%)</title><rect x="98.3692%" y="549" width="0.0208%" height="15" fill="rgb(225,218,4)" fg:x="52116" fg:w="11"/><text x="98.6192%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (15 samples, 0.03%)</title><rect x="98.3692%" y="597" width="0.0283%" height="15" fill="rgb(230,182,32)" fg:x="52116" fg:w="15"/><text x="98.6192%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (15 samples, 0.03%)</title><rect x="98.3692%" y="581" width="0.0283%" height="15" fill="rgb(242,56,43)" fg:x="52116" fg:w="15"/><text x="98.6192%" y="591.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 0.03%)</title><rect x="98.3692%" y="629" width="0.0302%" height="15" fill="rgb(233,99,24)" fg:x="52116" fg:w="16"/><text x="98.6192%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (16 samples, 0.03%)</title><rect x="98.3692%" y="613" width="0.0302%" height="15" fill="rgb(234,209,42)" fg:x="52116" fg:w="16"/><text x="98.6192%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (11 samples, 0.02%)</title><rect x="98.3994%" y="517" width="0.0208%" height="15" fill="rgb(227,7,12)" fg:x="52132" fg:w="11"/><text x="98.6494%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (11 samples, 0.02%)</title><rect x="98.3994%" y="501" width="0.0208%" height="15" fill="rgb(245,203,43)" fg:x="52132" fg:w="11"/><text x="98.6494%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.03%)</title><rect x="98.3994%" y="581" width="0.0264%" height="15" fill="rgb(238,205,33)" fg:x="52132" fg:w="14"/><text x="98.6494%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (14 samples, 0.03%)</title><rect x="98.3994%" y="565" width="0.0264%" height="15" fill="rgb(231,56,7)" fg:x="52132" fg:w="14"/><text x="98.6494%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (14 samples, 0.03%)</title><rect x="98.3994%" y="549" width="0.0264%" height="15" fill="rgb(244,186,29)" fg:x="52132" fg:w="14"/><text x="98.6494%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (14 samples, 0.03%)</title><rect x="98.3994%" y="533" width="0.0264%" height="15" fill="rgb(234,111,31)" fg:x="52132" fg:w="14"/><text x="98.6494%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="98.4277%" y="437" width="0.0132%" height="15" fill="rgb(241,149,10)" fg:x="52147" fg:w="7"/><text x="98.6777%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="98.4277%" y="421" width="0.0132%" height="15" fill="rgb(249,206,44)" fg:x="52147" fg:w="7"/><text x="98.6777%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.4277%" y="405" width="0.0132%" height="15" fill="rgb(251,153,30)" fg:x="52147" fg:w="7"/><text x="98.6777%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (13 samples, 0.02%)</title><rect x="98.4277%" y="469" width="0.0245%" height="15" fill="rgb(239,152,38)" fg:x="52147" fg:w="13"/><text x="98.6777%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (13 samples, 0.02%)</title><rect x="98.4277%" y="453" width="0.0245%" height="15" fill="rgb(249,139,47)" fg:x="52147" fg:w="13"/><text x="98.6777%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (16 samples, 0.03%)</title><rect x="98.4258%" y="549" width="0.0302%" height="15" fill="rgb(244,64,35)" fg:x="52146" fg:w="16"/><text x="98.6758%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 0.03%)</title><rect x="98.4258%" y="533" width="0.0302%" height="15" fill="rgb(216,46,15)" fg:x="52146" fg:w="16"/><text x="98.6758%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (16 samples, 0.03%)</title><rect x="98.4258%" y="517" width="0.0302%" height="15" fill="rgb(250,74,19)" fg:x="52146" fg:w="16"/><text x="98.6758%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (16 samples, 0.03%)</title><rect x="98.4258%" y="501" width="0.0302%" height="15" fill="rgb(249,42,33)" fg:x="52146" fg:w="16"/><text x="98.6758%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (16 samples, 0.03%)</title><rect x="98.4258%" y="485" width="0.0302%" height="15" fill="rgb(242,149,17)" fg:x="52146" fg:w="16"/><text x="98.6758%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (6 samples, 0.01%)</title><rect x="98.4560%" y="453" width="0.0113%" height="15" fill="rgb(244,29,21)" fg:x="52162" fg:w="6"/><text x="98.7060%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="98.4560%" y="437" width="0.0113%" height="15" fill="rgb(220,130,37)" fg:x="52162" fg:w="6"/><text x="98.7060%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (39 samples, 0.07%)</title><rect x="98.3994%" y="597" width="0.0736%" height="15" fill="rgb(211,67,2)" fg:x="52132" fg:w="39"/><text x="98.6494%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (25 samples, 0.05%)</title><rect x="98.4258%" y="581" width="0.0472%" height="15" fill="rgb(235,68,52)" fg:x="52146" fg:w="25"/><text x="98.6758%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (25 samples, 0.05%)</title><rect x="98.4258%" y="565" width="0.0472%" height="15" fill="rgb(246,142,3)" fg:x="52146" fg:w="25"/><text x="98.6758%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (9 samples, 0.02%)</title><rect x="98.4560%" y="549" width="0.0170%" height="15" fill="rgb(241,25,7)" fg:x="52162" fg:w="9"/><text x="98.7060%" y="559.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="98.4560%" y="533" width="0.0170%" height="15" fill="rgb(242,119,39)" fg:x="52162" fg:w="9"/><text x="98.7060%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.02%)</title><rect x="98.4560%" y="517" width="0.0170%" height="15" fill="rgb(241,98,45)" fg:x="52162" fg:w="9"/><text x="98.7060%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (9 samples, 0.02%)</title><rect x="98.4560%" y="501" width="0.0170%" height="15" fill="rgb(254,28,30)" fg:x="52162" fg:w="9"/><text x="98.7060%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (9 samples, 0.02%)</title><rect x="98.4560%" y="485" width="0.0170%" height="15" fill="rgb(241,142,54)" fg:x="52162" fg:w="9"/><text x="98.7060%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (9 samples, 0.02%)</title><rect x="98.4560%" y="469" width="0.0170%" height="15" fill="rgb(222,85,15)" fg:x="52162" fg:w="9"/><text x="98.7060%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="98.4768%" y="421" width="0.0132%" height="15" fill="rgb(210,85,47)" fg:x="52173" fg:w="7"/><text x="98.7268%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="98.4768%" y="405" width="0.0132%" height="15" fill="rgb(224,206,25)" fg:x="52173" fg:w="7"/><text x="98.7268%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="98.4787%" y="389" width="0.0113%" height="15" fill="rgb(243,201,19)" fg:x="52174" fg:w="6"/><text x="98.7287%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (25 samples, 0.05%)</title><rect x="98.4768%" y="453" width="0.0472%" height="15" fill="rgb(236,59,4)" fg:x="52173" fg:w="25"/><text x="98.7268%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (25 samples, 0.05%)</title><rect x="98.4768%" y="437" width="0.0472%" height="15" fill="rgb(254,179,45)" fg:x="52173" fg:w="25"/><text x="98.7268%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (11 samples, 0.02%)</title><rect x="98.5032%" y="421" width="0.0208%" height="15" fill="rgb(226,14,10)" fg:x="52187" fg:w="11"/><text x="98.7532%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (11 samples, 0.02%)</title><rect x="98.5032%" y="405" width="0.0208%" height="15" fill="rgb(244,27,41)" fg:x="52187" fg:w="11"/><text x="98.7532%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.02%)</title><rect x="98.5051%" y="389" width="0.0189%" height="15" fill="rgb(235,35,32)" fg:x="52188" fg:w="10"/><text x="98.7551%" y="399.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (10 samples, 0.02%)</title><rect x="98.5051%" y="373" width="0.0189%" height="15" fill="rgb(218,68,31)" fg:x="52188" fg:w="10"/><text x="98.7551%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (31 samples, 0.06%)</title><rect x="98.4749%" y="485" width="0.0585%" height="15" fill="rgb(207,120,37)" fg:x="52172" fg:w="31"/><text x="98.7249%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (31 samples, 0.06%)</title><rect x="98.4749%" y="469" width="0.0585%" height="15" fill="rgb(227,98,0)" fg:x="52172" fg:w="31"/><text x="98.7249%" y="479.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (34 samples, 0.06%)</title><rect x="98.4730%" y="533" width="0.0642%" height="15" fill="rgb(207,7,3)" fg:x="52171" fg:w="34"/><text x="98.7230%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (34 samples, 0.06%)</title><rect x="98.4730%" y="517" width="0.0642%" height="15" fill="rgb(206,98,19)" fg:x="52171" fg:w="34"/><text x="98.7230%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (34 samples, 0.06%)</title><rect x="98.4730%" y="501" width="0.0642%" height="15" fill="rgb(217,5,26)" fg:x="52171" fg:w="34"/><text x="98.7230%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="98.5428%" y="405" width="0.0113%" height="15" fill="rgb(235,190,38)" fg:x="52208" fg:w="6"/><text x="98.7928%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="98.5428%" y="389" width="0.0113%" height="15" fill="rgb(247,86,24)" fg:x="52208" fg:w="6"/><text x="98.7928%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="98.5428%" y="373" width="0.0113%" height="15" fill="rgb(205,101,16)" fg:x="52208" fg:w="6"/><text x="98.7928%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (23 samples, 0.04%)</title><rect x="98.5410%" y="437" width="0.0434%" height="15" fill="rgb(246,168,33)" fg:x="52207" fg:w="23"/><text x="98.7910%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (23 samples, 0.04%)</title><rect x="98.5410%" y="421" width="0.0434%" height="15" fill="rgb(231,114,1)" fg:x="52207" fg:w="23"/><text x="98.7910%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (8 samples, 0.02%)</title><rect x="98.5693%" y="405" width="0.0151%" height="15" fill="rgb(207,184,53)" fg:x="52222" fg:w="8"/><text x="98.8193%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.5712%" y="389" width="0.0132%" height="15" fill="rgb(224,95,51)" fg:x="52223" fg:w="7"/><text x="98.8212%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="98.5730%" y="373" width="0.0113%" height="15" fill="rgb(212,188,45)" fg:x="52224" fg:w="6"/><text x="98.8230%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (33 samples, 0.06%)</title><rect x="98.5372%" y="469" width="0.0623%" height="15" fill="rgb(223,154,38)" fg:x="52205" fg:w="33"/><text x="98.7872%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (33 samples, 0.06%)</title><rect x="98.5372%" y="453" width="0.0623%" height="15" fill="rgb(251,22,52)" fg:x="52205" fg:w="33"/><text x="98.7872%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (6 samples, 0.01%)</title><rect x="98.5881%" y="437" width="0.0113%" height="15" fill="rgb(229,209,22)" fg:x="52232" fg:w="6"/><text x="98.8381%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (123 samples, 0.23%)</title><rect x="98.3692%" y="645" width="0.2322%" height="15" fill="rgb(234,138,34)" fg:x="52116" fg:w="123"/><text x="98.6192%" y="655.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (107 samples, 0.20%)</title><rect x="98.3994%" y="629" width="0.2020%" height="15" fill="rgb(212,95,11)" fg:x="52132" fg:w="107"/><text x="98.6494%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (107 samples, 0.20%)</title><rect x="98.3994%" y="613" width="0.2020%" height="15" fill="rgb(240,179,47)" fg:x="52132" fg:w="107"/><text x="98.6494%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (68 samples, 0.13%)</title><rect x="98.4730%" y="597" width="0.1284%" height="15" fill="rgb(240,163,11)" fg:x="52171" fg:w="68"/><text x="98.7230%" y="607.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (68 samples, 0.13%)</title><rect x="98.4730%" y="581" width="0.1284%" height="15" fill="rgb(236,37,12)" fg:x="52171" fg:w="68"/><text x="98.7230%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (68 samples, 0.13%)</title><rect x="98.4730%" y="565" width="0.1284%" height="15" fill="rgb(232,164,16)" fg:x="52171" fg:w="68"/><text x="98.7230%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (68 samples, 0.13%)</title><rect x="98.4730%" y="549" width="0.1284%" height="15" fill="rgb(244,205,15)" fg:x="52171" fg:w="68"/><text x="98.7230%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (34 samples, 0.06%)</title><rect x="98.5372%" y="533" width="0.0642%" height="15" fill="rgb(223,117,47)" fg:x="52205" fg:w="34"/><text x="98.7872%" y="543.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (34 samples, 0.06%)</title><rect x="98.5372%" y="517" width="0.0642%" height="15" fill="rgb(244,107,35)" fg:x="52205" fg:w="34"/><text x="98.7872%" y="527.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (34 samples, 0.06%)</title><rect x="98.5372%" y="501" width="0.0642%" height="15" fill="rgb(205,140,8)" fg:x="52205" fg:w="34"/><text x="98.7872%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (34 samples, 0.06%)</title><rect x="98.5372%" y="485" width="0.0642%" height="15" fill="rgb(228,84,46)" fg:x="52205" fg:w="34"/><text x="98.7872%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="98.6032%" y="469" width="0.0132%" height="15" fill="rgb(254,188,9)" fg:x="52240" fg:w="7"/><text x="98.8532%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="98.6032%" y="453" width="0.0132%" height="15" fill="rgb(206,112,54)" fg:x="52240" fg:w="7"/><text x="98.8532%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.6032%" y="437" width="0.0132%" height="15" fill="rgb(216,84,49)" fg:x="52240" fg:w="7"/><text x="98.8532%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="98.6032%" y="421" width="0.0132%" height="15" fill="rgb(214,194,35)" fg:x="52240" fg:w="7"/><text x="98.8532%" y="431.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="98.6051%" y="405" width="0.0113%" height="15" fill="rgb(249,28,3)" fg:x="52241" fg:w="6"/><text x="98.8551%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (21 samples, 0.04%)</title><rect x="98.6032%" y="501" width="0.0396%" height="15" fill="rgb(222,56,52)" fg:x="52240" fg:w="21"/><text x="98.8532%" y="511.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (21 samples, 0.04%)</title><rect x="98.6032%" y="485" width="0.0396%" height="15" fill="rgb(245,217,50)" fg:x="52240" fg:w="21"/><text x="98.8532%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="98.6297%" y="469" width="0.0132%" height="15" fill="rgb(213,201,24)" fg:x="52254" fg:w="7"/><text x="98.8797%" y="479.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.6297%" y="453" width="0.0132%" height="15" fill="rgb(248,116,28)" fg:x="52254" fg:w="7"/><text x="98.8797%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (27 samples, 0.05%)</title><rect x="98.6014%" y="533" width="0.0510%" height="15" fill="rgb(219,72,43)" fg:x="52239" fg:w="27"/><text x="98.8514%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (27 samples, 0.05%)</title><rect x="98.6014%" y="517" width="0.0510%" height="15" fill="rgb(209,138,14)" fg:x="52239" fg:w="27"/><text x="98.8514%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (28 samples, 0.05%)</title><rect x="98.6014%" y="581" width="0.0529%" height="15" fill="rgb(222,18,33)" fg:x="52239" fg:w="28"/><text x="98.8514%" y="591.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (28 samples, 0.05%)</title><rect x="98.6014%" y="565" width="0.0529%" height="15" fill="rgb(213,199,7)" fg:x="52239" fg:w="28"/><text x="98.8514%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (28 samples, 0.05%)</title><rect x="98.6014%" y="549" width="0.0529%" height="15" fill="rgb(250,110,10)" fg:x="52239" fg:w="28"/><text x="98.8514%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (30 samples, 0.06%)</title><rect x="98.6014%" y="645" width="0.0566%" height="15" fill="rgb(248,123,6)" fg:x="52239" fg:w="30"/><text x="98.8514%" y="655.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (30 samples, 0.06%)</title><rect x="98.6014%" y="629" width="0.0566%" height="15" fill="rgb(206,91,31)" fg:x="52239" fg:w="30"/><text x="98.8514%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (30 samples, 0.06%)</title><rect x="98.6014%" y="613" width="0.0566%" height="15" fill="rgb(211,154,13)" fg:x="52239" fg:w="30"/><text x="98.8514%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (30 samples, 0.06%)</title><rect x="98.6014%" y="597" width="0.0566%" height="15" fill="rgb(225,148,7)" fg:x="52239" fg:w="30"/><text x="98.8514%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="98.6618%" y="405" width="0.0113%" height="15" fill="rgb(220,160,43)" fg:x="52271" fg:w="6"/><text x="98.9118%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="98.6618%" y="389" width="0.0113%" height="15" fill="rgb(213,52,39)" fg:x="52271" fg:w="6"/><text x="98.9118%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="98.6618%" y="373" width="0.0113%" height="15" fill="rgb(243,137,7)" fg:x="52271" fg:w="6"/><text x="98.9118%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (14 samples, 0.03%)</title><rect x="98.6618%" y="437" width="0.0264%" height="15" fill="rgb(230,79,13)" fg:x="52271" fg:w="14"/><text x="98.9118%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (14 samples, 0.03%)</title><rect x="98.6618%" y="421" width="0.0264%" height="15" fill="rgb(247,105,23)" fg:x="52271" fg:w="14"/><text x="98.9118%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (17 samples, 0.03%)</title><rect x="98.6618%" y="469" width="0.0321%" height="15" fill="rgb(223,179,41)" fg:x="52271" fg:w="17"/><text x="98.9118%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (17 samples, 0.03%)</title><rect x="98.6618%" y="453" width="0.0321%" height="15" fill="rgb(218,9,34)" fg:x="52271" fg:w="17"/><text x="98.9118%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.03%)</title><rect x="98.6618%" y="501" width="0.0340%" height="15" fill="rgb(222,106,8)" fg:x="52271" fg:w="18"/><text x="98.9118%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (18 samples, 0.03%)</title><rect x="98.6618%" y="485" width="0.0340%" height="15" fill="rgb(211,220,0)" fg:x="52271" fg:w="18"/><text x="98.9118%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (10 samples, 0.02%)</title><rect x="98.6976%" y="389" width="0.0189%" height="15" fill="rgb(229,52,16)" fg:x="52290" fg:w="10"/><text x="98.9476%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (10 samples, 0.02%)</title><rect x="98.6976%" y="373" width="0.0189%" height="15" fill="rgb(212,155,18)" fg:x="52290" fg:w="10"/><text x="98.9476%" y="383.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (15 samples, 0.03%)</title><rect x="98.6957%" y="469" width="0.0283%" height="15" fill="rgb(242,21,14)" fg:x="52289" fg:w="15"/><text x="98.9457%" y="479.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.03%)</title><rect x="98.6957%" y="453" width="0.0283%" height="15" fill="rgb(222,19,48)" fg:x="52289" fg:w="15"/><text x="98.9457%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (15 samples, 0.03%)</title><rect x="98.6957%" y="437" width="0.0283%" height="15" fill="rgb(232,45,27)" fg:x="52289" fg:w="15"/><text x="98.9457%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (15 samples, 0.03%)</title><rect x="98.6957%" y="421" width="0.0283%" height="15" fill="rgb(249,103,42)" fg:x="52289" fg:w="15"/><text x="98.9457%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (15 samples, 0.03%)</title><rect x="98.6957%" y="405" width="0.0283%" height="15" fill="rgb(246,81,33)" fg:x="52289" fg:w="15"/><text x="98.9457%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (6 samples, 0.01%)</title><rect x="98.7373%" y="197" width="0.0113%" height="15" fill="rgb(252,33,42)" fg:x="52311" fg:w="6"/><text x="98.9873%" y="207.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="98.7373%" y="181" width="0.0113%" height="15" fill="rgb(209,212,41)" fg:x="52311" fg:w="6"/><text x="98.9873%" y="191.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.02%)</title><rect x="98.7373%" y="277" width="0.0151%" height="15" fill="rgb(207,154,6)" fg:x="52311" fg:w="8"/><text x="98.9873%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="98.7373%" y="261" width="0.0151%" height="15" fill="rgb(223,64,47)" fg:x="52311" fg:w="8"/><text x="98.9873%" y="271.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (8 samples, 0.02%)</title><rect x="98.7373%" y="245" width="0.0151%" height="15" fill="rgb(211,161,38)" fg:x="52311" fg:w="8"/><text x="98.9873%" y="255.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (8 samples, 0.02%)</title><rect x="98.7373%" y="229" width="0.0151%" height="15" fill="rgb(219,138,40)" fg:x="52311" fg:w="8"/><text x="98.9873%" y="239.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (8 samples, 0.02%)</title><rect x="98.7373%" y="213" width="0.0151%" height="15" fill="rgb(241,228,46)" fg:x="52311" fg:w="8"/><text x="98.9873%" y="223.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (12 samples, 0.02%)</title><rect x="98.7561%" y="53" width="0.0227%" height="15" fill="rgb(223,209,38)" fg:x="52321" fg:w="12"/><text x="99.0061%" y="63.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (12 samples, 0.02%)</title><rect x="98.7561%" y="37" width="0.0227%" height="15" fill="rgb(236,164,45)" fg:x="52321" fg:w="12"/><text x="99.0061%" y="47.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (65 samples, 0.12%)</title><rect x="98.6618%" y="517" width="0.1227%" height="15" fill="rgb(231,15,5)" fg:x="52271" fg:w="65"/><text x="98.9118%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (47 samples, 0.09%)</title><rect x="98.6957%" y="501" width="0.0887%" height="15" fill="rgb(252,35,15)" fg:x="52289" fg:w="47"/><text x="98.9457%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (47 samples, 0.09%)</title><rect x="98.6957%" y="485" width="0.0887%" height="15" fill="rgb(248,181,18)" fg:x="52289" fg:w="47"/><text x="98.9457%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (32 samples, 0.06%)</title><rect x="98.7240%" y="469" width="0.0604%" height="15" fill="rgb(233,39,42)" fg:x="52304" fg:w="32"/><text x="98.9740%" y="479.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (32 samples, 0.06%)</title><rect x="98.7240%" y="453" width="0.0604%" height="15" fill="rgb(238,110,33)" fg:x="52304" fg:w="32"/><text x="98.9740%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (32 samples, 0.06%)</title><rect x="98.7240%" y="437" width="0.0604%" height="15" fill="rgb(233,195,10)" fg:x="52304" fg:w="32"/><text x="98.9740%" y="447.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (32 samples, 0.06%)</title><rect x="98.7240%" y="421" width="0.0604%" height="15" fill="rgb(254,105,3)" fg:x="52304" fg:w="32"/><text x="98.9740%" y="431.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (28 samples, 0.05%)</title><rect x="98.7316%" y="405" width="0.0529%" height="15" fill="rgb(221,225,9)" fg:x="52308" fg:w="28"/><text x="98.9816%" y="415.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (28 samples, 0.05%)</title><rect x="98.7316%" y="389" width="0.0529%" height="15" fill="rgb(224,227,45)" fg:x="52308" fg:w="28"/><text x="98.9816%" y="399.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (28 samples, 0.05%)</title><rect x="98.7316%" y="373" width="0.0529%" height="15" fill="rgb(229,198,43)" fg:x="52308" fg:w="28"/><text x="98.9816%" y="383.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (25 samples, 0.05%)</title><rect x="98.7373%" y="357" width="0.0472%" height="15" fill="rgb(206,209,35)" fg:x="52311" fg:w="25"/><text x="98.9873%" y="367.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (25 samples, 0.05%)</title><rect x="98.7373%" y="341" width="0.0472%" height="15" fill="rgb(245,195,53)" fg:x="52311" fg:w="25"/><text x="98.9873%" y="351.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (25 samples, 0.05%)</title><rect x="98.7373%" y="325" width="0.0472%" height="15" fill="rgb(240,92,26)" fg:x="52311" fg:w="25"/><text x="98.9873%" y="335.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (25 samples, 0.05%)</title><rect x="98.7373%" y="309" width="0.0472%" height="15" fill="rgb(207,40,23)" fg:x="52311" fg:w="25"/><text x="98.9873%" y="319.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (25 samples, 0.05%)</title><rect x="98.7373%" y="293" width="0.0472%" height="15" fill="rgb(223,111,35)" fg:x="52311" fg:w="25"/><text x="98.9873%" y="303.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (17 samples, 0.03%)</title><rect x="98.7524%" y="277" width="0.0321%" height="15" fill="rgb(229,147,28)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="287.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (17 samples, 0.03%)</title><rect x="98.7524%" y="261" width="0.0321%" height="15" fill="rgb(211,29,28)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="271.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 0.03%)</title><rect x="98.7524%" y="245" width="0.0321%" height="15" fill="rgb(228,72,33)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="255.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (17 samples, 0.03%)</title><rect x="98.7524%" y="229" width="0.0321%" height="15" fill="rgb(205,214,31)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="239.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (17 samples, 0.03%)</title><rect x="98.7524%" y="213" width="0.0321%" height="15" fill="rgb(224,111,15)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="223.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 0.03%)</title><rect x="98.7524%" y="197" width="0.0321%" height="15" fill="rgb(253,21,26)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="207.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (17 samples, 0.03%)</title><rect x="98.7524%" y="181" width="0.0321%" height="15" fill="rgb(245,139,43)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="191.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (17 samples, 0.03%)</title><rect x="98.7524%" y="165" width="0.0321%" height="15" fill="rgb(252,170,7)" fg:x="52319" fg:w="17"/><text x="99.0024%" y="175.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (16 samples, 0.03%)</title><rect x="98.7542%" y="149" width="0.0302%" height="15" fill="rgb(231,118,14)" fg:x="52320" fg:w="16"/><text x="99.0042%" y="159.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (16 samples, 0.03%)</title><rect x="98.7542%" y="133" width="0.0302%" height="15" fill="rgb(238,83,0)" fg:x="52320" fg:w="16"/><text x="99.0042%" y="143.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 0.03%)</title><rect x="98.7542%" y="117" width="0.0302%" height="15" fill="rgb(221,39,39)" fg:x="52320" fg:w="16"/><text x="99.0042%" y="127.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (16 samples, 0.03%)</title><rect x="98.7542%" y="101" width="0.0302%" height="15" fill="rgb(222,119,46)" fg:x="52320" fg:w="16"/><text x="99.0042%" y="111.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (16 samples, 0.03%)</title><rect x="98.7542%" y="85" width="0.0302%" height="15" fill="rgb(222,165,49)" fg:x="52320" fg:w="16"/><text x="99.0042%" y="95.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (16 samples, 0.03%)</title><rect x="98.7542%" y="69" width="0.0302%" height="15" fill="rgb(219,113,52)" fg:x="52320" fg:w="16"/><text x="99.0042%" y="79.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (68 samples, 0.13%)</title><rect x="98.6618%" y="565" width="0.1284%" height="15" fill="rgb(214,7,15)" fg:x="52271" fg:w="68"/><text x="98.9118%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (68 samples, 0.13%)</title><rect x="98.6618%" y="549" width="0.1284%" height="15" fill="rgb(235,32,4)" fg:x="52271" fg:w="68"/><text x="98.9118%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (68 samples, 0.13%)</title><rect x="98.6618%" y="533" width="0.1284%" height="15" fill="rgb(238,90,54)" fg:x="52271" fg:w="68"/><text x="98.9118%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (6 samples, 0.01%)</title><rect x="98.7901%" y="373" width="0.0113%" height="15" fill="rgb(213,208,19)" fg:x="52339" fg:w="6"/><text x="99.0401%" y="383.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="98.7901%" y="357" width="0.0113%" height="15" fill="rgb(233,156,4)" fg:x="52339" fg:w="6"/><text x="99.0401%" y="367.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.02%)</title><rect x="98.7901%" y="453" width="0.0151%" height="15" fill="rgb(207,194,5)" fg:x="52339" fg:w="8"/><text x="99.0401%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="98.7901%" y="437" width="0.0151%" height="15" fill="rgb(206,111,30)" fg:x="52339" fg:w="8"/><text x="99.0401%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (8 samples, 0.02%)</title><rect x="98.7901%" y="421" width="0.0151%" height="15" fill="rgb(243,70,54)" fg:x="52339" fg:w="8"/><text x="99.0401%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (8 samples, 0.02%)</title><rect x="98.7901%" y="405" width="0.0151%" height="15" fill="rgb(242,28,8)" fg:x="52339" fg:w="8"/><text x="99.0401%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (8 samples, 0.02%)</title><rect x="98.7901%" y="389" width="0.0151%" height="15" fill="rgb(219,106,18)" fg:x="52339" fg:w="8"/><text x="99.0401%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (9 samples, 0.02%)</title><rect x="98.8090%" y="357" width="0.0170%" height="15" fill="rgb(244,222,10)" fg:x="52349" fg:w="9"/><text x="99.0590%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (9 samples, 0.02%)</title><rect x="98.8090%" y="341" width="0.0170%" height="15" fill="rgb(236,179,52)" fg:x="52349" fg:w="9"/><text x="99.0590%" y="351.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (20 samples, 0.04%)</title><rect x="98.7901%" y="565" width="0.0378%" height="15" fill="rgb(213,23,39)" fg:x="52339" fg:w="20"/><text x="99.0401%" y="575.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.04%)</title><rect x="98.7901%" y="549" width="0.0378%" height="15" fill="rgb(238,48,10)" fg:x="52339" fg:w="20"/><text x="99.0401%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (20 samples, 0.04%)</title><rect x="98.7901%" y="533" width="0.0378%" height="15" fill="rgb(251,196,23)" fg:x="52339" fg:w="20"/><text x="99.0401%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (20 samples, 0.04%)</title><rect x="98.7901%" y="517" width="0.0378%" height="15" fill="rgb(250,152,24)" fg:x="52339" fg:w="20"/><text x="99.0401%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.04%)</title><rect x="98.7901%" y="501" width="0.0378%" height="15" fill="rgb(209,150,17)" fg:x="52339" fg:w="20"/><text x="99.0401%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (20 samples, 0.04%)</title><rect x="98.7901%" y="485" width="0.0378%" height="15" fill="rgb(234,202,34)" fg:x="52339" fg:w="20"/><text x="99.0401%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (20 samples, 0.04%)</title><rect x="98.7901%" y="469" width="0.0378%" height="15" fill="rgb(253,148,53)" fg:x="52339" fg:w="20"/><text x="99.0401%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (12 samples, 0.02%)</title><rect x="98.8052%" y="453" width="0.0227%" height="15" fill="rgb(218,129,16)" fg:x="52347" fg:w="12"/><text x="99.0552%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (12 samples, 0.02%)</title><rect x="98.8052%" y="437" width="0.0227%" height="15" fill="rgb(216,85,19)" fg:x="52347" fg:w="12"/><text x="99.0552%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12 samples, 0.02%)</title><rect x="98.8052%" y="421" width="0.0227%" height="15" fill="rgb(235,228,7)" fg:x="52347" fg:w="12"/><text x="99.0552%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (12 samples, 0.02%)</title><rect x="98.8052%" y="405" width="0.0227%" height="15" fill="rgb(245,175,0)" fg:x="52347" fg:w="12"/><text x="99.0552%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (11 samples, 0.02%)</title><rect x="98.8071%" y="389" width="0.0208%" height="15" fill="rgb(208,168,36)" fg:x="52348" fg:w="11"/><text x="99.0571%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (11 samples, 0.02%)</title><rect x="98.8071%" y="373" width="0.0208%" height="15" fill="rgb(246,171,24)" fg:x="52348" fg:w="11"/><text x="99.0571%" y="383.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (285 samples, 0.54%)</title><rect x="98.2918%" y="693" width="0.5379%" height="15" fill="rgb(215,142,24)" fg:x="52075" fg:w="285"/><text x="98.5418%" y="703.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (244 samples, 0.46%)</title><rect x="98.3692%" y="677" width="0.4606%" height="15" fill="rgb(250,187,7)" fg:x="52116" fg:w="244"/><text x="98.6192%" y="687.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (244 samples, 0.46%)</title><rect x="98.3692%" y="661" width="0.4606%" height="15" fill="rgb(228,66,33)" fg:x="52116" fg:w="244"/><text x="98.6192%" y="671.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (91 samples, 0.17%)</title><rect x="98.6580%" y="645" width="0.1718%" height="15" fill="rgb(234,215,21)" fg:x="52269" fg:w="91"/><text x="98.9080%" y="655.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (91 samples, 0.17%)</title><rect x="98.6580%" y="629" width="0.1718%" height="15" fill="rgb(222,191,20)" fg:x="52269" fg:w="91"/><text x="98.9080%" y="639.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (91 samples, 0.17%)</title><rect x="98.6580%" y="613" width="0.1718%" height="15" fill="rgb(245,79,54)" fg:x="52269" fg:w="91"/><text x="98.9080%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (89 samples, 0.17%)</title><rect x="98.6618%" y="597" width="0.1680%" height="15" fill="rgb(240,10,37)" fg:x="52271" fg:w="89"/><text x="98.9118%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (89 samples, 0.17%)</title><rect x="98.6618%" y="581" width="0.1680%" height="15" fill="rgb(214,192,32)" fg:x="52271" fg:w="89"/><text x="98.9118%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="98.8335%" y="565" width="0.0113%" height="15" fill="rgb(209,36,54)" fg:x="52362" fg:w="6"/><text x="99.0835%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="98.8335%" y="549" width="0.0113%" height="15" fill="rgb(220,10,11)" fg:x="52362" fg:w="6"/><text x="99.0835%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="98.8335%" y="533" width="0.0113%" height="15" fill="rgb(221,106,17)" fg:x="52362" fg:w="6"/><text x="99.0835%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="98.8335%" y="517" width="0.0113%" height="15" fill="rgb(251,142,44)" fg:x="52362" fg:w="6"/><text x="99.0835%" y="527.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="98.8581%" y="533" width="0.0113%" height="15" fill="rgb(238,13,15)" fg:x="52375" fg:w="6"/><text x="99.1081%" y="543.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="98.8581%" y="517" width="0.0113%" height="15" fill="rgb(208,107,27)" fg:x="52375" fg:w="6"/><text x="99.1081%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="98.8581%" y="501" width="0.0113%" height="15" fill="rgb(205,136,37)" fg:x="52375" fg:w="6"/><text x="99.1081%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="98.8581%" y="565" width="0.0132%" height="15" fill="rgb(250,205,27)" fg:x="52375" fg:w="7"/><text x="99.1081%" y="575.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="98.8581%" y="549" width="0.0132%" height="15" fill="rgb(210,80,43)" fg:x="52375" fg:w="7"/><text x="99.1081%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (22 samples, 0.04%)</title><rect x="98.8335%" y="597" width="0.0415%" height="15" fill="rgb(247,160,36)" fg:x="52362" fg:w="22"/><text x="99.0835%" y="607.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (22 samples, 0.04%)</title><rect x="98.8335%" y="581" width="0.0415%" height="15" fill="rgb(234,13,49)" fg:x="52362" fg:w="22"/><text x="99.0835%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (28 samples, 0.05%)</title><rect x="98.8316%" y="629" width="0.0529%" height="15" fill="rgb(234,122,0)" fg:x="52361" fg:w="28"/><text x="99.0816%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (28 samples, 0.05%)</title><rect x="98.8316%" y="613" width="0.0529%" height="15" fill="rgb(207,146,38)" fg:x="52361" fg:w="28"/><text x="99.0816%" y="623.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (30 samples, 0.06%)</title><rect x="98.8297%" y="661" width="0.0566%" height="15" fill="rgb(207,177,25)" fg:x="52360" fg:w="30"/><text x="99.0797%" y="671.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (30 samples, 0.06%)</title><rect x="98.8297%" y="645" width="0.0566%" height="15" fill="rgb(211,178,42)" fg:x="52360" fg:w="30"/><text x="99.0797%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (11 samples, 0.02%)</title><rect x="98.8977%" y="517" width="0.0208%" height="15" fill="rgb(230,69,54)" fg:x="52396" fg:w="11"/><text x="99.1477%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (10 samples, 0.02%)</title><rect x="98.8996%" y="501" width="0.0189%" height="15" fill="rgb(214,135,41)" fg:x="52397" fg:w="10"/><text x="99.1496%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="98.8996%" y="485" width="0.0189%" height="15" fill="rgb(237,67,25)" fg:x="52397" fg:w="10"/><text x="99.1496%" y="495.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.02%)</title><rect x="98.9015%" y="469" width="0.0170%" height="15" fill="rgb(222,189,50)" fg:x="52398" fg:w="9"/><text x="99.1515%" y="479.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="98.9071%" y="453" width="0.0113%" height="15" fill="rgb(245,148,34)" fg:x="52401" fg:w="6"/><text x="99.1571%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::lowercase (6 samples, 0.01%)</title><rect x="98.9203%" y="517" width="0.0113%" height="15" fill="rgb(222,29,6)" fg:x="52408" fg:w="6"/><text x="99.1703%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="98.9203%" y="501" width="0.0113%" height="15" fill="rgb(221,189,43)" fg:x="52408" fg:w="6"/><text x="99.1703%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="98.9203%" y="485" width="0.0113%" height="15" fill="rgb(207,36,27)" fg:x="52408" fg:w="6"/><text x="99.1703%" y="495.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="98.9203%" y="469" width="0.0113%" height="15" fill="rgb(217,90,24)" fg:x="52408" fg:w="6"/><text x="99.1703%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (27 samples, 0.05%)</title><rect x="98.8977%" y="549" width="0.0510%" height="15" fill="rgb(224,66,35)" fg:x="52396" fg:w="27"/><text x="99.1477%" y="559.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (27 samples, 0.05%)</title><rect x="98.8977%" y="533" width="0.0510%" height="15" fill="rgb(221,13,50)" fg:x="52396" fg:w="27"/><text x="99.1477%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (37 samples, 0.07%)</title><rect x="98.8864%" y="581" width="0.0698%" height="15" fill="rgb(236,68,49)" fg:x="52390" fg:w="37"/><text x="99.1364%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (37 samples, 0.07%)</title><rect x="98.8864%" y="565" width="0.0698%" height="15" fill="rgb(229,146,28)" fg:x="52390" fg:w="37"/><text x="99.1364%" y="575.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (39 samples, 0.07%)</title><rect x="98.8864%" y="629" width="0.0736%" height="15" fill="rgb(225,31,38)" fg:x="52390" fg:w="39"/><text x="99.1364%" y="639.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (39 samples, 0.07%)</title><rect x="98.8864%" y="613" width="0.0736%" height="15" fill="rgb(250,208,3)" fg:x="52390" fg:w="39"/><text x="99.1364%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (39 samples, 0.07%)</title><rect x="98.8864%" y="597" width="0.0736%" height="15" fill="rgb(246,54,23)" fg:x="52390" fg:w="39"/><text x="99.1364%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (78 samples, 0.15%)</title><rect x="98.8297%" y="693" width="0.1472%" height="15" fill="rgb(243,76,11)" fg:x="52360" fg:w="78"/><text x="99.0797%" y="703.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (78 samples, 0.15%)</title><rect x="98.8297%" y="677" width="0.1472%" height="15" fill="rgb(245,21,50)" fg:x="52360" fg:w="78"/><text x="99.0797%" y="687.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (48 samples, 0.09%)</title><rect x="98.8864%" y="661" width="0.0906%" height="15" fill="rgb(228,9,43)" fg:x="52390" fg:w="48"/><text x="99.1364%" y="671.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (48 samples, 0.09%)</title><rect x="98.8864%" y="645" width="0.0906%" height="15" fill="rgb(208,100,47)" fg:x="52390" fg:w="48"/><text x="99.1364%" y="655.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (9 samples, 0.02%)</title><rect x="98.9600%" y="629" width="0.0170%" height="15" fill="rgb(232,26,8)" fg:x="52429" fg:w="9"/><text x="99.2100%" y="639.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="98.9600%" y="613" width="0.0170%" height="15" fill="rgb(216,166,38)" fg:x="52429" fg:w="9"/><text x="99.2100%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::lowercase (6 samples, 0.01%)</title><rect x="98.9883%" y="549" width="0.0113%" height="15" fill="rgb(251,202,51)" fg:x="52444" fg:w="6"/><text x="99.2383%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (19 samples, 0.04%)</title><rect x="98.9807%" y="581" width="0.0359%" height="15" fill="rgb(254,216,34)" fg:x="52440" fg:w="19"/><text x="99.2307%" y="591.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (19 samples, 0.04%)</title><rect x="98.9807%" y="565" width="0.0359%" height="15" fill="rgb(251,32,27)" fg:x="52440" fg:w="19"/><text x="99.2307%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (24 samples, 0.05%)</title><rect x="98.9789%" y="613" width="0.0453%" height="15" fill="rgb(208,127,28)" fg:x="52439" fg:w="24"/><text x="99.2289%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (24 samples, 0.05%)</title><rect x="98.9789%" y="597" width="0.0453%" height="15" fill="rgb(224,137,22)" fg:x="52439" fg:w="24"/><text x="99.2289%" y="607.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (490 samples, 0.92%)</title><rect x="98.1012%" y="741" width="0.9249%" height="15" fill="rgb(254,70,32)" fg:x="51974" fg:w="490"/><text x="98.3512%" y="751.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (389 samples, 0.73%)</title><rect x="98.2918%" y="725" width="0.7342%" height="15" fill="rgb(229,75,37)" fg:x="52075" fg:w="389"/><text x="98.5418%" y="735.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (389 samples, 0.73%)</title><rect x="98.2918%" y="709" width="0.7342%" height="15" fill="rgb(252,64,23)" fg:x="52075" fg:w="389"/><text x="98.5418%" y="719.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (26 samples, 0.05%)</title><rect x="98.9770%" y="693" width="0.0491%" height="15" fill="rgb(232,162,48)" fg:x="52438" fg:w="26"/><text x="99.2270%" y="703.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (25 samples, 0.05%)</title><rect x="98.9789%" y="677" width="0.0472%" height="15" fill="rgb(246,160,12)" fg:x="52439" fg:w="25"/><text x="99.2289%" y="687.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (25 samples, 0.05%)</title><rect x="98.9789%" y="661" width="0.0472%" height="15" fill="rgb(247,166,0)" fg:x="52439" fg:w="25"/><text x="99.2289%" y="671.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (25 samples, 0.05%)</title><rect x="98.9789%" y="645" width="0.0472%" height="15" fill="rgb(249,219,21)" fg:x="52439" fg:w="25"/><text x="99.2289%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (25 samples, 0.05%)</title><rect x="98.9789%" y="629" width="0.0472%" height="15" fill="rgb(205,209,3)" fg:x="52439" fg:w="25"/><text x="99.2289%" y="639.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (12 samples, 0.02%)</title><rect x="99.0260%" y="629" width="0.0227%" height="15" fill="rgb(243,44,1)" fg:x="52464" fg:w="12"/><text x="99.2760%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (13 samples, 0.02%)</title><rect x="99.0260%" y="645" width="0.0245%" height="15" fill="rgb(206,159,16)" fg:x="52464" fg:w="13"/><text x="99.2760%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (18 samples, 0.03%)</title><rect x="99.0260%" y="677" width="0.0340%" height="15" fill="rgb(244,77,30)" fg:x="52464" fg:w="18"/><text x="99.2760%" y="687.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (18 samples, 0.03%)</title><rect x="99.0260%" y="661" width="0.0340%" height="15" fill="rgb(218,69,12)" fg:x="52464" fg:w="18"/><text x="99.2760%" y="671.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.04%)</title><rect x="99.0260%" y="709" width="0.0396%" height="15" fill="rgb(212,87,7)" fg:x="52464" fg:w="21"/><text x="99.2760%" y="719.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (21 samples, 0.04%)</title><rect x="99.0260%" y="693" width="0.0396%" height="15" fill="rgb(245,114,25)" fg:x="52464" fg:w="21"/><text x="99.2760%" y="703.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (9 samples, 0.02%)</title><rect x="99.0713%" y="565" width="0.0170%" height="15" fill="rgb(210,61,42)" fg:x="52488" fg:w="9"/><text x="99.3213%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (9 samples, 0.02%)</title><rect x="99.0713%" y="549" width="0.0170%" height="15" fill="rgb(211,52,33)" fg:x="52488" fg:w="9"/><text x="99.3213%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9 samples, 0.02%)</title><rect x="99.0713%" y="533" width="0.0170%" height="15" fill="rgb(234,58,33)" fg:x="52488" fg:w="9"/><text x="99.3213%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.02%)</title><rect x="99.0732%" y="517" width="0.0151%" height="15" fill="rgb(220,115,36)" fg:x="52489" fg:w="8"/><text x="99.3232%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (9 samples, 0.02%)</title><rect x="99.1015%" y="565" width="0.0170%" height="15" fill="rgb(243,153,54)" fg:x="52504" fg:w="9"/><text x="99.3515%" y="575.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9 samples, 0.02%)</title><rect x="99.1015%" y="549" width="0.0170%" height="15" fill="rgb(251,47,18)" fg:x="52504" fg:w="9"/><text x="99.3515%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.02%)</title><rect x="99.1034%" y="533" width="0.0151%" height="15" fill="rgb(242,102,42)" fg:x="52505" fg:w="8"/><text x="99.3534%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (27 samples, 0.05%)</title><rect x="99.0713%" y="597" width="0.0510%" height="15" fill="rgb(234,31,38)" fg:x="52488" fg:w="27"/><text x="99.3213%" y="607.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (27 samples, 0.05%)</title><rect x="99.0713%" y="581" width="0.0510%" height="15" fill="rgb(221,117,51)" fg:x="52488" fg:w="27"/><text x="99.3213%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (38 samples, 0.07%)</title><rect x="99.0676%" y="629" width="0.0717%" height="15" fill="rgb(212,20,18)" fg:x="52486" fg:w="38"/><text x="99.3176%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (38 samples, 0.07%)</title><rect x="99.0676%" y="613" width="0.0717%" height="15" fill="rgb(245,133,36)" fg:x="52486" fg:w="38"/><text x="99.3176%" y="623.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (40 samples, 0.08%)</title><rect x="99.0657%" y="661" width="0.0755%" height="15" fill="rgb(212,6,19)" fg:x="52485" fg:w="40"/><text x="99.3157%" y="671.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (40 samples, 0.08%)</title><rect x="99.0657%" y="645" width="0.0755%" height="15" fill="rgb(218,1,36)" fg:x="52485" fg:w="40"/><text x="99.3157%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (8 samples, 0.02%)</title><rect x="99.1431%" y="517" width="0.0151%" height="15" fill="rgb(246,84,54)" fg:x="52526" fg:w="8"/><text x="99.3931%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (8 samples, 0.02%)</title><rect x="99.1431%" y="501" width="0.0151%" height="15" fill="rgb(242,110,6)" fg:x="52526" fg:w="8"/><text x="99.3931%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (8 samples, 0.02%)</title><rect x="99.1431%" y="485" width="0.0151%" height="15" fill="rgb(214,47,5)" fg:x="52526" fg:w="8"/><text x="99.3931%" y="495.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.02%)</title><rect x="99.1431%" y="469" width="0.0151%" height="15" fill="rgb(218,159,25)" fg:x="52526" fg:w="8"/><text x="99.3931%" y="479.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (7 samples, 0.01%)</title><rect x="99.1450%" y="453" width="0.0132%" height="15" fill="rgb(215,211,28)" fg:x="52527" fg:w="7"/><text x="99.3950%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="99.1468%" y="437" width="0.0113%" height="15" fill="rgb(238,59,32)" fg:x="52528" fg:w="6"/><text x="99.3968%" y="447.50"></text></g><g><title>swiftide-bench`tracing_core::dispatcher::get_default (6 samples, 0.01%)</title><rect x="99.1468%" y="421" width="0.0113%" height="15" fill="rgb(226,82,3)" fg:x="52528" fg:w="6"/><text x="99.3968%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::nfd (7 samples, 0.01%)</title><rect x="99.1657%" y="517" width="0.0132%" height="15" fill="rgb(240,164,32)" fg:x="52538" fg:w="7"/><text x="99.4157%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="99.1657%" y="501" width="0.0132%" height="15" fill="rgb(232,46,7)" fg:x="52538" fg:w="7"/><text x="99.4157%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="99.1657%" y="485" width="0.0132%" height="15" fill="rgb(229,129,53)" fg:x="52538" fg:w="7"/><text x="99.4157%" y="495.50"></text></g><g><title>swiftide-bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="99.1676%" y="469" width="0.0113%" height="15" fill="rgb(234,188,29)" fg:x="52539" fg:w="6"/><text x="99.4176%" y="479.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.02%)</title><rect x="99.1827%" y="485" width="0.0170%" height="15" fill="rgb(246,141,4)" fg:x="52547" fg:w="9"/><text x="99.4327%" y="495.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (7 samples, 0.01%)</title><rect x="99.1865%" y="469" width="0.0132%" height="15" fill="rgb(229,23,39)" fg:x="52549" fg:w="7"/><text x="99.4365%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="99.1884%" y="453" width="0.0113%" height="15" fill="rgb(206,12,3)" fg:x="52550" fg:w="6"/><text x="99.4384%" y="463.50"></text></g><g><title>swiftide-bench`tracing_core::dispatcher::get_default (6 samples, 0.01%)</title><rect x="99.1884%" y="437" width="0.0113%" height="15" fill="rgb(252,226,20)" fg:x="52550" fg:w="6"/><text x="99.4384%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (31 samples, 0.06%)</title><rect x="99.1431%" y="533" width="0.0585%" height="15" fill="rgb(216,123,35)" fg:x="52526" fg:w="31"/><text x="99.3931%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (12 samples, 0.02%)</title><rect x="99.1789%" y="517" width="0.0227%" height="15" fill="rgb(212,68,40)" fg:x="52545" fg:w="12"/><text x="99.4289%" y="527.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="99.1789%" y="501" width="0.0227%" height="15" fill="rgb(254,125,32)" fg:x="52545" fg:w="12"/><text x="99.4289%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (32 samples, 0.06%)</title><rect x="99.1431%" y="549" width="0.0604%" height="15" fill="rgb(253,97,22)" fg:x="52526" fg:w="32"/><text x="99.3931%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (39 samples, 0.07%)</title><rect x="99.1412%" y="581" width="0.0736%" height="15" fill="rgb(241,101,14)" fg:x="52525" fg:w="39"/><text x="99.3912%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (39 samples, 0.07%)</title><rect x="99.1412%" y="565" width="0.0736%" height="15" fill="rgb(238,103,29)" fg:x="52525" fg:w="39"/><text x="99.3912%" y="575.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (41 samples, 0.08%)</title><rect x="99.1412%" y="629" width="0.0774%" height="15" fill="rgb(233,195,47)" fg:x="52525" fg:w="41"/><text x="99.3912%" y="639.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41 samples, 0.08%)</title><rect x="99.1412%" y="613" width="0.0774%" height="15" fill="rgb(246,218,30)" fg:x="52525" fg:w="41"/><text x="99.3912%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (41 samples, 0.08%)</title><rect x="99.1412%" y="597" width="0.0774%" height="15" fill="rgb(219,145,47)" fg:x="52525" fg:w="41"/><text x="99.3912%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="99.2205%" y="469" width="0.0132%" height="15" fill="rgb(243,12,26)" fg:x="52567" fg:w="7"/><text x="99.4705%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="99.2205%" y="453" width="0.0132%" height="15" fill="rgb(214,87,16)" fg:x="52567" fg:w="7"/><text x="99.4705%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (91 samples, 0.17%)</title><rect x="99.0657%" y="677" width="0.1718%" height="15" fill="rgb(208,99,42)" fg:x="52485" fg:w="91"/><text x="99.3157%" y="687.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (51 samples, 0.10%)</title><rect x="99.1412%" y="661" width="0.0963%" height="15" fill="rgb(253,99,2)" fg:x="52525" fg:w="51"/><text x="99.3912%" y="671.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (51 samples, 0.10%)</title><rect x="99.1412%" y="645" width="0.0963%" height="15" fill="rgb(220,168,23)" fg:x="52525" fg:w="51"/><text x="99.3912%" y="655.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (9 samples, 0.02%)</title><rect x="99.2205%" y="629" width="0.0170%" height="15" fill="rgb(242,38,24)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="639.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (9 samples, 0.02%)</title><rect x="99.2205%" y="613" width="0.0170%" height="15" fill="rgb(225,182,9)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="623.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="99.2205%" y="597" width="0.0170%" height="15" fill="rgb(243,178,37)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (9 samples, 0.02%)</title><rect x="99.2205%" y="581" width="0.0170%" height="15" fill="rgb(232,139,19)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (9 samples, 0.02%)</title><rect x="99.2205%" y="565" width="0.0170%" height="15" fill="rgb(225,201,24)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="575.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="99.2205%" y="549" width="0.0170%" height="15" fill="rgb(221,47,46)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.02%)</title><rect x="99.2205%" y="533" width="0.0170%" height="15" fill="rgb(249,23,13)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (9 samples, 0.02%)</title><rect x="99.2205%" y="517" width="0.0170%" height="15" fill="rgb(219,9,5)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (9 samples, 0.02%)</title><rect x="99.2205%" y="501" width="0.0170%" height="15" fill="rgb(254,171,16)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (9 samples, 0.02%)</title><rect x="99.2205%" y="485" width="0.0170%" height="15" fill="rgb(230,171,20)" fg:x="52567" fg:w="9"/><text x="99.4705%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (10 samples, 0.02%)</title><rect x="99.2374%" y="581" width="0.0189%" height="15" fill="rgb(210,71,41)" fg:x="52576" fg:w="10"/><text x="99.4874%" y="591.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (10 samples, 0.02%)</title><rect x="99.2374%" y="565" width="0.0189%" height="15" fill="rgb(206,173,20)" fg:x="52576" fg:w="10"/><text x="99.4874%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (12 samples, 0.02%)</title><rect x="99.2374%" y="613" width="0.0227%" height="15" fill="rgb(233,88,34)" fg:x="52576" fg:w="12"/><text x="99.4874%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (12 samples, 0.02%)</title><rect x="99.2374%" y="597" width="0.0227%" height="15" fill="rgb(223,209,46)" fg:x="52576" fg:w="12"/><text x="99.4874%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (14 samples, 0.03%)</title><rect x="99.2374%" y="677" width="0.0264%" height="15" fill="rgb(250,43,18)" fg:x="52576" fg:w="14"/><text x="99.4874%" y="687.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (14 samples, 0.03%)</title><rect x="99.2374%" y="661" width="0.0264%" height="15" fill="rgb(208,13,10)" fg:x="52576" fg:w="14"/><text x="99.4874%" y="671.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.03%)</title><rect x="99.2374%" y="645" width="0.0264%" height="15" fill="rgb(212,200,36)" fg:x="52576" fg:w="14"/><text x="99.4874%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (14 samples, 0.03%)</title><rect x="99.2374%" y="629" width="0.0264%" height="15" fill="rgb(225,90,30)" fg:x="52576" fg:w="14"/><text x="99.4874%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="99.2676%" y="517" width="0.0132%" height="15" fill="rgb(236,182,39)" fg:x="52592" fg:w="7"/><text x="99.5176%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="99.2676%" y="501" width="0.0132%" height="15" fill="rgb(212,144,35)" fg:x="52592" fg:w="7"/><text x="99.5176%" y="511.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="99.2658%" y="597" width="0.0170%" height="15" fill="rgb(228,63,44)" fg:x="52591" fg:w="9"/><text x="99.5158%" y="607.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.02%)</title><rect x="99.2658%" y="581" width="0.0170%" height="15" fill="rgb(228,109,6)" fg:x="52591" fg:w="9"/><text x="99.5158%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (9 samples, 0.02%)</title><rect x="99.2658%" y="565" width="0.0170%" height="15" fill="rgb(238,117,24)" fg:x="52591" fg:w="9"/><text x="99.5158%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (8 samples, 0.02%)</title><rect x="99.2676%" y="549" width="0.0151%" height="15" fill="rgb(242,26,26)" fg:x="52592" fg:w="8"/><text x="99.5176%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (8 samples, 0.02%)</title><rect x="99.2676%" y="533" width="0.0151%" height="15" fill="rgb(221,92,48)" fg:x="52592" fg:w="8"/><text x="99.5176%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="99.2827%" y="501" width="0.0132%" height="15" fill="rgb(209,209,32)" fg:x="52600" fg:w="7"/><text x="99.5327%" y="511.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="99.2827%" y="485" width="0.0132%" height="15" fill="rgb(221,70,22)" fg:x="52600" fg:w="7"/><text x="99.5327%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (145 samples, 0.27%)</title><rect x="99.0260%" y="741" width="0.2737%" height="15" fill="rgb(248,145,5)" fg:x="52464" fg:w="145"/><text x="99.2760%" y="751.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (145 samples, 0.27%)</title><rect x="99.0260%" y="725" width="0.2737%" height="15" fill="rgb(226,116,26)" fg:x="52464" fg:w="145"/><text x="99.2760%" y="735.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (124 samples, 0.23%)</title><rect x="99.0657%" y="709" width="0.2341%" height="15" fill="rgb(244,5,17)" fg:x="52485" fg:w="124"/><text x="99.3157%" y="719.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (124 samples, 0.23%)</title><rect x="99.0657%" y="693" width="0.2341%" height="15" fill="rgb(252,159,33)" fg:x="52485" fg:w="124"/><text x="99.3157%" y="703.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (19 samples, 0.04%)</title><rect x="99.2639%" y="677" width="0.0359%" height="15" fill="rgb(206,71,0)" fg:x="52590" fg:w="19"/><text x="99.5139%" y="687.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (19 samples, 0.04%)</title><rect x="99.2639%" y="661" width="0.0359%" height="15" fill="rgb(233,118,54)" fg:x="52590" fg:w="19"/><text x="99.5139%" y="671.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (19 samples, 0.04%)</title><rect x="99.2639%" y="645" width="0.0359%" height="15" fill="rgb(234,83,48)" fg:x="52590" fg:w="19"/><text x="99.5139%" y="655.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (18 samples, 0.03%)</title><rect x="99.2658%" y="629" width="0.0340%" height="15" fill="rgb(228,3,54)" fg:x="52591" fg:w="18"/><text x="99.5158%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (18 samples, 0.03%)</title><rect x="99.2658%" y="613" width="0.0340%" height="15" fill="rgb(226,155,13)" fg:x="52591" fg:w="18"/><text x="99.5158%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (9 samples, 0.02%)</title><rect x="99.2827%" y="597" width="0.0170%" height="15" fill="rgb(241,28,37)" fg:x="52600" fg:w="9"/><text x="99.5327%" y="607.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="99.2827%" y="581" width="0.0170%" height="15" fill="rgb(233,93,10)" fg:x="52600" fg:w="9"/><text x="99.5327%" y="591.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.02%)</title><rect x="99.2827%" y="565" width="0.0170%" height="15" fill="rgb(225,113,19)" fg:x="52600" fg:w="9"/><text x="99.5327%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (9 samples, 0.02%)</title><rect x="99.2827%" y="549" width="0.0170%" height="15" fill="rgb(241,2,18)" fg:x="52600" fg:w="9"/><text x="99.5327%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (9 samples, 0.02%)</title><rect x="99.2827%" y="533" width="0.0170%" height="15" fill="rgb(228,207,21)" fg:x="52600" fg:w="9"/><text x="99.5327%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (9 samples, 0.02%)</title><rect x="99.2827%" y="517" width="0.0170%" height="15" fill="rgb(213,211,35)" fg:x="52600" fg:w="9"/><text x="99.5327%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (6 samples, 0.01%)</title><rect x="99.2997%" y="661" width="0.0113%" height="15" fill="rgb(209,83,10)" fg:x="52609" fg:w="6"/><text x="99.5497%" y="671.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (6 samples, 0.01%)</title><rect x="99.2997%" y="645" width="0.0113%" height="15" fill="rgb(209,164,1)" fg:x="52609" fg:w="6"/><text x="99.5497%" y="655.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="99.2997%" y="693" width="0.0151%" height="15" fill="rgb(213,184,43)" fg:x="52609" fg:w="8"/><text x="99.5497%" y="703.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (8 samples, 0.02%)</title><rect x="99.2997%" y="677" width="0.0151%" height="15" fill="rgb(231,61,34)" fg:x="52609" fg:w="8"/><text x="99.5497%" y="687.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="99.3167%" y="501" width="0.0113%" height="15" fill="rgb(235,75,3)" fg:x="52618" fg:w="6"/><text x="99.5667%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (8 samples, 0.02%)</title><rect x="99.3167%" y="549" width="0.0151%" height="15" fill="rgb(220,106,47)" fg:x="52618" fg:w="8"/><text x="99.5667%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (8 samples, 0.02%)</title><rect x="99.3167%" y="533" width="0.0151%" height="15" fill="rgb(210,196,33)" fg:x="52618" fg:w="8"/><text x="99.5667%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (8 samples, 0.02%)</title><rect x="99.3167%" y="517" width="0.0151%" height="15" fill="rgb(229,154,42)" fg:x="52618" fg:w="8"/><text x="99.5667%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (21 samples, 0.04%)</title><rect x="99.3167%" y="565" width="0.0396%" height="15" fill="rgb(228,114,26)" fg:x="52618" fg:w="21"/><text x="99.5667%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (22 samples, 0.04%)</title><rect x="99.3167%" y="581" width="0.0415%" height="15" fill="rgb(208,144,1)" fg:x="52618" fg:w="22"/><text x="99.5667%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (29 samples, 0.05%)</title><rect x="99.3148%" y="613" width="0.0547%" height="15" fill="rgb(239,112,37)" fg:x="52617" fg:w="29"/><text x="99.5648%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (29 samples, 0.05%)</title><rect x="99.3148%" y="597" width="0.0547%" height="15" fill="rgb(210,96,50)" fg:x="52617" fg:w="29"/><text x="99.5648%" y="607.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (30 samples, 0.06%)</title><rect x="99.3148%" y="645" width="0.0566%" height="15" fill="rgb(222,178,2)" fg:x="52617" fg:w="30"/><text x="99.5648%" y="655.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (30 samples, 0.06%)</title><rect x="99.3148%" y="629" width="0.0566%" height="15" fill="rgb(226,74,18)" fg:x="52617" fg:w="30"/><text x="99.5648%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (8 samples, 0.02%)</title><rect x="99.3733%" y="533" width="0.0151%" height="15" fill="rgb(225,67,54)" fg:x="52648" fg:w="8"/><text x="99.6233%" y="543.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="99.3733%" y="517" width="0.0151%" height="15" fill="rgb(251,92,32)" fg:x="52648" fg:w="8"/><text x="99.6233%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (11 samples, 0.02%)</title><rect x="99.3715%" y="613" width="0.0208%" height="15" fill="rgb(228,149,22)" fg:x="52647" fg:w="11"/><text x="99.6215%" y="623.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 0.02%)</title><rect x="99.3715%" y="597" width="0.0208%" height="15" fill="rgb(243,54,13)" fg:x="52647" fg:w="11"/><text x="99.6215%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (11 samples, 0.02%)</title><rect x="99.3715%" y="581" width="0.0208%" height="15" fill="rgb(243,180,28)" fg:x="52647" fg:w="11"/><text x="99.6215%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (11 samples, 0.02%)</title><rect x="99.3715%" y="565" width="0.0208%" height="15" fill="rgb(208,167,24)" fg:x="52647" fg:w="11"/><text x="99.6215%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (11 samples, 0.02%)</title><rect x="99.3715%" y="549" width="0.0208%" height="15" fill="rgb(245,73,45)" fg:x="52647" fg:w="11"/><text x="99.6215%" y="559.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (42 samples, 0.08%)</title><rect x="99.3148%" y="661" width="0.0793%" height="15" fill="rgb(237,203,48)" fg:x="52617" fg:w="42"/><text x="99.5648%" y="671.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (12 samples, 0.02%)</title><rect x="99.3715%" y="645" width="0.0227%" height="15" fill="rgb(211,197,16)" fg:x="52647" fg:w="12"/><text x="99.6215%" y="655.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (12 samples, 0.02%)</title><rect x="99.3715%" y="629" width="0.0227%" height="15" fill="rgb(243,99,51)" fg:x="52647" fg:w="12"/><text x="99.6215%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (9 samples, 0.02%)</title><rect x="99.3960%" y="565" width="0.0170%" height="15" fill="rgb(215,123,29)" fg:x="52660" fg:w="9"/><text x="99.6460%" y="575.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (9 samples, 0.02%)</title><rect x="99.3960%" y="549" width="0.0170%" height="15" fill="rgb(239,186,37)" fg:x="52660" fg:w="9"/><text x="99.6460%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (11 samples, 0.02%)</title><rect x="99.3941%" y="597" width="0.0208%" height="15" fill="rgb(252,136,39)" fg:x="52659" fg:w="11"/><text x="99.6441%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (11 samples, 0.02%)</title><rect x="99.3941%" y="581" width="0.0208%" height="15" fill="rgb(223,213,32)" fg:x="52659" fg:w="11"/><text x="99.6441%" y="591.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12 samples, 0.02%)</title><rect x="99.3941%" y="629" width="0.0227%" height="15" fill="rgb(233,115,5)" fg:x="52659" fg:w="12"/><text x="99.6441%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (12 samples, 0.02%)</title><rect x="99.3941%" y="613" width="0.0227%" height="15" fill="rgb(207,226,44)" fg:x="52659" fg:w="12"/><text x="99.6441%" y="623.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (15 samples, 0.03%)</title><rect x="99.4186%" y="517" width="0.0283%" height="15" fill="rgb(208,126,0)" fg:x="52672" fg:w="15"/><text x="99.6686%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (15 samples, 0.03%)</title><rect x="99.4186%" y="501" width="0.0283%" height="15" fill="rgb(244,66,21)" fg:x="52672" fg:w="15"/><text x="99.6686%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (21 samples, 0.04%)</title><rect x="99.4168%" y="549" width="0.0396%" height="15" fill="rgb(222,97,12)" fg:x="52671" fg:w="21"/><text x="99.6668%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (21 samples, 0.04%)</title><rect x="99.4168%" y="533" width="0.0396%" height="15" fill="rgb(219,213,19)" fg:x="52671" fg:w="21"/><text x="99.6668%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (34 samples, 0.06%)</title><rect x="99.3941%" y="661" width="0.0642%" height="15" fill="rgb(252,169,30)" fg:x="52659" fg:w="34"/><text x="99.6441%" y="671.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (34 samples, 0.06%)</title><rect x="99.3941%" y="645" width="0.0642%" height="15" fill="rgb(206,32,51)" fg:x="52659" fg:w="34"/><text x="99.6441%" y="655.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (22 samples, 0.04%)</title><rect x="99.4168%" y="629" width="0.0415%" height="15" fill="rgb(250,172,42)" fg:x="52671" fg:w="22"/><text x="99.6668%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (22 samples, 0.04%)</title><rect x="99.4168%" y="613" width="0.0415%" height="15" fill="rgb(209,34,43)" fg:x="52671" fg:w="22"/><text x="99.6668%" y="623.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.04%)</title><rect x="99.4168%" y="597" width="0.0415%" height="15" fill="rgb(223,11,35)" fg:x="52671" fg:w="22"/><text x="99.6668%" y="607.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22 samples, 0.04%)</title><rect x="99.4168%" y="581" width="0.0415%" height="15" fill="rgb(251,219,26)" fg:x="52671" fg:w="22"/><text x="99.6668%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (22 samples, 0.04%)</title><rect x="99.4168%" y="565" width="0.0415%" height="15" fill="rgb(231,119,3)" fg:x="52671" fg:w="22"/><text x="99.6668%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (6 samples, 0.01%)</title><rect x="99.4734%" y="389" width="0.0113%" height="15" fill="rgb(216,97,11)" fg:x="52701" fg:w="6"/><text x="99.7234%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="99.4734%" y="373" width="0.0113%" height="15" fill="rgb(223,59,9)" fg:x="52701" fg:w="6"/><text x="99.7234%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (12 samples, 0.02%)</title><rect x="99.4715%" y="421" width="0.0227%" height="15" fill="rgb(233,93,31)" fg:x="52700" fg:w="12"/><text x="99.7215%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (12 samples, 0.02%)</title><rect x="99.4715%" y="405" width="0.0227%" height="15" fill="rgb(239,81,33)" fg:x="52700" fg:w="12"/><text x="99.7215%" y="415.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (13 samples, 0.02%)</title><rect x="99.4715%" y="469" width="0.0245%" height="15" fill="rgb(213,120,34)" fg:x="52700" fg:w="13"/><text x="99.7215%" y="479.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.02%)</title><rect x="99.4715%" y="453" width="0.0245%" height="15" fill="rgb(243,49,53)" fg:x="52700" fg:w="13"/><text x="99.7215%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (13 samples, 0.02%)</title><rect x="99.4715%" y="437" width="0.0245%" height="15" fill="rgb(247,216,33)" fg:x="52700" fg:w="13"/><text x="99.7215%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (18 samples, 0.03%)</title><rect x="99.4639%" y="581" width="0.0340%" height="15" fill="rgb(226,26,14)" fg:x="52696" fg:w="18"/><text x="99.7139%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (18 samples, 0.03%)</title><rect x="99.4639%" y="565" width="0.0340%" height="15" fill="rgb(215,49,53)" fg:x="52696" fg:w="18"/><text x="99.7139%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (18 samples, 0.03%)</title><rect x="99.4639%" y="549" width="0.0340%" height="15" fill="rgb(245,162,40)" fg:x="52696" fg:w="18"/><text x="99.7139%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (14 samples, 0.03%)</title><rect x="99.4715%" y="533" width="0.0264%" height="15" fill="rgb(229,68,17)" fg:x="52700" fg:w="14"/><text x="99.7215%" y="543.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (14 samples, 0.03%)</title><rect x="99.4715%" y="517" width="0.0264%" height="15" fill="rgb(213,182,10)" fg:x="52700" fg:w="14"/><text x="99.7215%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (14 samples, 0.03%)</title><rect x="99.4715%" y="501" width="0.0264%" height="15" fill="rgb(245,125,30)" fg:x="52700" fg:w="14"/><text x="99.7215%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (14 samples, 0.03%)</title><rect x="99.4715%" y="485" width="0.0264%" height="15" fill="rgb(232,202,2)" fg:x="52700" fg:w="14"/><text x="99.7215%" y="495.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (7 samples, 0.01%)</title><rect x="99.4979%" y="517" width="0.0132%" height="15" fill="rgb(237,140,51)" fg:x="52714" fg:w="7"/><text x="99.7479%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (7 samples, 0.01%)</title><rect x="99.4979%" y="501" width="0.0132%" height="15" fill="rgb(236,157,25)" fg:x="52714" fg:w="7"/><text x="99.7479%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (7 samples, 0.01%)</title><rect x="99.4979%" y="485" width="0.0132%" height="15" fill="rgb(219,209,0)" fg:x="52714" fg:w="7"/><text x="99.7479%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="99.5130%" y="373" width="0.0113%" height="15" fill="rgb(240,116,54)" fg:x="52722" fg:w="6"/><text x="99.7630%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="99.5130%" y="357" width="0.0113%" height="15" fill="rgb(216,10,36)" fg:x="52722" fg:w="6"/><text x="99.7630%" y="367.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="99.5130%" y="341" width="0.0113%" height="15" fill="rgb(222,72,44)" fg:x="52722" fg:w="6"/><text x="99.7630%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (21 samples, 0.04%)</title><rect x="99.5130%" y="405" width="0.0396%" height="15" fill="rgb(232,159,9)" fg:x="52722" fg:w="21"/><text x="99.7630%" y="415.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (21 samples, 0.04%)</title><rect x="99.5130%" y="389" width="0.0396%" height="15" fill="rgb(210,39,32)" fg:x="52722" fg:w="21"/><text x="99.7630%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (9 samples, 0.02%)</title><rect x="99.5357%" y="373" width="0.0170%" height="15" fill="rgb(216,194,45)" fg:x="52734" fg:w="9"/><text x="99.7857%" y="383.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9 samples, 0.02%)</title><rect x="99.5357%" y="357" width="0.0170%" height="15" fill="rgb(218,18,35)" fg:x="52734" fg:w="9"/><text x="99.7857%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (26 samples, 0.05%)</title><rect x="99.5111%" y="437" width="0.0491%" height="15" fill="rgb(207,83,51)" fg:x="52721" fg:w="26"/><text x="99.7611%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (26 samples, 0.05%)</title><rect x="99.5111%" y="421" width="0.0491%" height="15" fill="rgb(225,63,43)" fg:x="52721" fg:w="26"/><text x="99.7611%" y="431.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (816 samples, 1.54%)</title><rect x="98.0238%" y="789" width="1.5402%" height="15" fill="rgb(207,57,36)" fg:x="51933" fg:w="816"/><text x="98.2738%" y="799.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (775 samples, 1.46%)</title><rect x="98.1012%" y="773" width="1.4628%" height="15" fill="rgb(216,99,33)" fg:x="51974" fg:w="775"/><text x="98.3512%" y="783.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (775 samples, 1.46%)</title><rect x="98.1012%" y="757" width="1.4628%" height="15" fill="rgb(225,42,16)" fg:x="51974" fg:w="775"/><text x="98.3512%" y="767.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (140 samples, 0.26%)</title><rect x="99.2997%" y="741" width="0.2643%" height="15" fill="rgb(220,201,45)" fg:x="52609" fg:w="140"/><text x="99.5497%" y="751.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (140 samples, 0.26%)</title><rect x="99.2997%" y="725" width="0.2643%" height="15" fill="rgb(225,33,4)" fg:x="52609" fg:w="140"/><text x="99.5497%" y="735.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (140 samples, 0.26%)</title><rect x="99.2997%" y="709" width="0.2643%" height="15" fill="rgb(224,33,50)" fg:x="52609" fg:w="140"/><text x="99.5497%" y="719.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (132 samples, 0.25%)</title><rect x="99.3148%" y="693" width="0.2492%" height="15" fill="rgb(246,198,51)" fg:x="52617" fg:w="132"/><text x="99.5648%" y="703.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (132 samples, 0.25%)</title><rect x="99.3148%" y="677" width="0.2492%" height="15" fill="rgb(205,22,4)" fg:x="52617" fg:w="132"/><text x="99.5648%" y="687.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (56 samples, 0.11%)</title><rect x="99.4583%" y="661" width="0.1057%" height="15" fill="rgb(206,3,8)" fg:x="52693" fg:w="56"/><text x="99.7083%" y="671.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (53 samples, 0.10%)</title><rect x="99.4639%" y="645" width="0.1000%" height="15" fill="rgb(251,23,15)" fg:x="52696" fg:w="53"/><text x="99.7139%" y="655.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (53 samples, 0.10%)</title><rect x="99.4639%" y="629" width="0.1000%" height="15" fill="rgb(252,88,28)" fg:x="52696" fg:w="53"/><text x="99.7139%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (53 samples, 0.10%)</title><rect x="99.4639%" y="613" width="0.1000%" height="15" fill="rgb(212,127,14)" fg:x="52696" fg:w="53"/><text x="99.7139%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (53 samples, 0.10%)</title><rect x="99.4639%" y="597" width="0.1000%" height="15" fill="rgb(247,145,37)" fg:x="52696" fg:w="53"/><text x="99.7139%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (35 samples, 0.07%)</title><rect x="99.4979%" y="581" width="0.0661%" height="15" fill="rgb(209,117,53)" fg:x="52714" fg:w="35"/><text x="99.7479%" y="591.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (35 samples, 0.07%)</title><rect x="99.4979%" y="565" width="0.0661%" height="15" fill="rgb(212,90,42)" fg:x="52714" fg:w="35"/><text x="99.7479%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (35 samples, 0.07%)</title><rect x="99.4979%" y="549" width="0.0661%" height="15" fill="rgb(218,164,37)" fg:x="52714" fg:w="35"/><text x="99.7479%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (35 samples, 0.07%)</title><rect x="99.4979%" y="533" width="0.0661%" height="15" fill="rgb(246,65,34)" fg:x="52714" fg:w="35"/><text x="99.7479%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (28 samples, 0.05%)</title><rect x="99.5111%" y="517" width="0.0529%" height="15" fill="rgb(231,100,33)" fg:x="52721" fg:w="28"/><text x="99.7611%" y="527.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (28 samples, 0.05%)</title><rect x="99.5111%" y="501" width="0.0529%" height="15" fill="rgb(228,126,14)" fg:x="52721" fg:w="28"/><text x="99.7611%" y="511.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (28 samples, 0.05%)</title><rect x="99.5111%" y="485" width="0.0529%" height="15" fill="rgb(215,173,21)" fg:x="52721" fg:w="28"/><text x="99.7611%" y="495.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (28 samples, 0.05%)</title><rect x="99.5111%" y="469" width="0.0529%" height="15" fill="rgb(210,6,40)" fg:x="52721" fg:w="28"/><text x="99.7611%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (28 samples, 0.05%)</title><rect x="99.5111%" y="453" width="0.0529%" height="15" fill="rgb(212,48,18)" fg:x="52721" fg:w="28"/><text x="99.7611%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.01%)</title><rect x="99.5659%" y="485" width="0.0113%" height="15" fill="rgb(230,214,11)" fg:x="52750" fg:w="6"/><text x="99.8159%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (6 samples, 0.01%)</title><rect x="99.5659%" y="469" width="0.0113%" height="15" fill="rgb(254,105,39)" fg:x="52750" fg:w="6"/><text x="99.8159%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (8 samples, 0.02%)</title><rect x="99.5791%" y="373" width="0.0151%" height="15" fill="rgb(245,158,5)" fg:x="52757" fg:w="8"/><text x="99.8291%" y="383.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="99.5791%" y="357" width="0.0151%" height="15" fill="rgb(249,208,11)" fg:x="52757" fg:w="8"/><text x="99.8291%" y="367.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (12 samples, 0.02%)</title><rect x="99.5772%" y="453" width="0.0227%" height="15" fill="rgb(210,39,28)" fg:x="52756" fg:w="12"/><text x="99.8272%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12 samples, 0.02%)</title><rect x="99.5772%" y="437" width="0.0227%" height="15" fill="rgb(211,56,53)" fg:x="52756" fg:w="12"/><text x="99.8272%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (12 samples, 0.02%)</title><rect x="99.5772%" y="421" width="0.0227%" height="15" fill="rgb(226,201,30)" fg:x="52756" fg:w="12"/><text x="99.8272%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (12 samples, 0.02%)</title><rect x="99.5772%" y="405" width="0.0227%" height="15" fill="rgb(239,101,34)" fg:x="52756" fg:w="12"/><text x="99.8272%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (12 samples, 0.02%)</title><rect x="99.5772%" y="389" width="0.0227%" height="15" fill="rgb(226,209,5)" fg:x="52756" fg:w="12"/><text x="99.8272%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (12 samples, 0.02%)</title><rect x="99.6093%" y="101" width="0.0227%" height="15" fill="rgb(250,105,47)" fg:x="52773" fg:w="12"/><text x="99.8593%" y="111.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (11 samples, 0.02%)</title><rect x="99.6112%" y="85" width="0.0208%" height="15" fill="rgb(230,72,3)" fg:x="52774" fg:w="11"/><text x="99.8612%" y="95.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="99.6131%" y="69" width="0.0189%" height="15" fill="rgb(232,218,39)" fg:x="52775" fg:w="10"/><text x="99.8631%" y="79.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.02%)</title><rect x="99.6168%" y="53" width="0.0151%" height="15" fill="rgb(248,166,6)" fg:x="52777" fg:w="8"/><text x="99.8668%" y="63.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="99.6206%" y="37" width="0.0113%" height="15" fill="rgb(247,89,20)" fg:x="52779" fg:w="6"/><text x="99.8706%" y="47.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (25 samples, 0.05%)</title><rect x="99.6093%" y="133" width="0.0472%" height="15" fill="rgb(248,130,54)" fg:x="52773" fg:w="25"/><text x="99.8593%" y="143.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (25 samples, 0.05%)</title><rect x="99.6093%" y="117" width="0.0472%" height="15" fill="rgb(234,196,4)" fg:x="52773" fg:w="25"/><text x="99.8593%" y="127.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="99.6451%" y="101" width="0.0113%" height="15" fill="rgb(250,143,31)" fg:x="52792" fg:w="6"/><text x="99.8951%" y="111.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="99.6451%" y="85" width="0.0113%" height="15" fill="rgb(211,110,34)" fg:x="52792" fg:w="6"/><text x="99.8951%" y="95.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (30 samples, 0.06%)</title><rect x="99.6074%" y="165" width="0.0566%" height="15" fill="rgb(215,124,48)" fg:x="52772" fg:w="30"/><text x="99.8574%" y="175.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (30 samples, 0.06%)</title><rect x="99.6074%" y="149" width="0.0566%" height="15" fill="rgb(216,46,13)" fg:x="52772" fg:w="30"/><text x="99.8574%" y="159.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (32 samples, 0.06%)</title><rect x="99.6074%" y="213" width="0.0604%" height="15" fill="rgb(205,184,25)" fg:x="52772" fg:w="32"/><text x="99.8574%" y="223.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (32 samples, 0.06%)</title><rect x="99.6074%" y="197" width="0.0604%" height="15" fill="rgb(228,1,10)" fg:x="52772" fg:w="32"/><text x="99.8574%" y="207.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (32 samples, 0.06%)</title><rect x="99.6074%" y="181" width="0.0604%" height="15" fill="rgb(213,116,27)" fg:x="52772" fg:w="32"/><text x="99.8574%" y="191.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (43 samples, 0.08%)</title><rect x="99.5998%" y="325" width="0.0812%" height="15" fill="rgb(241,95,50)" fg:x="52768" fg:w="43"/><text x="99.8498%" y="335.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (43 samples, 0.08%)</title><rect x="99.5998%" y="309" width="0.0812%" height="15" fill="rgb(238,48,32)" fg:x="52768" fg:w="43"/><text x="99.8498%" y="319.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (43 samples, 0.08%)</title><rect x="99.5998%" y="293" width="0.0812%" height="15" fill="rgb(235,113,49)" fg:x="52768" fg:w="43"/><text x="99.8498%" y="303.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (39 samples, 0.07%)</title><rect x="99.6074%" y="277" width="0.0736%" height="15" fill="rgb(205,127,43)" fg:x="52772" fg:w="39"/><text x="99.8574%" y="287.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (39 samples, 0.07%)</title><rect x="99.6074%" y="261" width="0.0736%" height="15" fill="rgb(250,162,2)" fg:x="52772" fg:w="39"/><text x="99.8574%" y="271.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (39 samples, 0.07%)</title><rect x="99.6074%" y="245" width="0.0736%" height="15" fill="rgb(220,13,41)" fg:x="52772" fg:w="39"/><text x="99.8574%" y="255.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (39 samples, 0.07%)</title><rect x="99.6074%" y="229" width="0.0736%" height="15" fill="rgb(249,221,25)" fg:x="52772" fg:w="39"/><text x="99.8574%" y="239.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (7 samples, 0.01%)</title><rect x="99.6678%" y="213" width="0.0132%" height="15" fill="rgb(215,208,19)" fg:x="52804" fg:w="7"/><text x="99.9178%" y="223.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (7 samples, 0.01%)</title><rect x="99.6678%" y="197" width="0.0132%" height="15" fill="rgb(236,175,2)" fg:x="52804" fg:w="7"/><text x="99.9178%" y="207.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.01%)</title><rect x="99.6678%" y="181" width="0.0132%" height="15" fill="rgb(241,52,2)" fg:x="52804" fg:w="7"/><text x="99.9178%" y="191.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (7 samples, 0.01%)</title><rect x="99.6678%" y="165" width="0.0132%" height="15" fill="rgb(248,140,14)" fg:x="52804" fg:w="7"/><text x="99.9178%" y="175.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (7 samples, 0.01%)</title><rect x="99.6678%" y="149" width="0.0132%" height="15" fill="rgb(253,22,42)" fg:x="52804" fg:w="7"/><text x="99.9178%" y="159.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (7 samples, 0.01%)</title><rect x="99.6678%" y="133" width="0.0132%" height="15" fill="rgb(234,61,47)" fg:x="52804" fg:w="7"/><text x="99.9178%" y="143.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (6 samples, 0.01%)</title><rect x="99.6810%" y="213" width="0.0113%" height="15" fill="rgb(208,226,15)" fg:x="52811" fg:w="6"/><text x="99.9310%" y="223.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="99.6810%" y="197" width="0.0113%" height="15" fill="rgb(217,221,4)" fg:x="52811" fg:w="6"/><text x="99.9310%" y="207.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (70 samples, 0.13%)</title><rect x="99.5640%" y="677" width="0.1321%" height="15" fill="rgb(212,174,34)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="687.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (70 samples, 0.13%)</title><rect x="99.5640%" y="661" width="0.1321%" height="15" fill="rgb(253,83,4)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="671.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (70 samples, 0.13%)</title><rect x="99.5640%" y="645" width="0.1321%" height="15" fill="rgb(250,195,49)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="655.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (70 samples, 0.13%)</title><rect x="99.5640%" y="629" width="0.1321%" height="15" fill="rgb(241,192,25)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (70 samples, 0.13%)</title><rect x="99.5640%" y="613" width="0.1321%" height="15" fill="rgb(208,124,10)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (70 samples, 0.13%)</title><rect x="99.5640%" y="597" width="0.1321%" height="15" fill="rgb(222,33,0)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="607.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (70 samples, 0.13%)</title><rect x="99.5640%" y="581" width="0.1321%" height="15" fill="rgb(234,209,28)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (70 samples, 0.13%)</title><rect x="99.5640%" y="565" width="0.1321%" height="15" fill="rgb(224,11,23)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (70 samples, 0.13%)</title><rect x="99.5640%" y="549" width="0.1321%" height="15" fill="rgb(232,99,1)" fg:x="52749" fg:w="70"/><text x="99.8140%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (69 samples, 0.13%)</title><rect x="99.5659%" y="533" width="0.1302%" height="15" fill="rgb(237,95,45)" fg:x="52750" fg:w="69"/><text x="99.8159%" y="543.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (69 samples, 0.13%)</title><rect x="99.5659%" y="517" width="0.1302%" height="15" fill="rgb(208,109,11)" fg:x="52750" fg:w="69"/><text x="99.8159%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (69 samples, 0.13%)</title><rect x="99.5659%" y="501" width="0.1302%" height="15" fill="rgb(216,190,48)" fg:x="52750" fg:w="69"/><text x="99.8159%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (63 samples, 0.12%)</title><rect x="99.5772%" y="485" width="0.1189%" height="15" fill="rgb(251,171,36)" fg:x="52756" fg:w="63"/><text x="99.8272%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (63 samples, 0.12%)</title><rect x="99.5772%" y="469" width="0.1189%" height="15" fill="rgb(230,62,22)" fg:x="52756" fg:w="63"/><text x="99.8272%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (51 samples, 0.10%)</title><rect x="99.5998%" y="453" width="0.0963%" height="15" fill="rgb(225,114,35)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="463.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (51 samples, 0.10%)</title><rect x="99.5998%" y="437" width="0.0963%" height="15" fill="rgb(215,118,42)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (51 samples, 0.10%)</title><rect x="99.5998%" y="421" width="0.0963%" height="15" fill="rgb(243,119,21)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="431.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (51 samples, 0.10%)</title><rect x="99.5998%" y="405" width="0.0963%" height="15" fill="rgb(252,177,53)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="415.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (51 samples, 0.10%)</title><rect x="99.5998%" y="389" width="0.0963%" height="15" fill="rgb(237,209,29)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="399.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (51 samples, 0.10%)</title><rect x="99.5998%" y="373" width="0.0963%" height="15" fill="rgb(212,65,23)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="383.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (51 samples, 0.10%)</title><rect x="99.5998%" y="357" width="0.0963%" height="15" fill="rgb(230,222,46)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="367.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (51 samples, 0.10%)</title><rect x="99.5998%" y="341" width="0.0963%" height="15" fill="rgb(215,135,32)" fg:x="52768" fg:w="51"/><text x="99.8498%" y="351.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (8 samples, 0.02%)</title><rect x="99.6810%" y="325" width="0.0151%" height="15" fill="rgb(246,101,22)" fg:x="52811" fg:w="8"/><text x="99.9310%" y="335.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (8 samples, 0.02%)</title><rect x="99.6810%" y="309" width="0.0151%" height="15" fill="rgb(206,107,13)" fg:x="52811" fg:w="8"/><text x="99.9310%" y="319.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.02%)</title><rect x="99.6810%" y="293" width="0.0151%" height="15" fill="rgb(250,100,44)" fg:x="52811" fg:w="8"/><text x="99.9310%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="99.6810%" y="277" width="0.0151%" height="15" fill="rgb(231,147,38)" fg:x="52811" fg:w="8"/><text x="99.9310%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (8 samples, 0.02%)</title><rect x="99.6810%" y="261" width="0.0151%" height="15" fill="rgb(229,8,40)" fg:x="52811" fg:w="8"/><text x="99.9310%" y="271.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (8 samples, 0.02%)</title><rect x="99.6810%" y="245" width="0.0151%" height="15" fill="rgb(221,135,30)" fg:x="52811" fg:w="8"/><text x="99.9310%" y="255.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (8 samples, 0.02%)</title><rect x="99.6810%" y="229" width="0.0151%" height="15" fill="rgb(249,193,18)" fg:x="52811" fg:w="8"/><text x="99.9310%" y="239.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (888 samples, 1.68%)</title><rect x="98.0238%" y="805" width="1.6761%" height="15" fill="rgb(209,133,39)" fg:x="51933" fg:w="888"/><text x="98.2738%" y="815.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (72 samples, 0.14%)</title><rect x="99.5640%" y="789" width="0.1359%" height="15" fill="rgb(232,100,14)" fg:x="52749" fg:w="72"/><text x="99.8140%" y="799.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (72 samples, 0.14%)</title><rect x="99.5640%" y="773" width="0.1359%" height="15" fill="rgb(224,185,1)" fg:x="52749" fg:w="72"/><text x="99.8140%" y="783.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (72 samples, 0.14%)</title><rect x="99.5640%" y="757" width="0.1359%" height="15" fill="rgb(223,139,8)" fg:x="52749" fg:w="72"/><text x="99.8140%" y="767.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (72 samples, 0.14%)</title><rect x="99.5640%" y="741" width="0.1359%" height="15" fill="rgb(232,213,38)" fg:x="52749" fg:w="72"/><text x="99.8140%" y="751.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (72 samples, 0.14%)</title><rect x="99.5640%" y="725" width="0.1359%" height="15" fill="rgb(207,94,22)" fg:x="52749" fg:w="72"/><text x="99.8140%" y="735.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (72 samples, 0.14%)</title><rect x="99.5640%" y="709" width="0.1359%" height="15" fill="rgb(219,183,54)" fg:x="52749" fg:w="72"/><text x="99.8140%" y="719.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (72 samples, 0.14%)</title><rect x="99.5640%" y="693" width="0.1359%" height="15" fill="rgb(216,185,54)" fg:x="52749" fg:w="72"/><text x="99.8140%" y="703.50"></text></g><g><title>swiftide-bench`rayon_core::registry::ThreadBuilder::run (899 samples, 1.70%)</title><rect x="98.0049%" y="837" width="1.6969%" height="15" fill="rgb(254,217,39)" fg:x="51923" fg:w="899"/><text x="98.2549%" y="847.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (899 samples, 1.70%)</title><rect x="98.0049%" y="821" width="1.6969%" height="15" fill="rgb(240,178,23)" fg:x="51923" fg:w="899"/><text x="98.2549%" y="831.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (48,655 samples, 91.84%)</title><rect x="7.8860%" y="917" width="91.8365%" height="15" fill="rgb(218,11,47)" fg:x="4178" fg:w="48655"/><text x="8.1360%" y="927.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (48,653 samples, 91.83%)</title><rect x="7.8898%" y="901" width="91.8328%" height="15" fill="rgb(218,51,51)" fg:x="4180" fg:w="48653"/><text x="8.1398%" y="911.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>swiftide-bench`std::sys::pal::unix::thread::Thread::new::thread_start (911 samples, 1.72%)</title><rect x="98.0030%" y="885" width="1.7195%" height="15" fill="rgb(238,126,27)" fg:x="51922" fg:w="911"/><text x="98.2530%" y="895.50"></text></g><g><title>swiftide-bench`core::ops::function::FnOnce::call_once{{vtable.shim}} (910 samples, 1.72%)</title><rect x="98.0049%" y="869" width="1.7176%" height="15" fill="rgb(249,202,22)" fg:x="51923" fg:w="910"/><text x="98.2549%" y="879.50"></text></g><g><title>swiftide-bench`std::sys::backtrace::__rust_begin_short_backtrace (910 samples, 1.72%)</title><rect x="98.0049%" y="853" width="1.7176%" height="15" fill="rgb(254,195,49)" fg:x="51923" fg:w="910"/><text x="98.2549%" y="863.50"></text></g><g><title>swiftide-bench`tokio::runtime::blocking::pool::Inner::run (11 samples, 0.02%)</title><rect x="99.7018%" y="837" width="0.0208%" height="15" fill="rgb(208,123,14)" fg:x="52822" fg:w="11"/><text x="99.9518%" y="847.50"></text></g><g><title>swiftide-bench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (11 samples, 0.02%)</title><rect x="99.7018%" y="821" width="0.0208%" height="15" fill="rgb(224,200,8)" fg:x="52822" fg:w="11"/><text x="99.9518%" y="831.50"></text></g><g><title>swiftide-bench`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (11 samples, 0.02%)</title><rect x="99.7018%" y="805" width="0.0208%" height="15" fill="rgb(217,61,36)" fg:x="52822" fg:w="11"/><text x="99.9518%" y="815.50"></text></g><g><title>swiftide-bench`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.02%)</title><rect x="99.7018%" y="789" width="0.0208%" height="15" fill="rgb(206,35,45)" fg:x="52822" fg:w="11"/><text x="99.9518%" y="799.50"></text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::run (10 samples, 0.02%)</title><rect x="99.7037%" y="773" width="0.0189%" height="15" fill="rgb(217,65,33)" fg:x="52823" fg:w="10"/><text x="99.9537%" y="783.50"></text></g><g><title>swiftide-bench`tokio::runtime::context::runtime::enter_runtime (10 samples, 0.02%)</title><rect x="99.7037%" y="757" width="0.0189%" height="15" fill="rgb(222,158,48)" fg:x="52823" fg:w="10"/><text x="99.9537%" y="767.50"></text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::Context::run (10 samples, 0.02%)</title><rect x="99.7037%" y="741" width="0.0189%" height="15" fill="rgb(254,2,54)" fg:x="52823" fg:w="10"/><text x="99.9537%" y="751.50"></text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (7 samples, 0.01%)</title><rect x="99.7093%" y="725" width="0.0132%" height="15" fill="rgb(250,143,38)" fg:x="52826" fg:w="7"/><text x="99.9593%" y="735.50"></text></g><g><title>swiftide-bench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6 samples, 0.01%)</title><rect x="99.7112%" y="709" width="0.0113%" height="15" fill="rgb(248,25,0)" fg:x="52827" fg:w="6"/><text x="99.9612%" y="719.50"></text></g><g><title>all (52,980 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(206,152,27)" fg:x="0" fg:w="52980"/><text x="0.2500%" y="943.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmaxThreaded(void*, long) (146 samples, 0.28%)</title><rect x="99.7244%" y="917" width="0.2756%" height="15" fill="rgb(240,77,30)" fg:x="52834" fg:w="146"/><text x="99.9744%" y="927.50"></text></g></svg></svg>