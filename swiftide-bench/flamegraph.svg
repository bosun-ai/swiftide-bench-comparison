<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="51312"><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.0156%" y="309" width="0.0136%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="7"/><text x="0.2656%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (44 samples, 0.09%)</title><rect x="0.0156%" y="325" width="0.0857%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="44"/><text x="0.2656%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_large (37 samples, 0.07%)</title><rect x="0.0292%" y="309" width="0.0721%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="37"/><text x="0.2792%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (37 samples, 0.07%)</title><rect x="0.0292%" y="293" width="0.0721%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="37"/><text x="0.2792%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (37 samples, 0.07%)</title><rect x="0.0292%" y="277" width="0.0721%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="37"/><text x="0.2792%" y="287.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;ort::session::Session&gt; (50 samples, 0.10%)</title><rect x="0.0097%" y="485" width="0.0974%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="50"/><text x="0.2597%" y="495.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (50 samples, 0.10%)</title><rect x="0.0097%" y="469" width="0.0974%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="50"/><text x="0.2597%" y="479.50"></text></g><g><title>swiftide-bench`&lt;ort::session::SharedSessionInner as core::ops::drop::Drop&gt;::drop (50 samples, 0.10%)</title><rect x="0.0097%" y="453" width="0.0974%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="50"/><text x="0.2597%" y="463.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::~InferenceSession (50 samples, 0.10%)</title><rect x="0.0097%" y="437" width="0.0974%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="50"/><text x="0.2597%" y="447.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::~InferenceSession (50 samples, 0.10%)</title><rect x="0.0097%" y="421" width="0.0974%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="50"/><text x="0.2597%" y="431.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::~SessionState (49 samples, 0.10%)</title><rect x="0.0117%" y="405" width="0.0955%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="49"/><text x="0.2617%" y="415.50"></text></g><g><title>swiftide-bench`onnxruntime::MatMul&lt;float&gt;::~MatMul (49 samples, 0.10%)</title><rect x="0.0117%" y="389" width="0.0955%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="49"/><text x="0.2617%" y="399.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;std::__1::unique_ptr&lt;void, std::__1::function&lt;void (void*)&gt;&gt; onnxruntime::IAllocator::MakeUniquePtr&lt;void&gt;(std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt;, unsigned long, bool, onnxruntime::Stream*, std::__1::function&lt;void (onnxruntime::Stream&amp;, onnxruntime::synchronize::Notification&amp;)&gt;)::&apos;lambda&apos;(void*), std::__1::allocator&lt;std::__1::unique_ptr&lt;void, std::__1::function&lt;void (void*)&gt;&gt; onnxruntime::IAllocator::MakeUniquePtr&lt;void&gt;(std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt;, unsigned long, bool, onnxruntime::Stream*, std::__1::function&lt;void (onnxruntime::Stream&amp;, onnxruntime::synchronize::Notification&amp;)&gt;)::&apos;lambda&apos;(void*)&gt;, void (void*)&gt;::destroy (47 samples, 0.09%)</title><rect x="0.0156%" y="373" width="0.0916%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="47"/><text x="0.2656%" y="383.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::~BFCArena (47 samples, 0.09%)</title><rect x="0.0156%" y="357" width="0.0916%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="47"/><text x="0.2656%" y="367.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::~BFCArena (47 samples, 0.09%)</title><rect x="0.0156%" y="341" width="0.0916%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="47"/><text x="0.2656%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.10%)</title><rect x="0.0058%" y="677" width="0.1033%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="53"/><text x="0.2558%" y="687.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_flatten_unordered::TryFlattenUnordered&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;futures_util::stream::try_stream::ErrInto&lt;futures_util::stream::try_stream::MapOk&lt;futures_util::stream::try_stream::try_chunks::TryChunks&lt;swiftide_core::indexing_stream::IndexingStream&gt;,swiftide_indexing::pipeline::Pipeline::then_store_with&lt;swiftide_integrations::qdrant::Qdrant&gt;::{{closure}}&gt;,anyhow::Error&gt;&gt;&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="661" width="0.0994%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="51"/><text x="0.2597%" y="671.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_flatten_unordered::NestedTryStreamIntoEitherTryStream&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;futures_util::stream::try_stream::ErrInto&lt;futures_util::stream::try_stream::MapOk&lt;futures_util::stream::try_stream::try_chunks::TryChunks&lt;swiftide_core::indexing_stream::IndexingStream&gt;,swiftide_indexing::pipeline::Pipeline::then_store_with&lt;swiftide_integrations::qdrant::Qdrant&gt;::{{closure}}&gt;,anyhow::Error&gt;&gt;&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="645" width="0.0994%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="51"/><text x="0.2597%" y="655.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::into_stream::IntoStream&lt;futures_util::stream::try_stream::try_chunks::TryChunks&lt;swiftide_core::indexing_stream::IndexingStream&gt;&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="629" width="0.0994%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="51"/><text x="0.2597%" y="639.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::InspectOk&lt;swiftide_core::indexing_stream::IndexingStream,swiftide_indexing::pipeline::Pipeline::log_nodes::{{closure}}&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="613" width="0.0994%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="51"/><text x="0.2597%" y="623.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::InspectOk&lt;swiftide_core::indexing_stream::IndexingStream,swiftide_indexing::pipeline::Pipeline::log_nodes::{{closure}}&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="597" width="0.0994%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="51"/><text x="0.2597%" y="607.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_flatten_unordered::TryFlattenUnordered&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;futures_util::stream::try_stream::ErrInto&lt;futures_util::stream::try_stream::MapOk&lt;futures_util::stream::try_stream::try_chunks::TryChunks&lt;swiftide_core::indexing_stream::IndexingStream&gt;,swiftide_indexing::pipeline::Pipeline::then_in_batch&lt;swiftide_indexing::transformers::embed::Embed&gt;::{{closure}}&gt;,anyhow::Error&gt;&gt;&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="581" width="0.0994%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="51"/><text x="0.2597%" y="591.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_flatten_unordered::NestedTryStreamIntoEitherTryStream&lt;futures_util::stream::try_stream::try_buffer_unordered::TryBufferUnordered&lt;futures_util::stream::try_stream::ErrInto&lt;futures_util::stream::try_stream::MapOk&lt;futures_util::stream::try_stream::try_chunks::TryChunks&lt;swiftide_core::indexing_stream::IndexingStream&gt;,swiftide_indexing::pipeline::Pipeline::then_in_batch&lt;swiftide_indexing::transformers::embed::Embed&gt;::{{closure}}&gt;,anyhow::Error&gt;&gt;&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="565" width="0.0994%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="51"/><text x="0.2597%" y="575.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (51 samples, 0.10%)</title><rect x="0.0097%" y="549" width="0.0994%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="51"/><text x="0.2597%" y="559.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (51 samples, 0.10%)</title><rect x="0.0097%" y="533" width="0.0994%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="51"/><text x="0.2597%" y="543.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn swiftide_core::indexing_traits::EmbeddingModel&gt;&gt; (51 samples, 0.10%)</title><rect x="0.0097%" y="517" width="0.0994%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="51"/><text x="0.2597%" y="527.50"></text></g><g><title>swiftide-bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (51 samples, 0.10%)</title><rect x="0.0097%" y="501" width="0.0994%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="51"/><text x="0.2597%" y="511.50"></text></g><g><title>swiftide-bench`fastembed::common::load_tokenizer_hf_hub (7 samples, 0.01%)</title><rect x="0.1091%" y="629" width="0.0136%" height="15" fill="rgb(238,160,17)" fg:x="56" fg:w="7"/><text x="0.3591%" y="639.50"></text></g><g><title>swiftide-bench`fastembed::common::load_tokenizer (7 samples, 0.01%)</title><rect x="0.1091%" y="613" width="0.0136%" height="15" fill="rgb(214,148,48)" fg:x="56" fg:w="7"/><text x="0.3591%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.01%)</title><rect x="0.1306%" y="357" width="0.0117%" height="15" fill="rgb(232,36,49)" fg:x="67" fg:w="6"/><text x="0.3806%" y="367.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(char const*, int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (16 samples, 0.03%)</title><rect x="0.1306%" y="373" width="0.0312%" height="15" fill="rgb(209,103,24)" fg:x="67" fg:w="16"/><text x="0.3806%" y="383.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::EpsCopyInputStream::Next (10 samples, 0.02%)</title><rect x="0.1423%" y="357" width="0.0195%" height="15" fill="rgb(229,88,8)" fg:x="73" fg:w="10"/><text x="0.3923%" y="367.50"></text></g><g><title>swiftide-bench`google::protobuf::io::CopyingInputStreamAdaptor::Next (10 samples, 0.02%)</title><rect x="0.1423%" y="341" width="0.0195%" height="15" fill="rgb(213,181,19)" fg:x="73" fg:w="10"/><text x="0.3923%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`read (10 samples, 0.02%)</title><rect x="0.1423%" y="325" width="0.0195%" height="15" fill="rgb(254,191,54)" fg:x="73" fg:w="10"/><text x="0.3923%" y="335.50"></text></g><g><title>swiftide-bench`onnxruntime::Model::Load (23 samples, 0.04%)</title><rect x="0.1286%" y="485" width="0.0448%" height="15" fill="rgb(241,83,37)" fg:x="66" fg:w="23"/><text x="0.3786%" y="495.50"></text></g><g><title>swiftide-bench`google::protobuf::MessageLite::ParseFromZeroCopyStream (23 samples, 0.04%)</title><rect x="0.1286%" y="469" width="0.0448%" height="15" fill="rgb(233,36,39)" fg:x="66" fg:w="23"/><text x="0.3786%" y="479.50"></text></g><g><title>swiftide-bench`onnx::ModelProto::_InternalParse (22 samples, 0.04%)</title><rect x="0.1306%" y="453" width="0.0429%" height="15" fill="rgb(226,3,54)" fg:x="67" fg:w="22"/><text x="0.3806%" y="463.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::ParseContext::ParseMessage (22 samples, 0.04%)</title><rect x="0.1306%" y="437" width="0.0429%" height="15" fill="rgb(245,192,40)" fg:x="67" fg:w="22"/><text x="0.3806%" y="447.50"></text></g><g><title>swiftide-bench`onnx::GraphProto::_InternalParse (22 samples, 0.04%)</title><rect x="0.1306%" y="421" width="0.0429%" height="15" fill="rgb(238,167,29)" fg:x="67" fg:w="22"/><text x="0.3806%" y="431.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::ParseContext::ParseMessage (22 samples, 0.04%)</title><rect x="0.1306%" y="405" width="0.0429%" height="15" fill="rgb(232,182,51)" fg:x="67" fg:w="22"/><text x="0.3806%" y="415.50"></text></g><g><title>swiftide-bench`onnx::TensorProto::_InternalParse (22 samples, 0.04%)</title><rect x="0.1306%" y="389" width="0.0429%" height="15" fill="rgb(231,60,39)" fg:x="67" fg:w="22"/><text x="0.3806%" y="399.50"></text></g><g><title>swiftide-bench`google::protobuf::internal::InlineGreedyStringParser(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.01%)</title><rect x="0.1618%" y="373" width="0.0117%" height="15" fill="rgb(208,69,12)" fg:x="83" fg:w="6"/><text x="0.4118%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (6 samples, 0.01%)</title><rect x="0.1618%" y="357" width="0.0117%" height="15" fill="rgb(235,93,37)" fg:x="83" fg:w="6"/><text x="0.4118%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.01%)</title><rect x="0.1618%" y="341" width="0.0117%" height="15" fill="rgb(213,116,39)" fg:x="83" fg:w="6"/><text x="0.4118%" y="351.50"></text></g><g><title>swiftide-bench`(anonymous namespace)::CreateSessionAndLoadModel(OrtSessionOptions const*, OrtEnv const*, char const*, void const*, unsigned long, std::__1::unique_ptr&lt;onnxruntime::InferenceSession, std::__1::default_delete (27 samples, 0.05%)</title><rect x="0.1228%" y="597" width="0.0526%" height="15" fill="rgb(222,207,29)" fg:x="63" fg:w="27"/><text x="0.3728%" y="607.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.05%)</title><rect x="0.1228%" y="581" width="0.0526%" height="15" fill="rgb(206,96,30)" fg:x="63" fg:w="27"/><text x="0.3728%" y="591.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::LoadOnnxModel(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.05%)</title><rect x="0.1228%" y="565" width="0.0526%" height="15" fill="rgb(218,138,4)" fg:x="63" fg:w="27"/><text x="0.3728%" y="575.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::LoadWithLoader(std::__1::function&lt;onnxruntime::common::Status (std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;)&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.05%)</title><rect x="0.1228%" y="549" width="0.0526%" height="15" fill="rgb(250,191,14)" fg:x="63" fg:w="27"/><text x="0.3728%" y="559.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::InferenceSession::LoadOnnxModel(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;)::$_3, std::__1::allocator&lt;onnxruntime::InferenceSession::LoadOnnxModel(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;)::$_3&gt;, onnxruntime::common::Status (std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;)&gt;::operator()(std::__1::shared_ptr (26 samples, 0.05%)</title><rect x="0.1247%" y="533" width="0.0507%" height="15" fill="rgb(239,60,40)" fg:x="64" fg:w="26"/><text x="0.3747%" y="543.50"></text></g><g><title>swiftide-bench`onnxruntime::Model::Load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;, std::__1::list&lt;std::__1::shared_ptr&lt;onnxruntime::IOnnxRuntimeOpSchemaCollection&gt;, std::__1::allocator&lt;std::__1::shared_ptr (26 samples, 0.05%)</title><rect x="0.1247%" y="517" width="0.0507%" height="15" fill="rgb(206,27,48)" fg:x="64" fg:w="26"/><text x="0.3747%" y="527.50"></text></g><g><title>swiftide-bench`onnxruntime::Model::Load(int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;, std::__1::list&lt;std::__1::shared_ptr&lt;onnxruntime::IOnnxRuntimeOpSchemaCollection&gt;, std::__1::allocator&lt;std::__1::shared_ptr (26 samples, 0.05%)</title><rect x="0.1247%" y="501" width="0.0507%" height="15" fill="rgb(225,35,8)" fg:x="64" fg:w="26"/><text x="0.3747%" y="511.50"></text></g><g><title>swiftide-bench`onnxruntime::Graph::Resolve (10 samples, 0.02%)</title><rect x="0.1851%" y="517" width="0.0195%" height="15" fill="rgb(250,213,24)" fg:x="95" fg:w="10"/><text x="0.4351%" y="527.50"></text></g><g><title>swiftide-bench`onnxruntime::Graph::VerifyNodeAndOpMatch (6 samples, 0.01%)</title><rect x="0.1929%" y="501" width="0.0117%" height="15" fill="rgb(247,123,22)" fg:x="99" fg:w="6"/><text x="0.4429%" y="511.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::TransformGraph (16 samples, 0.03%)</title><rect x="0.1754%" y="565" width="0.0312%" height="15" fill="rgb(231,138,38)" fg:x="90" fg:w="16"/><text x="0.4254%" y="575.50"></text></g><g><title>swiftide-bench`onnxruntime::GraphTransformerManager::ApplyTransformers (15 samples, 0.03%)</title><rect x="0.1773%" y="549" width="0.0292%" height="15" fill="rgb(231,145,46)" fg:x="91" fg:w="15"/><text x="0.4273%" y="559.50"></text></g><g><title>swiftide-bench`onnxruntime::GraphTransformer::Apply (15 samples, 0.03%)</title><rect x="0.1773%" y="533" width="0.0292%" height="15" fill="rgb(251,118,11)" fg:x="91" fg:w="15"/><text x="0.4273%" y="543.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::GetElementSize(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.01%)</title><rect x="0.2085%" y="437" width="0.0117%" height="15" fill="rgb(217,147,25)" fg:x="107" fg:w="6"/><text x="0.4585%" y="447.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::ComputeReusePlan (8 samples, 0.02%)</title><rect x="0.2066%" y="501" width="0.0156%" height="15" fill="rgb(247,81,37)" fg:x="106" fg:w="8"/><text x="0.4566%" y="511.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::ComputeSingleStreamReusePlan (8 samples, 0.02%)</title><rect x="0.2066%" y="485" width="0.0156%" height="15" fill="rgb(209,12,38)" fg:x="106" fg:w="8"/><text x="0.4566%" y="495.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::FindReusableTensor (8 samples, 0.02%)</title><rect x="0.2066%" y="469" width="0.0156%" height="15" fill="rgb(227,1,9)" fg:x="106" fg:w="8"/><text x="0.4566%" y="479.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::SameSize (8 samples, 0.02%)</title><rect x="0.2066%" y="453" width="0.0156%" height="15" fill="rgb(248,47,43)" fg:x="106" fg:w="8"/><text x="0.4566%" y="463.50"></text></g><g><title>swiftide-bench`onnxruntime::SequentialPlanner::CreatePlan(onnxruntime::Node const*, onnxruntime::GraphViewer const&amp;, gsl::span&lt;onnxruntime::NodeArg const* const, 18446744073709551615ul&gt;, onnxruntime::ExecutionProviders const&amp;, std::__1::unordered_map&lt;unsigned long, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::unordered_map&lt;unsigned long, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, gsl::not_null&lt;onnxruntime::KernelCreateInfo const*&gt;&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (10 samples, 0.02%)</title><rect x="0.2066%" y="533" width="0.0195%" height="15" fill="rgb(221,10,30)" fg:x="106" fg:w="10"/><text x="0.4566%" y="543.50"></text></g><g><title>swiftide-bench`onnxruntime::PlannerImpl::CreatePlan(onnxruntime::IStreamCommandHandleRegistry const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.02%)</title><rect x="0.2066%" y="517" width="0.0195%" height="15" fill="rgb(210,229,1)" fg:x="106" fg:w="10"/><text x="0.4566%" y="527.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.01%)</title><rect x="0.2261%" y="485" width="0.0117%" height="15" fill="rgb(222,148,37)" fg:x="116" fg:w="6"/><text x="0.4761%" y="495.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::PrepackConstantInitializedTensors(onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned long, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, unsigned long&gt;&gt;&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, OrtValue const*, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (14 samples, 0.03%)</title><rect x="0.2261%" y="533" width="0.0273%" height="15" fill="rgb(234,67,33)" fg:x="116" fg:w="14"/><text x="0.4761%" y="543.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::PrepackConstantInitializedTensors(onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned long, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, unsigned long&gt;&gt;&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, OrtValue const*, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, OrtValue const*&gt;&gt;&gt; const&amp;)::$_2::operator() (14 samples, 0.03%)</title><rect x="0.2261%" y="517" width="0.0273%" height="15" fill="rgb(247,98,35)" fg:x="116" fg:w="14"/><text x="0.4761%" y="527.50"></text></g><g><title>swiftide-bench`onnxruntime::MatMul&lt;float&gt;::PrePack(onnxruntime::Tensor const&amp;, int, std::__1::shared_ptr (14 samples, 0.03%)</title><rect x="0.2261%" y="501" width="0.0273%" height="15" fill="rgb(247,138,52)" fg:x="116" fg:w="14"/><text x="0.4761%" y="511.50"></text></g><g><title>swiftide-bench`onnxruntime::GemmPackBFp32(std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt;&amp;, onnxruntime::Tensor const&amp;, bool, std::__1::unique_ptr&lt;void, std::__1::function&lt;void  (8 samples, 0.02%)</title><rect x="0.2378%" y="485" width="0.0156%" height="15" fill="rgb(213,79,30)" fg:x="122" fg:w="8"/><text x="0.4878%" y="495.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (8 samples, 0.02%)</title><rect x="0.2378%" y="469" width="0.0156%" height="15" fill="rgb(246,177,23)" fg:x="122" fg:w="8"/><text x="0.4878%" y="479.50"></text></g><g><title>swiftide-bench`onnxruntime::utils::TensorProtoToTensor (11 samples, 0.02%)</title><rect x="0.2534%" y="517" width="0.0214%" height="15" fill="rgb(230,62,27)" fg:x="130" fg:w="11"/><text x="0.5034%" y="527.50"></text></g><g><title>swiftide-bench`onnxruntime::(anonymous namespace)::UnpackTensorWithRawDataImpl (11 samples, 0.02%)</title><rect x="0.2534%" y="501" width="0.0214%" height="15" fill="rgb(216,154,8)" fg:x="130" fg:w="11"/><text x="0.5034%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="0.2534%" y="485" width="0.0214%" height="15" fill="rgb(244,35,45)" fg:x="130" fg:w="11"/><text x="0.5034%" y="495.50"></text></g><g><title>swiftide-bench`OrtApis::CreateSession (82 samples, 0.16%)</title><rect x="0.1228%" y="613" width="0.1598%" height="15" fill="rgb(251,115,12)" fg:x="63" fg:w="82"/><text x="0.3728%" y="623.50"></text></g><g><title>swiftide-bench`(anonymous namespace)::InitializeSession(OrtSessionOptions const*, std::__1::unique_ptr&lt;onnxruntime::InferenceSession, std::__1::default_delete (55 samples, 0.11%)</title><rect x="0.1754%" y="597" width="0.1072%" height="15" fill="rgb(240,54,50)" fg:x="90" fg:w="55"/><text x="0.4254%" y="607.50"></text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Initialize (55 samples, 0.11%)</title><rect x="0.1754%" y="581" width="0.1072%" height="15" fill="rgb(233,84,52)" fg:x="90" fg:w="55"/><text x="0.4254%" y="591.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::FinalizeSessionState(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (39 samples, 0.08%)</title><rect x="0.2066%" y="565" width="0.0760%" height="15" fill="rgb(207,117,47)" fg:x="106" fg:w="39"/><text x="0.4566%" y="575.50"></text></g><g><title>swiftide-bench`onnxruntime::SessionState::FinalizeSessionStateImpl(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, onnxruntime::KernelRegistryManager const&amp;, onnxruntime::Node const*, onnxruntime::SessionOptions const&amp;, bool, onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned long, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, unsigned long&gt;&gt;&gt;&amp;, onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, OrtDevice, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (39 samples, 0.08%)</title><rect x="0.2066%" y="549" width="0.0760%" height="15" fill="rgb(249,43,39)" fg:x="106" fg:w="39"/><text x="0.4566%" y="559.50"></text></g><g><title>swiftide-bench`onnxruntime::session_state_utils::SaveInitializedTensors(onnxruntime::Env const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, onnxruntime::GraphViewer const&amp;, std::__1::shared_ptr&lt;onnxruntime::IAllocator&gt; const&amp;, onnxruntime::OrtValueNameIdxMap const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, onnxruntime::ITensorAllocator&amp;, std::__1::function&lt;onnxruntime::common::Status (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, OrtValue const&amp;, onnxruntime::OrtCallback const&amp;, bool, bool)&gt; const&amp;, onnxruntime::logging::Logger const&amp;, onnxruntime::DataTransferManager const&amp;, onnxruntime::ExecutionPlanBase const&amp;, onnxruntime::SessionOptions const&amp;, std::__1::function&lt;void (onnxruntime::ITensorAllocator&amp;)&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::unique_ptr&lt;onnxruntime::Tensor, std::__1::default_delete (15 samples, 0.03%)</title><rect x="0.2534%" y="533" width="0.0292%" height="15" fill="rgb(209,38,44)" fg:x="130" fg:w="15"/><text x="0.5034%" y="543.50"></text></g><g><title>dyld`start (152 samples, 0.30%)</title><rect x="0.0000%" y="821" width="0.2962%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="152"/><text x="0.2500%" y="831.50"></text></g><g><title>swiftide-bench`main (149 samples, 0.29%)</title><rect x="0.0058%" y="805" width="0.2904%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="149"/><text x="0.2558%" y="815.50"></text></g><g><title>swiftide-bench`std::rt::lang_start_internal (149 samples, 0.29%)</title><rect x="0.0058%" y="789" width="0.2904%" height="15" fill="rgb(211,96,35)" fg:x="3" fg:w="149"/><text x="0.2558%" y="799.50"></text></g><g><title>swiftide-bench`std::rt::lang_start::_{{closure}} (149 samples, 0.29%)</title><rect x="0.0058%" y="773" width="0.2904%" height="15" fill="rgb(253,215,40)" fg:x="3" fg:w="149"/><text x="0.2558%" y="783.50"></text></g><g><title>swiftide-bench`std::sys::backtrace::__rust_begin_short_backtrace (149 samples, 0.29%)</title><rect x="0.0058%" y="757" width="0.2904%" height="15" fill="rgb(211,81,21)" fg:x="3" fg:w="149"/><text x="0.2558%" y="767.50"></text></g><g><title>swiftide-bench`swiftide_bench::main (149 samples, 0.29%)</title><rect x="0.0058%" y="741" width="0.2904%" height="15" fill="rgb(208,190,38)" fg:x="3" fg:w="149"/><text x="0.2558%" y="751.50"></text></g><g><title>swiftide-bench`tokio::runtime::runtime::Runtime::block_on (149 samples, 0.29%)</title><rect x="0.0058%" y="725" width="0.2904%" height="15" fill="rgb(235,213,38)" fg:x="3" fg:w="149"/><text x="0.2558%" y="735.50"></text></g><g><title>swiftide-bench`tokio::runtime::context::runtime::enter_runtime (149 samples, 0.29%)</title><rect x="0.0058%" y="709" width="0.2904%" height="15" fill="rgb(237,122,38)" fg:x="3" fg:w="149"/><text x="0.2558%" y="719.50"></text></g><g><title>swiftide-bench`tokio::runtime::park::CachedParkThread::block_on (149 samples, 0.29%)</title><rect x="0.0058%" y="693" width="0.2904%" height="15" fill="rgb(244,218,35)" fg:x="3" fg:w="149"/><text x="0.2558%" y="703.50"></text></g><g><title>swiftide-bench`swiftide_bench::build_embedding_model (96 samples, 0.19%)</title><rect x="0.1091%" y="677" width="0.1871%" height="15" fill="rgb(240,68,47)" fg:x="56" fg:w="96"/><text x="0.3591%" y="687.50"></text></g><g><title>swiftide-bench`swiftide_integrations::fastembed::FastEmbedBuilder::build (96 samples, 0.19%)</title><rect x="0.1091%" y="661" width="0.1871%" height="15" fill="rgb(210,16,53)" fg:x="56" fg:w="96"/><text x="0.3591%" y="671.50"></text></g><g><title>swiftide-bench`fastembed::text_embedding::impl::_&lt;impl fastembed::text_embedding::init::TextEmbedding&gt;::try_new (96 samples, 0.19%)</title><rect x="0.1091%" y="645" width="0.1871%" height="15" fill="rgb(235,124,12)" fg:x="56" fg:w="96"/><text x="0.3591%" y="655.50"></text></g><g><title>swiftide-bench`ort::session::builder::SessionBuilder::commit_from_file (89 samples, 0.17%)</title><rect x="0.1228%" y="629" width="0.1734%" height="15" fill="rgb(224,169,11)" fg:x="63" fg:w="89"/><text x="0.3728%" y="639.50"></text></g><g><title>swiftide-bench`ort::environment::get_environment (7 samples, 0.01%)</title><rect x="0.2826%" y="613" width="0.0136%" height="15" fill="rgb(250,166,2)" fg:x="145" fg:w="7"/><text x="0.5326%" y="623.50"></text></g><g><title>swiftide-bench`ort::environment::EnvironmentBuilder::commit (7 samples, 0.01%)</title><rect x="0.2826%" y="597" width="0.0136%" height="15" fill="rgb(242,216,29)" fg:x="145" fg:w="7"/><text x="0.5326%" y="607.50"></text></g><g><title>swiftide-bench`OrtApis::CreateEnvWithCustomLogger(void (*) (7 samples, 0.01%)</title><rect x="0.2826%" y="581" width="0.0136%" height="15" fill="rgb(230,116,27)" fg:x="145" fg:w="7"/><text x="0.5326%" y="591.50"></text></g><g><title>swiftide-bench`OrtEnv::GetInstance (7 samples, 0.01%)</title><rect x="0.2826%" y="565" width="0.0136%" height="15" fill="rgb(228,99,48)" fg:x="145" fg:w="7"/><text x="0.5326%" y="575.50"></text></g><g><title>swiftide-bench`onnxruntime::Environment::Create(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete&lt;onnxruntime::logging::LoggingManager&gt;&gt;, std::__1::unique_ptr&lt;onnxruntime::Environment, std::__1::default_delete (7 samples, 0.01%)</title><rect x="0.2826%" y="549" width="0.0136%" height="15" fill="rgb(253,11,6)" fg:x="145" fg:w="7"/><text x="0.5326%" y="559.50"></text></g><g><title>swiftide-bench`onnxruntime::Environment::Initialize(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete (7 samples, 0.01%)</title><rect x="0.2826%" y="533" width="0.0136%" height="15" fill="rgb(247,143,39)" fg:x="145" fg:w="7"/><text x="0.5326%" y="543.50"></text></g><g><title>libc++.1.dylib`std::__1::__call_once(unsigned long volatile&amp;, void*, void (*) (7 samples, 0.01%)</title><rect x="0.2826%" y="517" width="0.0136%" height="15" fill="rgb(236,97,10)" fg:x="145" fg:w="7"/><text x="0.5326%" y="527.50"></text></g><g><title>swiftide-bench`void std::__1::__call_once_proxy[abi:v160006]&lt;std::__1::tuple&lt;onnxruntime::Environment::Initialize(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete&lt;onnxruntime::logging::LoggingManager&gt;&gt;, OrtThreadingOptions const*, bool)::$_5&amp;&amp;&gt;&gt; (7 samples, 0.01%)</title><rect x="0.2826%" y="501" width="0.0136%" height="15" fill="rgb(233,208,19)" fg:x="145" fg:w="7"/><text x="0.5326%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__exit (6 samples, 0.01%)</title><rect x="0.2962%" y="821" width="0.0117%" height="15" fill="rgb(216,164,2)" fg:x="152" fg:w="6"/><text x="0.5462%" y="831.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.03%)</title><rect x="7.5168%" y="709" width="0.0312%" height="15" fill="rgb(220,129,5)" fg:x="3857" fg:w="16"/><text x="7.7668%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (42 samples, 0.08%)</title><rect x="7.5479%" y="709" width="0.0819%" height="15" fill="rgb(242,17,10)" fg:x="3873" fg:w="42"/><text x="7.7979%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::strided_copy_detail::NdCounter::Step (14 samples, 0.03%)</title><rect x="7.6298%" y="709" width="0.0273%" height="15" fill="rgb(242,107,0)" fg:x="3915" fg:w="14"/><text x="7.8798%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (324 samples, 0.63%)</title><rect x="7.6571%" y="693" width="0.6314%" height="15" fill="rgb(251,28,31)" fg:x="3929" fg:w="324"/><text x="7.9071%" y="703.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (9 samples, 0.02%)</title><rect x="8.2885%" y="693" width="0.0175%" height="15" fill="rgb(233,223,10)" fg:x="4253" fg:w="9"/><text x="8.5385%" y="703.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259&gt;, void (long, long)&gt;::operator() (342 samples, 0.67%)</title><rect x="7.6571%" y="709" width="0.6665%" height="15" fill="rgb(215,21,27)" fg:x="3929" fg:w="342"/><text x="7.9071%" y="719.50"></text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (9 samples, 0.02%)</title><rect x="8.3060%" y="693" width="0.0175%" height="15" fill="rgb(232,23,21)" fg:x="4262" fg:w="9"/><text x="8.5560%" y="703.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmaxThreaded(void*, long) (256 samples, 0.50%)</title><rect x="8.3236%" y="693" width="0.4989%" height="15" fill="rgb(244,5,23)" fg:x="4271" fg:w="256"/><text x="8.5736%" y="703.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::(anonymous namespace)::ComputeImpl&lt;float, float&gt;(onnxruntime::OpKernelContext*, long long, float, bool)::&apos;lambda&apos;(long)::operator() (60 samples, 0.12%)</title><rect x="8.8225%" y="693" width="0.1169%" height="15" fill="rgb(226,81,46)" fg:x="4527" fg:w="60"/><text x="9.0725%" y="703.50"></text></g><g><title>swiftide-bench`.LAdd.Compute16.x4.BlockBy4Loop (1,505 samples, 2.93%)</title><rect x="8.9394%" y="661" width="2.9330%" height="15" fill="rgb(247,70,30)" fg:x="4587" fg:w="1505"/><text x="9.1894%" y="671.50">sw..</text></g><g><title>swiftide-bench`.LAdd.Output16.x4.Block (9 samples, 0.02%)</title><rect x="11.8744%" y="661" width="0.0175%" height="15" fill="rgb(212,68,19)" fg:x="6093" fg:w="9"/><text x="12.1244%" y="671.50"></text></g><g><title>swiftide-bench`.LAdd.ProcessNextColumnLoop16x4 (10 samples, 0.02%)</title><rect x="11.8920%" y="661" width="0.0195%" height="15" fill="rgb(240,187,13)" fg:x="6102" fg:w="10"/><text x="12.1420%" y="671.50"></text></g><g><title>swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop (2,049 samples, 3.99%)</title><rect x="11.9173%" y="661" width="3.9932%" height="15" fill="rgb(223,113,26)" fg:x="6115" fg:w="2049"/><text x="12.1673%" y="671.50">swif..</text></g><g><title>swiftide-bench`.LZero.Output16.x4.Block (56 samples, 0.11%)</title><rect x="15.9105%" y="661" width="0.1091%" height="15" fill="rgb(206,192,2)" fg:x="8164" fg:w="56"/><text x="16.1605%" y="671.50"></text></g><g><title>swiftide-bench`.LZero.ProcessNextColumnLoop16x4 (21 samples, 0.04%)</title><rect x="16.0196%" y="661" width="0.0409%" height="15" fill="rgb(241,108,4)" fg:x="8220" fg:w="21"/><text x="16.2696%" y="671.50"></text></g><g><title>swiftide-bench`.LZero.ProcessRemaining16.x4.Blocks (6 samples, 0.01%)</title><rect x="16.0606%" y="661" width="0.0117%" height="15" fill="rgb(247,173,49)" fg:x="8241" fg:w="6"/><text x="16.3106%" y="671.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (12 samples, 0.02%)</title><rect x="16.0723%" y="661" width="0.0234%" height="15" fill="rgb(224,114,35)" fg:x="8247" fg:w="12"/><text x="16.3223%" y="671.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (3,674 samples, 7.16%)</title><rect x="8.9394%" y="693" width="7.1601%" height="15" fill="rgb(245,159,27)" fg:x="4587" fg:w="3674"/><text x="9.1894%" y="703.50">swiftide-b..</text></g><g><title>swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (3,674 samples, 7.16%)</title><rect x="8.9394%" y="677" width="7.1601%" height="15" fill="rgb(245,172,44)" fg:x="4587" fg:w="3674"/><text x="9.1894%" y="687.50">swiftide-b..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (4,169 samples, 8.12%)</title><rect x="8.3236%" y="709" width="8.1248%" height="15" fill="rgb(236,23,11)" fg:x="4271" fg:w="4169"/><text x="8.5736%" y="719.50">swiftide-be..</text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&amp;&amp;, long)::&apos;lambda&apos;(long)::operator() (179 samples, 0.35%)</title><rect x="16.0995%" y="693" width="0.3488%" height="15" fill="rgb(205,117,38)" fg:x="8261" fg:w="179"/><text x="16.3495%" y="703.50"></text></g><g><title>swiftide-bench`MlasErfKernel (134 samples, 0.26%)</title><rect x="16.1872%" y="677" width="0.2611%" height="15" fill="rgb(237,72,25)" fg:x="8306" fg:w="134"/><text x="16.4372%" y="687.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallelInternal(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, unsigned int, bool, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;()::operator() (4,615 samples, 8.99%)</title><rect x="7.5129%" y="741" width="8.9940%" height="15" fill="rgb(244,70,9)" fg:x="3855" fg:w="4615"/><text x="7.7629%" y="751.50">swiftide-benc..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (4,614 samples, 8.99%)</title><rect x="7.5148%" y="725" width="8.9920%" height="15" fill="rgb(217,125,39)" fg:x="3856" fg:w="4614"/><text x="7.7648%" y="735.50">swiftide-benc..</text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;)::&apos;lambda0&apos;(long, long)::operator() (30 samples, 0.06%)</title><rect x="16.4484%" y="709" width="0.0585%" height="15" fill="rgb(235,36,10)" fg:x="8440" fg:w="30"/><text x="16.6984%" y="719.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (182 samples, 0.35%)</title><rect x="16.5225%" y="709" width="0.3547%" height="15" fill="rgb(251,123,47)" fg:x="8478" fg:w="182"/><text x="16.7725%" y="719.50"></text></g><g><title>swiftide-bench`DYLD-STUB$$memcpy (11 samples, 0.02%)</title><rect x="16.8771%" y="709" width="0.0214%" height="15" fill="rgb(221,13,13)" fg:x="8660" fg:w="11"/><text x="17.1271%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (329 samples, 0.64%)</title><rect x="16.8986%" y="709" width="0.6412%" height="15" fill="rgb(238,131,9)" fg:x="8671" fg:w="329"/><text x="17.1486%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::strided_copy_detail::NdCounter::Step (148 samples, 0.29%)</title><rect x="17.5437%" y="709" width="0.2884%" height="15" fill="rgb(211,50,8)" fg:x="9002" fg:w="148"/><text x="17.7937%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (2,576 samples, 5.02%)</title><rect x="17.8321%" y="693" width="5.0203%" height="15" fill="rgb(245,182,24)" fg:x="9150" fg:w="2576"/><text x="18.0821%" y="703.50">swifti..</text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (79 samples, 0.15%)</title><rect x="22.8524%" y="693" width="0.1540%" height="15" fill="rgb(242,14,37)" fg:x="11726" fg:w="79"/><text x="23.1024%" y="703.50"></text></g><g><title>swiftide-bench`onnxruntime::InputBroadcaster::AdvanceBy (12 samples, 0.02%)</title><rect x="23.0122%" y="693" width="0.0234%" height="15" fill="rgb(246,228,12)" fg:x="11808" fg:w="12"/><text x="23.2622%" y="703.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (66 samples, 0.13%)</title><rect x="23.0804%" y="677" width="0.1286%" height="15" fill="rgb(213,55,15)" fg:x="11843" fg:w="66"/><text x="23.3304%" y="687.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259&gt;, void (long, long)&gt;::operator() (2,788 samples, 5.43%)</title><rect x="17.8321%" y="709" width="5.4334%" height="15" fill="rgb(209,9,3)" fg:x="9150" fg:w="2788"/><text x="18.0821%" y="719.50">swiftid..</text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (116 samples, 0.23%)</title><rect x="23.0394%" y="693" width="0.2261%" height="15" fill="rgb(230,59,30)" fg:x="11822" fg:w="116"/><text x="23.2894%" y="703.50"></text></g><g><title>swiftide-bench`onnxruntime::InputBroadcaster::AdvanceBy (29 samples, 0.06%)</title><rect x="23.2090%" y="677" width="0.0565%" height="15" fill="rgb(209,121,21)" fg:x="11909" fg:w="29"/><text x="23.4590%" y="687.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmaxThreaded(void*, long) (2,056 samples, 4.01%)</title><rect x="23.2655%" y="693" width="4.0069%" height="15" fill="rgb(220,109,13)" fg:x="11938" fg:w="2056"/><text x="23.5155%" y="703.50">swif..</text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::(anonymous namespace)::ComputeImpl&lt;float, float&gt;(onnxruntime::OpKernelContext*, long long, float, bool)::&apos;lambda&apos;(long)::operator() (533 samples, 1.04%)</title><rect x="27.2763%" y="693" width="1.0387%" height="15" fill="rgb(232,18,1)" fg:x="13996" fg:w="533"/><text x="27.5263%" y="703.50"></text></g><g><title>swiftide-bench`.LAdd.Compute16.x4.BlockBy4Loop (11,904 samples, 23.20%)</title><rect x="28.3150%" y="661" width="23.1993%" height="15" fill="rgb(215,41,42)" fg:x="14529" fg:w="11904"/><text x="28.5650%" y="671.50">swiftide-bench`.LAdd.Compute16.x4.Blo..</text></g><g><title>swiftide-bench`.LAdd.Output16.x4.Block (105 samples, 0.20%)</title><rect x="51.5201%" y="661" width="0.2046%" height="15" fill="rgb(224,123,36)" fg:x="26436" fg:w="105"/><text x="51.7701%" y="671.50"></text></g><g><title>swiftide-bench`.LAdd.ProcessNextColumnLoop16x4 (65 samples, 0.13%)</title><rect x="51.7247%" y="661" width="0.1267%" height="15" fill="rgb(240,125,3)" fg:x="26541" fg:w="65"/><text x="51.9747%" y="671.50"></text></g><g><title>swiftide-bench`.LAdd.ProcessRemaining16.x4.Blocks (21 samples, 0.04%)</title><rect x="51.8514%" y="661" width="0.0409%" height="15" fill="rgb(205,98,50)" fg:x="26606" fg:w="21"/><text x="52.1014%" y="671.50"></text></g><g><title>swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop (16,417 samples, 31.99%)</title><rect x="51.8923%" y="661" width="31.9945%" height="15" fill="rgb(205,185,37)" fg:x="26627" fg:w="16417"/><text x="52.1423%" y="671.50">swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop</text></g><g><title>swiftide-bench`.LZero.Output16.x4.Block (346 samples, 0.67%)</title><rect x="83.8946%" y="661" width="0.6743%" height="15" fill="rgb(238,207,15)" fg:x="43048" fg:w="346"/><text x="84.1446%" y="671.50"></text></g><g><title>swiftide-bench`.LZero.ProcessNextColumnLoop16x4 (121 samples, 0.24%)</title><rect x="84.5689%" y="661" width="0.2358%" height="15" fill="rgb(213,199,42)" fg:x="43394" fg:w="121"/><text x="84.8189%" y="671.50"></text></g><g><title>swiftide-bench`.LZero.ProcessRemaining16.x4.Blocks (42 samples, 0.08%)</title><rect x="84.8047%" y="661" width="0.0819%" height="15" fill="rgb(235,201,11)" fg:x="43515" fg:w="42"/><text x="85.0547%" y="671.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (111 samples, 0.22%)</title><rect x="84.8866%" y="661" width="0.2163%" height="15" fill="rgb(207,46,11)" fg:x="43557" fg:w="111"/><text x="85.1366%" y="671.50"></text></g><g><title>swiftide-bench`MlasSgemmKernelZero (8 samples, 0.02%)</title><rect x="85.1068%" y="661" width="0.0156%" height="15" fill="rgb(241,35,35)" fg:x="43670" fg:w="8"/><text x="85.3568%" y="671.50"></text></g><g><title>swiftide-bench`MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long) (7 samples, 0.01%)</title><rect x="85.1224%" y="661" width="0.0136%" height="15" fill="rgb(243,32,47)" fg:x="43678" fg:w="7"/><text x="85.3724%" y="671.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (29,162 samples, 56.83%)</title><rect x="28.3150%" y="693" width="56.8327%" height="15" fill="rgb(247,202,23)" fg:x="14529" fg:w="29162"/><text x="28.5650%" y="703.50">swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, un..</text></g><g><title>swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (29,162 samples, 56.83%)</title><rect x="28.3150%" y="677" width="56.8327%" height="15" fill="rgb(219,102,11)" fg:x="14529" fg:w="29162"/><text x="28.5650%" y="687.50">swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, ..</text></g><g><title>swiftide-bench`MlasSgemmPackedOperation(CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, void const*, unsigned long, float, float*, unsigned long) (6 samples, 0.01%)</title><rect x="85.1360%" y="661" width="0.0117%" height="15" fill="rgb(243,110,44)" fg:x="43685" fg:w="6"/><text x="85.3860%" y="671.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (33,074 samples, 64.46%)</title><rect x="23.2655%" y="709" width="64.4567%" height="15" fill="rgb(222,74,54)" fg:x="11938" fg:w="33074"/><text x="23.5155%" y="719.50">swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, s..</text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&amp;&amp;, long)::&apos;lambda&apos;(long)::operator() (1,321 samples, 2.57%)</title><rect x="85.1477%" y="693" width="2.5744%" height="15" fill="rgb(216,99,12)" fg:x="43691" fg:w="1321"/><text x="85.3977%" y="703.50">sw..</text></g><g><title>swiftide-bench`MlasErfKernel (1,013 samples, 1.97%)</title><rect x="85.7480%" y="677" width="1.9742%" height="15" fill="rgb(226,22,26)" fg:x="43999" fg:w="1013"/><text x="85.9980%" y="687.50">s..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (36,707 samples, 71.54%)</title><rect x="16.5166%" y="725" width="71.5369%" height="15" fill="rgb(217,163,10)" fg:x="8475" fg:w="36707"/><text x="16.7666%" y="735.50">swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(l..</text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;)::&apos;lambda0&apos;(long, long)::operator() (170 samples, 0.33%)</title><rect x="87.7222%" y="709" width="0.3313%" height="15" fill="rgb(213,25,53)" fg:x="45012" fg:w="170"/><text x="87.9722%" y="719.50"></text></g><g><title>swiftide-bench`onnxruntime::(anonymous namespace)::PosixThread::ThreadMain (45,025 samples, 87.75%)</title><rect x="0.3079%" y="789" width="87.7475%" height="15" fill="rgb(252,105,26)" fg:x="158" fg:w="45025"/><text x="0.5579%" y="799.50">swiftide-bench`onnxruntime::(anonymous namespace)::PosixThread::ThreadMain</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop (45,025 samples, 87.75%)</title><rect x="0.3079%" y="773" width="87.7475%" height="15" fill="rgb(220,39,43)" fg:x="158" fg:w="45025"/><text x="0.5579%" y="783.50">swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop (45,025 samples, 87.75%)</title><rect x="0.3079%" y="757" width="87.7475%" height="15" fill="rgb(229,68,48)" fg:x="158" fg:w="45025"/><text x="0.5579%" y="767.50">swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;(), std::__1::allocator&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;()&gt;, void ()&gt;::operator() (36,708 samples, 71.54%)</title><rect x="16.5166%" y="741" width="71.5388%" height="15" fill="rgb(252,8,32)" fg:x="8475" fg:w="36708"/><text x="16.7666%" y="751.50">swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPref..</text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="88.0613%" y="517" width="0.0117%" height="15" fill="rgb(223,20,43)" fg:x="45186" fg:w="6"/><text x="88.3113%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.0613%" y="501" width="0.0117%" height="15" fill="rgb(229,81,49)" fg:x="45186" fg:w="6"/><text x="88.3113%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.0613%" y="485" width="0.0117%" height="15" fill="rgb(236,28,36)" fg:x="45186" fg:w="6"/><text x="88.3113%" y="495.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="88.0613%" y="469" width="0.0117%" height="15" fill="rgb(249,185,26)" fg:x="45186" fg:w="6"/><text x="88.3113%" y="479.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="88.0613%" y="453" width="0.0117%" height="15" fill="rgb(249,174,33)" fg:x="45186" fg:w="6"/><text x="88.3113%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::lowercase (6 samples, 0.01%)</title><rect x="88.0730%" y="517" width="0.0117%" height="15" fill="rgb(233,201,37)" fg:x="45192" fg:w="6"/><text x="88.3230%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.0730%" y="501" width="0.0117%" height="15" fill="rgb(221,78,26)" fg:x="45192" fg:w="6"/><text x="88.3230%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.0730%" y="485" width="0.0117%" height="15" fill="rgb(250,127,30)" fg:x="45192" fg:w="6"/><text x="88.3230%" y="495.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (20 samples, 0.04%)</title><rect x="88.0613%" y="549" width="0.0390%" height="15" fill="rgb(230,49,44)" fg:x="45186" fg:w="20"/><text x="88.3113%" y="559.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (20 samples, 0.04%)</title><rect x="88.0613%" y="533" width="0.0390%" height="15" fill="rgb(229,67,23)" fg:x="45186" fg:w="20"/><text x="88.3113%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (21 samples, 0.04%)</title><rect x="88.0613%" y="581" width="0.0409%" height="15" fill="rgb(249,83,47)" fg:x="45186" fg:w="21"/><text x="88.3113%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (21 samples, 0.04%)</title><rect x="88.0613%" y="565" width="0.0409%" height="15" fill="rgb(215,43,3)" fg:x="45186" fg:w="21"/><text x="88.3113%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (27 samples, 0.05%)</title><rect x="88.0574%" y="597" width="0.0526%" height="15" fill="rgb(238,154,13)" fg:x="45184" fg:w="27"/><text x="88.3074%" y="607.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (29 samples, 0.06%)</title><rect x="88.0554%" y="629" width="0.0565%" height="15" fill="rgb(219,56,2)" fg:x="45183" fg:w="29"/><text x="88.3054%" y="639.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (29 samples, 0.06%)</title><rect x="88.0554%" y="613" width="0.0565%" height="15" fill="rgb(233,0,4)" fg:x="45183" fg:w="29"/><text x="88.3054%" y="623.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (6 samples, 0.01%)</title><rect x="88.1295%" y="373" width="0.0117%" height="15" fill="rgb(235,30,7)" fg:x="45221" fg:w="6"/><text x="88.3795%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (14 samples, 0.03%)</title><rect x="88.1158%" y="469" width="0.0273%" height="15" fill="rgb(250,79,13)" fg:x="45214" fg:w="14"/><text x="88.3658%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (13 samples, 0.03%)</title><rect x="88.1178%" y="453" width="0.0253%" height="15" fill="rgb(211,146,34)" fg:x="45215" fg:w="13"/><text x="88.3678%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (13 samples, 0.03%)</title><rect x="88.1178%" y="437" width="0.0253%" height="15" fill="rgb(228,22,38)" fg:x="45215" fg:w="13"/><text x="88.3678%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.02%)</title><rect x="88.1217%" y="421" width="0.0214%" height="15" fill="rgb(235,168,5)" fg:x="45217" fg:w="11"/><text x="88.3717%" y="431.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (8 samples, 0.02%)</title><rect x="88.1275%" y="405" width="0.0156%" height="15" fill="rgb(221,155,16)" fg:x="45220" fg:w="8"/><text x="88.3775%" y="415.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (8 samples, 0.02%)</title><rect x="88.1275%" y="389" width="0.0156%" height="15" fill="rgb(215,215,53)" fg:x="45220" fg:w="8"/><text x="88.3775%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (7 samples, 0.01%)</title><rect x="88.1724%" y="389" width="0.0136%" height="15" fill="rgb(223,4,10)" fg:x="45243" fg:w="7"/><text x="88.4224%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.02%)</title><rect x="88.1665%" y="437" width="0.0214%" height="15" fill="rgb(234,103,6)" fg:x="45240" fg:w="11"/><text x="88.4165%" y="447.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (9 samples, 0.02%)</title><rect x="88.1704%" y="421" width="0.0175%" height="15" fill="rgb(227,97,0)" fg:x="45242" fg:w="9"/><text x="88.4204%" y="431.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (8 samples, 0.02%)</title><rect x="88.1724%" y="405" width="0.0156%" height="15" fill="rgb(234,150,53)" fg:x="45243" fg:w="8"/><text x="88.4224%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (14 samples, 0.03%)</title><rect x="88.1626%" y="469" width="0.0273%" height="15" fill="rgb(228,201,54)" fg:x="45238" fg:w="14"/><text x="88.4126%" y="479.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (14 samples, 0.03%)</title><rect x="88.1626%" y="453" width="0.0273%" height="15" fill="rgb(222,22,37)" fg:x="45238" fg:w="14"/><text x="88.4126%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (40 samples, 0.08%)</title><rect x="88.1158%" y="533" width="0.0780%" height="15" fill="rgb(237,53,32)" fg:x="45214" fg:w="40"/><text x="88.3658%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (40 samples, 0.08%)</title><rect x="88.1158%" y="517" width="0.0780%" height="15" fill="rgb(233,25,53)" fg:x="45214" fg:w="40"/><text x="88.3658%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (40 samples, 0.08%)</title><rect x="88.1158%" y="501" width="0.0780%" height="15" fill="rgb(210,40,34)" fg:x="45214" fg:w="40"/><text x="88.3658%" y="511.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (40 samples, 0.08%)</title><rect x="88.1158%" y="485" width="0.0780%" height="15" fill="rgb(241,220,44)" fg:x="45214" fg:w="40"/><text x="88.3658%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (6 samples, 0.01%)</title><rect x="88.1996%" y="533" width="0.0117%" height="15" fill="rgb(235,28,35)" fg:x="45257" fg:w="6"/><text x="88.4496%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (52 samples, 0.10%)</title><rect x="88.1119%" y="549" width="0.1013%" height="15" fill="rgb(210,56,17)" fg:x="45212" fg:w="52"/><text x="88.3619%" y="559.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (53 samples, 0.10%)</title><rect x="88.1119%" y="581" width="0.1033%" height="15" fill="rgb(224,130,29)" fg:x="45212" fg:w="53"/><text x="88.3619%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (53 samples, 0.10%)</title><rect x="88.1119%" y="565" width="0.1033%" height="15" fill="rgb(235,212,8)" fg:x="45212" fg:w="53"/><text x="88.3619%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="88.2172%" y="421" width="0.0136%" height="15" fill="rgb(223,33,50)" fg:x="45266" fg:w="7"/><text x="88.4672%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="88.2172%" y="405" width="0.0136%" height="15" fill="rgb(219,149,13)" fg:x="45266" fg:w="7"/><text x="88.4672%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="88.2172%" y="389" width="0.0136%" height="15" fill="rgb(250,156,29)" fg:x="45266" fg:w="7"/><text x="88.4672%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="88.2191%" y="373" width="0.0117%" height="15" fill="rgb(216,193,19)" fg:x="45267" fg:w="6"/><text x="88.4691%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="88.2484%" y="421" width="0.0136%" height="15" fill="rgb(216,135,14)" fg:x="45282" fg:w="7"/><text x="88.4984%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="88.2484%" y="405" width="0.0136%" height="15" fill="rgb(241,47,5)" fg:x="45282" fg:w="7"/><text x="88.4984%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="88.2503%" y="389" width="0.0117%" height="15" fill="rgb(233,42,35)" fg:x="45283" fg:w="6"/><text x="88.5003%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (24 samples, 0.05%)</title><rect x="88.2172%" y="485" width="0.0468%" height="15" fill="rgb(231,13,6)" fg:x="45266" fg:w="24"/><text x="88.4672%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (24 samples, 0.05%)</title><rect x="88.2172%" y="469" width="0.0468%" height="15" fill="rgb(207,181,40)" fg:x="45266" fg:w="24"/><text x="88.4672%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (24 samples, 0.05%)</title><rect x="88.2172%" y="453" width="0.0468%" height="15" fill="rgb(254,173,49)" fg:x="45266" fg:w="24"/><text x="88.4672%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (24 samples, 0.05%)</title><rect x="88.2172%" y="437" width="0.0468%" height="15" fill="rgb(221,1,38)" fg:x="45266" fg:w="24"/><text x="88.4672%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (32 samples, 0.06%)</title><rect x="88.2152%" y="533" width="0.0624%" height="15" fill="rgb(206,124,46)" fg:x="45265" fg:w="32"/><text x="88.4652%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (32 samples, 0.06%)</title><rect x="88.2152%" y="517" width="0.0624%" height="15" fill="rgb(249,21,11)" fg:x="45265" fg:w="32"/><text x="88.4652%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (31 samples, 0.06%)</title><rect x="88.2172%" y="501" width="0.0604%" height="15" fill="rgb(222,201,40)" fg:x="45266" fg:w="31"/><text x="88.4672%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (9 samples, 0.02%)</title><rect x="88.2815%" y="437" width="0.0175%" height="15" fill="rgb(235,61,29)" fg:x="45299" fg:w="9"/><text x="88.5315%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (9 samples, 0.02%)</title><rect x="88.2815%" y="421" width="0.0175%" height="15" fill="rgb(219,207,3)" fg:x="45299" fg:w="9"/><text x="88.5315%" y="431.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (9 samples, 0.02%)</title><rect x="88.2815%" y="405" width="0.0175%" height="15" fill="rgb(222,56,46)" fg:x="45299" fg:w="9"/><text x="88.5315%" y="415.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (9 samples, 0.02%)</title><rect x="88.2815%" y="389" width="0.0175%" height="15" fill="rgb(239,76,54)" fg:x="45299" fg:w="9"/><text x="88.5315%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.03%)</title><rect x="88.2776%" y="485" width="0.0273%" height="15" fill="rgb(231,124,27)" fg:x="45297" fg:w="14"/><text x="88.5276%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (14 samples, 0.03%)</title><rect x="88.2776%" y="469" width="0.0273%" height="15" fill="rgb(249,195,6)" fg:x="45297" fg:w="14"/><text x="88.5276%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (14 samples, 0.03%)</title><rect x="88.2776%" y="453" width="0.0273%" height="15" fill="rgb(237,174,47)" fg:x="45297" fg:w="14"/><text x="88.5276%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (10 samples, 0.02%)</title><rect x="88.3068%" y="389" width="0.0195%" height="15" fill="rgb(206,201,31)" fg:x="45312" fg:w="10"/><text x="88.5568%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (10 samples, 0.02%)</title><rect x="88.3068%" y="373" width="0.0195%" height="15" fill="rgb(231,57,52)" fg:x="45312" fg:w="10"/><text x="88.5568%" y="383.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (10 samples, 0.02%)</title><rect x="88.3068%" y="357" width="0.0195%" height="15" fill="rgb(248,177,22)" fg:x="45312" fg:w="10"/><text x="88.5568%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (10 samples, 0.02%)</title><rect x="88.3068%" y="341" width="0.0195%" height="15" fill="rgb(215,211,37)" fg:x="45312" fg:w="10"/><text x="88.5568%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (12 samples, 0.02%)</title><rect x="88.3049%" y="405" width="0.0234%" height="15" fill="rgb(241,128,51)" fg:x="45311" fg:w="12"/><text x="88.5549%" y="415.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (13 samples, 0.03%)</title><rect x="88.3049%" y="453" width="0.0253%" height="15" fill="rgb(227,165,31)" fg:x="45311" fg:w="13"/><text x="88.5549%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.03%)</title><rect x="88.3049%" y="437" width="0.0253%" height="15" fill="rgb(228,167,24)" fg:x="45311" fg:w="13"/><text x="88.5549%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (13 samples, 0.03%)</title><rect x="88.3049%" y="421" width="0.0253%" height="15" fill="rgb(228,143,12)" fg:x="45311" fg:w="13"/><text x="88.5549%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (8 samples, 0.02%)</title><rect x="88.3322%" y="373" width="0.0156%" height="15" fill="rgb(249,149,8)" fg:x="45325" fg:w="8"/><text x="88.5822%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (7 samples, 0.01%)</title><rect x="88.3341%" y="357" width="0.0136%" height="15" fill="rgb(243,35,44)" fg:x="45326" fg:w="7"/><text x="88.5841%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="88.3341%" y="341" width="0.0136%" height="15" fill="rgb(246,89,9)" fg:x="45326" fg:w="7"/><text x="88.5841%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="88.3341%" y="325" width="0.0136%" height="15" fill="rgb(233,213,13)" fg:x="45326" fg:w="7"/><text x="88.5841%" y="335.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (37 samples, 0.07%)</title><rect x="88.2776%" y="501" width="0.0721%" height="15" fill="rgb(233,141,41)" fg:x="45297" fg:w="37"/><text x="88.5276%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (23 samples, 0.04%)</title><rect x="88.3049%" y="485" width="0.0448%" height="15" fill="rgb(239,167,4)" fg:x="45311" fg:w="23"/><text x="88.5549%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (23 samples, 0.04%)</title><rect x="88.3049%" y="469" width="0.0448%" height="15" fill="rgb(209,217,16)" fg:x="45311" fg:w="23"/><text x="88.5549%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (10 samples, 0.02%)</title><rect x="88.3302%" y="453" width="0.0195%" height="15" fill="rgb(219,88,35)" fg:x="45324" fg:w="10"/><text x="88.5802%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.02%)</title><rect x="88.3302%" y="437" width="0.0195%" height="15" fill="rgb(220,193,23)" fg:x="45324" fg:w="10"/><text x="88.5802%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.02%)</title><rect x="88.3302%" y="421" width="0.0195%" height="15" fill="rgb(230,90,52)" fg:x="45324" fg:w="10"/><text x="88.5802%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (10 samples, 0.02%)</title><rect x="88.3302%" y="405" width="0.0195%" height="15" fill="rgb(252,106,19)" fg:x="45324" fg:w="10"/><text x="88.5802%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (10 samples, 0.02%)</title><rect x="88.3302%" y="389" width="0.0195%" height="15" fill="rgb(206,74,20)" fg:x="45324" fg:w="10"/><text x="88.5802%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="88.3497%" y="309" width="0.0117%" height="15" fill="rgb(230,138,44)" fg:x="45334" fg:w="6"/><text x="88.5997%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.3497%" y="293" width="0.0117%" height="15" fill="rgb(235,182,43)" fg:x="45334" fg:w="6"/><text x="88.5997%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.3497%" y="277" width="0.0117%" height="15" fill="rgb(242,16,51)" fg:x="45334" fg:w="6"/><text x="88.5997%" y="287.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (17 samples, 0.03%)</title><rect x="88.3497%" y="341" width="0.0331%" height="15" fill="rgb(248,9,4)" fg:x="45334" fg:w="17"/><text x="88.5997%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (17 samples, 0.03%)</title><rect x="88.3497%" y="325" width="0.0331%" height="15" fill="rgb(210,31,22)" fg:x="45334" fg:w="17"/><text x="88.5997%" y="335.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.3711%" y="309" width="0.0117%" height="15" fill="rgb(239,54,39)" fg:x="45345" fg:w="6"/><text x="88.6211%" y="319.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.3711%" y="293" width="0.0117%" height="15" fill="rgb(230,99,41)" fg:x="45345" fg:w="6"/><text x="88.6211%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (18 samples, 0.04%)</title><rect x="88.3497%" y="373" width="0.0351%" height="15" fill="rgb(253,106,12)" fg:x="45334" fg:w="18"/><text x="88.5997%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (18 samples, 0.04%)</title><rect x="88.3497%" y="357" width="0.0351%" height="15" fill="rgb(213,46,41)" fg:x="45334" fg:w="18"/><text x="88.5997%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (23 samples, 0.04%)</title><rect x="88.3497%" y="389" width="0.0448%" height="15" fill="rgb(215,133,35)" fg:x="45334" fg:w="23"/><text x="88.5997%" y="399.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (24 samples, 0.05%)</title><rect x="88.3497%" y="437" width="0.0468%" height="15" fill="rgb(213,28,5)" fg:x="45334" fg:w="24"/><text x="88.5997%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (24 samples, 0.05%)</title><rect x="88.3497%" y="421" width="0.0468%" height="15" fill="rgb(215,77,49)" fg:x="45334" fg:w="24"/><text x="88.5997%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (24 samples, 0.05%)</title><rect x="88.3497%" y="405" width="0.0468%" height="15" fill="rgb(248,100,22)" fg:x="45334" fg:w="24"/><text x="88.5997%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (11 samples, 0.02%)</title><rect x="88.4004%" y="293" width="0.0214%" height="15" fill="rgb(208,67,9)" fg:x="45360" fg:w="11"/><text x="88.6504%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (10 samples, 0.02%)</title><rect x="88.4023%" y="277" width="0.0195%" height="15" fill="rgb(219,133,21)" fg:x="45361" fg:w="10"/><text x="88.6523%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="88.4023%" y="261" width="0.0195%" height="15" fill="rgb(246,46,29)" fg:x="45361" fg:w="10"/><text x="88.6523%" y="271.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.02%)</title><rect x="88.4023%" y="245" width="0.0195%" height="15" fill="rgb(246,185,52)" fg:x="45361" fg:w="10"/><text x="88.6523%" y="255.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (9 samples, 0.02%)</title><rect x="88.4043%" y="229" width="0.0175%" height="15" fill="rgb(252,136,11)" fg:x="45362" fg:w="9"/><text x="88.6543%" y="239.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::lowercase (7 samples, 0.01%)</title><rect x="88.4218%" y="293" width="0.0136%" height="15" fill="rgb(219,138,53)" fg:x="45371" fg:w="7"/><text x="88.6718%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="88.4218%" y="277" width="0.0136%" height="15" fill="rgb(211,51,23)" fg:x="45371" fg:w="7"/><text x="88.6718%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="88.4218%" y="261" width="0.0136%" height="15" fill="rgb(247,221,28)" fg:x="45371" fg:w="7"/><text x="88.6718%" y="271.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="88.4238%" y="245" width="0.0117%" height="15" fill="rgb(251,222,45)" fg:x="45372" fg:w="6"/><text x="88.6738%" y="255.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (8 samples, 0.02%)</title><rect x="88.4471%" y="213" width="0.0156%" height="15" fill="rgb(217,162,53)" fg:x="45384" fg:w="8"/><text x="88.6971%" y="223.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.02%)</title><rect x="88.4432%" y="261" width="0.0214%" height="15" fill="rgb(229,93,14)" fg:x="45382" fg:w="11"/><text x="88.6932%" y="271.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (9 samples, 0.02%)</title><rect x="88.4471%" y="245" width="0.0175%" height="15" fill="rgb(209,67,49)" fg:x="45384" fg:w="9"/><text x="88.6971%" y="255.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (9 samples, 0.02%)</title><rect x="88.4471%" y="229" width="0.0175%" height="15" fill="rgb(213,87,29)" fg:x="45384" fg:w="9"/><text x="88.6971%" y="239.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (34 samples, 0.07%)</title><rect x="88.4004%" y="357" width="0.0663%" height="15" fill="rgb(205,151,52)" fg:x="45360" fg:w="34"/><text x="88.6504%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (34 samples, 0.07%)</title><rect x="88.4004%" y="341" width="0.0663%" height="15" fill="rgb(253,215,39)" fg:x="45360" fg:w="34"/><text x="88.6504%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (34 samples, 0.07%)</title><rect x="88.4004%" y="325" width="0.0663%" height="15" fill="rgb(221,220,41)" fg:x="45360" fg:w="34"/><text x="88.6504%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (34 samples, 0.07%)</title><rect x="88.4004%" y="309" width="0.0663%" height="15" fill="rgb(218,133,21)" fg:x="45360" fg:w="34"/><text x="88.6504%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (12 samples, 0.02%)</title><rect x="88.4432%" y="293" width="0.0234%" height="15" fill="rgb(221,193,43)" fg:x="45382" fg:w="12"/><text x="88.6932%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="88.4432%" y="277" width="0.0234%" height="15" fill="rgb(240,128,52)" fg:x="45382" fg:w="12"/><text x="88.6932%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (42 samples, 0.08%)</title><rect x="88.3965%" y="373" width="0.0819%" height="15" fill="rgb(253,114,12)" fg:x="45358" fg:w="42"/><text x="88.6465%" y="383.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (137 samples, 0.27%)</title><rect x="88.2152%" y="549" width="0.2670%" height="15" fill="rgb(215,223,47)" fg:x="45265" fg:w="137"/><text x="88.4652%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (105 samples, 0.20%)</title><rect x="88.2776%" y="533" width="0.2046%" height="15" fill="rgb(248,225,23)" fg:x="45297" fg:w="105"/><text x="88.5276%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (105 samples, 0.20%)</title><rect x="88.2776%" y="517" width="0.2046%" height="15" fill="rgb(250,108,0)" fg:x="45297" fg:w="105"/><text x="88.5276%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (68 samples, 0.13%)</title><rect x="88.3497%" y="501" width="0.1325%" height="15" fill="rgb(228,208,7)" fg:x="45334" fg:w="68"/><text x="88.5997%" y="511.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (68 samples, 0.13%)</title><rect x="88.3497%" y="485" width="0.1325%" height="15" fill="rgb(244,45,10)" fg:x="45334" fg:w="68"/><text x="88.5997%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (68 samples, 0.13%)</title><rect x="88.3497%" y="469" width="0.1325%" height="15" fill="rgb(207,125,25)" fg:x="45334" fg:w="68"/><text x="88.5997%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (68 samples, 0.13%)</title><rect x="88.3497%" y="453" width="0.1325%" height="15" fill="rgb(210,195,18)" fg:x="45334" fg:w="68"/><text x="88.5997%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (44 samples, 0.09%)</title><rect x="88.3965%" y="437" width="0.0857%" height="15" fill="rgb(249,80,12)" fg:x="45358" fg:w="44"/><text x="88.6465%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (44 samples, 0.09%)</title><rect x="88.3965%" y="421" width="0.0857%" height="15" fill="rgb(221,65,9)" fg:x="45358" fg:w="44"/><text x="88.6465%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (44 samples, 0.09%)</title><rect x="88.3965%" y="405" width="0.0857%" height="15" fill="rgb(235,49,36)" fg:x="45358" fg:w="44"/><text x="88.6465%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (44 samples, 0.09%)</title><rect x="88.3965%" y="389" width="0.0857%" height="15" fill="rgb(225,32,20)" fg:x="45358" fg:w="44"/><text x="88.6465%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (7 samples, 0.01%)</title><rect x="88.5056%" y="261" width="0.0136%" height="15" fill="rgb(215,141,46)" fg:x="45414" fg:w="7"/><text x="88.7556%" y="271.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (15 samples, 0.03%)</title><rect x="88.4920%" y="357" width="0.0292%" height="15" fill="rgb(250,160,47)" fg:x="45407" fg:w="15"/><text x="88.7420%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (14 samples, 0.03%)</title><rect x="88.4939%" y="341" width="0.0273%" height="15" fill="rgb(216,222,40)" fg:x="45408" fg:w="14"/><text x="88.7439%" y="351.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (14 samples, 0.03%)</title><rect x="88.4939%" y="325" width="0.0273%" height="15" fill="rgb(234,217,39)" fg:x="45408" fg:w="14"/><text x="88.7439%" y="335.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.02%)</title><rect x="88.4998%" y="309" width="0.0214%" height="15" fill="rgb(207,178,40)" fg:x="45411" fg:w="11"/><text x="88.7498%" y="319.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (10 samples, 0.02%)</title><rect x="88.5017%" y="293" width="0.0195%" height="15" fill="rgb(221,136,13)" fg:x="45412" fg:w="10"/><text x="88.7517%" y="303.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (8 samples, 0.02%)</title><rect x="88.5056%" y="277" width="0.0156%" height="15" fill="rgb(249,199,10)" fg:x="45414" fg:w="8"/><text x="88.7556%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::lowercase (6 samples, 0.01%)</title><rect x="88.5212%" y="357" width="0.0117%" height="15" fill="rgb(249,222,13)" fg:x="45422" fg:w="6"/><text x="88.7712%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.5212%" y="341" width="0.0117%" height="15" fill="rgb(244,185,38)" fg:x="45422" fg:w="6"/><text x="88.7712%" y="351.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.5212%" y="325" width="0.0117%" height="15" fill="rgb(236,202,9)" fg:x="45422" fg:w="6"/><text x="88.7712%" y="335.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::nfd (11 samples, 0.02%)</title><rect x="88.5329%" y="357" width="0.0214%" height="15" fill="rgb(250,229,37)" fg:x="45428" fg:w="11"/><text x="88.7829%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (11 samples, 0.02%)</title><rect x="88.5329%" y="341" width="0.0214%" height="15" fill="rgb(206,174,23)" fg:x="45428" fg:w="11"/><text x="88.7829%" y="351.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (11 samples, 0.02%)</title><rect x="88.5329%" y="325" width="0.0214%" height="15" fill="rgb(211,33,43)" fg:x="45428" fg:w="11"/><text x="88.7829%" y="335.50"></text></g><g><title>swiftide-bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.02%)</title><rect x="88.5387%" y="309" width="0.0156%" height="15" fill="rgb(245,58,50)" fg:x="45431" fg:w="8"/><text x="88.7887%" y="319.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="88.5426%" y="293" width="0.0117%" height="15" fill="rgb(244,68,36)" fg:x="45433" fg:w="6"/><text x="88.7926%" y="303.50"></text></g><g><title>swiftide-bench`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (6 samples, 0.01%)</title><rect x="88.5738%" y="261" width="0.0117%" height="15" fill="rgb(232,229,15)" fg:x="45449" fg:w="6"/><text x="88.8238%" y="271.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (13 samples, 0.03%)</title><rect x="88.5680%" y="277" width="0.0253%" height="15" fill="rgb(254,30,23)" fg:x="45446" fg:w="13"/><text x="88.8180%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (21 samples, 0.04%)</title><rect x="88.5543%" y="357" width="0.0409%" height="15" fill="rgb(235,160,14)" fg:x="45439" fg:w="21"/><text x="88.8043%" y="367.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (21 samples, 0.04%)</title><rect x="88.5543%" y="341" width="0.0409%" height="15" fill="rgb(212,155,44)" fg:x="45439" fg:w="21"/><text x="88.8043%" y="351.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.04%)</title><rect x="88.5602%" y="325" width="0.0351%" height="15" fill="rgb(226,2,50)" fg:x="45442" fg:w="18"/><text x="88.8102%" y="335.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (15 samples, 0.03%)</title><rect x="88.5660%" y="309" width="0.0292%" height="15" fill="rgb(234,177,6)" fg:x="45445" fg:w="15"/><text x="88.8160%" y="319.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (14 samples, 0.03%)</title><rect x="88.5680%" y="293" width="0.0273%" height="15" fill="rgb(217,24,9)" fg:x="45446" fg:w="14"/><text x="88.8180%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (56 samples, 0.11%)</title><rect x="88.4920%" y="421" width="0.1091%" height="15" fill="rgb(220,13,46)" fg:x="45407" fg:w="56"/><text x="88.7420%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (56 samples, 0.11%)</title><rect x="88.4920%" y="405" width="0.1091%" height="15" fill="rgb(239,221,27)" fg:x="45407" fg:w="56"/><text x="88.7420%" y="415.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (56 samples, 0.11%)</title><rect x="88.4920%" y="389" width="0.1091%" height="15" fill="rgb(222,198,25)" fg:x="45407" fg:w="56"/><text x="88.7420%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (56 samples, 0.11%)</title><rect x="88.4920%" y="373" width="0.1091%" height="15" fill="rgb(211,99,13)" fg:x="45407" fg:w="56"/><text x="88.7420%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (11 samples, 0.02%)</title><rect x="88.6050%" y="421" width="0.0214%" height="15" fill="rgb(232,111,31)" fg:x="45465" fg:w="11"/><text x="88.8550%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::split (9 samples, 0.02%)</title><rect x="88.6089%" y="405" width="0.0175%" height="15" fill="rgb(245,82,37)" fg:x="45467" fg:w="9"/><text x="88.8589%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (74 samples, 0.14%)</title><rect x="88.4861%" y="437" width="0.1442%" height="15" fill="rgb(227,149,46)" fg:x="45404" fg:w="74"/><text x="88.7361%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (77 samples, 0.15%)</title><rect x="88.4822%" y="485" width="0.1501%" height="15" fill="rgb(218,36,50)" fg:x="45402" fg:w="77"/><text x="88.7322%" y="495.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (77 samples, 0.15%)</title><rect x="88.4822%" y="469" width="0.1501%" height="15" fill="rgb(226,80,48)" fg:x="45402" fg:w="77"/><text x="88.7322%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (77 samples, 0.15%)</title><rect x="88.4822%" y="453" width="0.1501%" height="15" fill="rgb(238,224,15)" fg:x="45402" fg:w="77"/><text x="88.7322%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="88.6381%" y="341" width="0.0117%" height="15" fill="rgb(241,136,10)" fg:x="45482" fg:w="6"/><text x="88.8881%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.6381%" y="325" width="0.0117%" height="15" fill="rgb(208,32,45)" fg:x="45482" fg:w="6"/><text x="88.8881%" y="335.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.6381%" y="309" width="0.0117%" height="15" fill="rgb(207,135,9)" fg:x="45482" fg:w="6"/><text x="88.8881%" y="319.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="88.6381%" y="293" width="0.0117%" height="15" fill="rgb(206,86,44)" fg:x="45482" fg:w="6"/><text x="88.8881%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (10 samples, 0.02%)</title><rect x="88.6654%" y="341" width="0.0195%" height="15" fill="rgb(245,177,15)" fg:x="45496" fg:w="10"/><text x="88.9154%" y="351.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="88.6654%" y="325" width="0.0195%" height="15" fill="rgb(206,64,50)" fg:x="45496" fg:w="10"/><text x="88.9154%" y="335.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.02%)</title><rect x="88.6674%" y="309" width="0.0175%" height="15" fill="rgb(234,36,40)" fg:x="45497" fg:w="9"/><text x="88.9174%" y="319.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="88.6732%" y="293" width="0.0117%" height="15" fill="rgb(213,64,8)" fg:x="45500" fg:w="6"/><text x="88.9232%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (26 samples, 0.05%)</title><rect x="88.6381%" y="405" width="0.0507%" height="15" fill="rgb(210,75,36)" fg:x="45482" fg:w="26"/><text x="88.8881%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (26 samples, 0.05%)</title><rect x="88.6381%" y="389" width="0.0507%" height="15" fill="rgb(229,88,21)" fg:x="45482" fg:w="26"/><text x="88.8881%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (26 samples, 0.05%)</title><rect x="88.6381%" y="373" width="0.0507%" height="15" fill="rgb(252,204,47)" fg:x="45482" fg:w="26"/><text x="88.8881%" y="383.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (26 samples, 0.05%)</title><rect x="88.6381%" y="357" width="0.0507%" height="15" fill="rgb(208,77,27)" fg:x="45482" fg:w="26"/><text x="88.8881%" y="367.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (35 samples, 0.07%)</title><rect x="88.6323%" y="453" width="0.0682%" height="15" fill="rgb(221,76,26)" fg:x="45479" fg:w="35"/><text x="88.8823%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (35 samples, 0.07%)</title><rect x="88.6323%" y="437" width="0.0682%" height="15" fill="rgb(225,139,18)" fg:x="45479" fg:w="35"/><text x="88.8823%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (34 samples, 0.07%)</title><rect x="88.6342%" y="421" width="0.0663%" height="15" fill="rgb(230,137,11)" fg:x="45480" fg:w="34"/><text x="88.8842%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (19 samples, 0.04%)</title><rect x="88.7083%" y="293" width="0.0370%" height="15" fill="rgb(212,28,1)" fg:x="45518" fg:w="19"/><text x="88.9583%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (17 samples, 0.03%)</title><rect x="88.7122%" y="277" width="0.0331%" height="15" fill="rgb(248,164,17)" fg:x="45520" fg:w="17"/><text x="88.9622%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (17 samples, 0.03%)</title><rect x="88.7122%" y="261" width="0.0331%" height="15" fill="rgb(222,171,42)" fg:x="45520" fg:w="17"/><text x="88.9622%" y="271.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.03%)</title><rect x="88.7122%" y="245" width="0.0331%" height="15" fill="rgb(243,84,45)" fg:x="45520" fg:w="17"/><text x="88.9622%" y="255.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (12 samples, 0.02%)</title><rect x="88.7219%" y="229" width="0.0234%" height="15" fill="rgb(252,49,23)" fg:x="45525" fg:w="12"/><text x="88.9719%" y="239.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::lowercase (7 samples, 0.01%)</title><rect x="88.7453%" y="293" width="0.0136%" height="15" fill="rgb(215,19,7)" fg:x="45537" fg:w="7"/><text x="88.9953%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="88.7453%" y="277" width="0.0136%" height="15" fill="rgb(238,81,41)" fg:x="45537" fg:w="7"/><text x="88.9953%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="88.7453%" y="261" width="0.0136%" height="15" fill="rgb(210,199,37)" fg:x="45537" fg:w="7"/><text x="88.9953%" y="271.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="88.7453%" y="245" width="0.0136%" height="15" fill="rgb(244,192,49)" fg:x="45537" fg:w="7"/><text x="88.9953%" y="255.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (7 samples, 0.01%)</title><rect x="88.7453%" y="229" width="0.0136%" height="15" fill="rgb(226,211,11)" fg:x="45537" fg:w="7"/><text x="88.9953%" y="239.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::nfd (6 samples, 0.01%)</title><rect x="88.7590%" y="293" width="0.0117%" height="15" fill="rgb(236,162,54)" fg:x="45544" fg:w="6"/><text x="89.0090%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.7590%" y="277" width="0.0117%" height="15" fill="rgb(220,229,9)" fg:x="45544" fg:w="6"/><text x="89.0090%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.7590%" y="261" width="0.0117%" height="15" fill="rgb(250,87,22)" fg:x="45544" fg:w="6"/><text x="89.0090%" y="271.50"></text></g><g><title>swiftide-bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="88.7590%" y="245" width="0.0117%" height="15" fill="rgb(239,43,17)" fg:x="45544" fg:w="6"/><text x="89.0090%" y="255.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.03%)</title><rect x="88.7726%" y="261" width="0.0292%" height="15" fill="rgb(231,177,25)" fg:x="45551" fg:w="15"/><text x="89.0226%" y="271.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (13 samples, 0.03%)</title><rect x="88.7765%" y="245" width="0.0253%" height="15" fill="rgb(219,179,1)" fg:x="45553" fg:w="13"/><text x="89.0265%" y="255.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (12 samples, 0.02%)</title><rect x="88.7785%" y="229" width="0.0234%" height="15" fill="rgb(238,219,53)" fg:x="45554" fg:w="12"/><text x="89.0285%" y="239.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (12 samples, 0.02%)</title><rect x="88.7785%" y="213" width="0.0234%" height="15" fill="rgb(232,167,36)" fg:x="45554" fg:w="12"/><text x="89.0285%" y="223.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (49 samples, 0.10%)</title><rect x="88.7083%" y="357" width="0.0955%" height="15" fill="rgb(244,19,51)" fg:x="45518" fg:w="49"/><text x="88.9583%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (49 samples, 0.10%)</title><rect x="88.7083%" y="341" width="0.0955%" height="15" fill="rgb(224,6,22)" fg:x="45518" fg:w="49"/><text x="88.9583%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (49 samples, 0.10%)</title><rect x="88.7083%" y="325" width="0.0955%" height="15" fill="rgb(224,145,5)" fg:x="45518" fg:w="49"/><text x="88.9583%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (49 samples, 0.10%)</title><rect x="88.7083%" y="309" width="0.0955%" height="15" fill="rgb(234,130,49)" fg:x="45518" fg:w="49"/><text x="88.9583%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (17 samples, 0.03%)</title><rect x="88.7707%" y="293" width="0.0331%" height="15" fill="rgb(254,6,2)" fg:x="45550" fg:w="17"/><text x="89.0207%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (17 samples, 0.03%)</title><rect x="88.7707%" y="277" width="0.0331%" height="15" fill="rgb(208,96,46)" fg:x="45550" fg:w="17"/><text x="89.0207%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (6 samples, 0.01%)</title><rect x="88.8096%" y="357" width="0.0117%" height="15" fill="rgb(239,3,39)" fg:x="45570" fg:w="6"/><text x="89.0596%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::split (6 samples, 0.01%)</title><rect x="88.8096%" y="341" width="0.0117%" height="15" fill="rgb(233,210,1)" fg:x="45570" fg:w="6"/><text x="89.0596%" y="351.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (64 samples, 0.12%)</title><rect x="88.7005%" y="421" width="0.1247%" height="15" fill="rgb(244,137,37)" fg:x="45514" fg:w="64"/><text x="88.9505%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (64 samples, 0.12%)</title><rect x="88.7005%" y="405" width="0.1247%" height="15" fill="rgb(240,136,2)" fg:x="45514" fg:w="64"/><text x="88.9505%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (64 samples, 0.12%)</title><rect x="88.7005%" y="389" width="0.1247%" height="15" fill="rgb(239,18,37)" fg:x="45514" fg:w="64"/><text x="88.9505%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (62 samples, 0.12%)</title><rect x="88.7044%" y="373" width="0.1208%" height="15" fill="rgb(218,185,22)" fg:x="45516" fg:w="62"/><text x="88.9544%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="88.8369%" y="149" width="0.0117%" height="15" fill="rgb(225,218,4)" fg:x="45584" fg:w="6"/><text x="89.0869%" y="159.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="88.8369%" y="133" width="0.0117%" height="15" fill="rgb(230,182,32)" fg:x="45584" fg:w="6"/><text x="89.0869%" y="143.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.8369%" y="117" width="0.0117%" height="15" fill="rgb(242,56,43)" fg:x="45584" fg:w="6"/><text x="89.0869%" y="127.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (15 samples, 0.03%)</title><rect x="88.8369%" y="181" width="0.0292%" height="15" fill="rgb(233,99,24)" fg:x="45584" fg:w="15"/><text x="89.0869%" y="191.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (15 samples, 0.03%)</title><rect x="88.8369%" y="165" width="0.0292%" height="15" fill="rgb(234,209,42)" fg:x="45584" fg:w="15"/><text x="89.0869%" y="175.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (16 samples, 0.03%)</title><rect x="88.8369%" y="213" width="0.0312%" height="15" fill="rgb(227,7,12)" fg:x="45584" fg:w="16"/><text x="89.0869%" y="223.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (16 samples, 0.03%)</title><rect x="88.8369%" y="197" width="0.0312%" height="15" fill="rgb(245,203,43)" fg:x="45584" fg:w="16"/><text x="89.0869%" y="207.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (19 samples, 0.04%)</title><rect x="88.8369%" y="229" width="0.0370%" height="15" fill="rgb(238,205,33)" fg:x="45584" fg:w="19"/><text x="89.0869%" y="239.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (202 samples, 0.39%)</title><rect x="88.4822%" y="549" width="0.3937%" height="15" fill="rgb(231,56,7)" fg:x="45402" fg:w="202"/><text x="88.7322%" y="559.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (202 samples, 0.39%)</title><rect x="88.4822%" y="533" width="0.3937%" height="15" fill="rgb(244,186,29)" fg:x="45402" fg:w="202"/><text x="88.7322%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (202 samples, 0.39%)</title><rect x="88.4822%" y="517" width="0.3937%" height="15" fill="rgb(234,111,31)" fg:x="45402" fg:w="202"/><text x="88.7322%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (202 samples, 0.39%)</title><rect x="88.4822%" y="501" width="0.3937%" height="15" fill="rgb(241,149,10)" fg:x="45402" fg:w="202"/><text x="88.7322%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (125 samples, 0.24%)</title><rect x="88.6323%" y="485" width="0.2436%" height="15" fill="rgb(249,206,44)" fg:x="45479" fg:w="125"/><text x="88.8823%" y="495.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (125 samples, 0.24%)</title><rect x="88.6323%" y="469" width="0.2436%" height="15" fill="rgb(251,153,30)" fg:x="45479" fg:w="125"/><text x="88.8823%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (90 samples, 0.18%)</title><rect x="88.7005%" y="453" width="0.1754%" height="15" fill="rgb(239,152,38)" fg:x="45514" fg:w="90"/><text x="88.9505%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (90 samples, 0.18%)</title><rect x="88.7005%" y="437" width="0.1754%" height="15" fill="rgb(249,139,47)" fg:x="45514" fg:w="90"/><text x="88.9505%" y="447.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (25 samples, 0.05%)</title><rect x="88.8272%" y="421" width="0.0487%" height="15" fill="rgb(244,64,35)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="431.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (25 samples, 0.05%)</title><rect x="88.8272%" y="405" width="0.0487%" height="15" fill="rgb(216,46,15)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="415.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (25 samples, 0.05%)</title><rect x="88.8272%" y="389" width="0.0487%" height="15" fill="rgb(250,74,19)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="399.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (25 samples, 0.05%)</title><rect x="88.8272%" y="373" width="0.0487%" height="15" fill="rgb(249,42,33)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="383.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (25 samples, 0.05%)</title><rect x="88.8272%" y="357" width="0.0487%" height="15" fill="rgb(242,149,17)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="367.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (25 samples, 0.05%)</title><rect x="88.8272%" y="341" width="0.0487%" height="15" fill="rgb(244,29,21)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="351.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (25 samples, 0.05%)</title><rect x="88.8272%" y="325" width="0.0487%" height="15" fill="rgb(220,130,37)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="335.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (25 samples, 0.05%)</title><rect x="88.8272%" y="309" width="0.0487%" height="15" fill="rgb(211,67,2)" fg:x="45579" fg:w="25"/><text x="89.0772%" y="319.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (20 samples, 0.04%)</title><rect x="88.8369%" y="293" width="0.0390%" height="15" fill="rgb(235,68,52)" fg:x="45584" fg:w="20"/><text x="89.0869%" y="303.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.04%)</title><rect x="88.8369%" y="277" width="0.0390%" height="15" fill="rgb(246,142,3)" fg:x="45584" fg:w="20"/><text x="89.0869%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.04%)</title><rect x="88.8369%" y="261" width="0.0390%" height="15" fill="rgb(241,25,7)" fg:x="45584" fg:w="20"/><text x="89.0869%" y="271.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (20 samples, 0.04%)</title><rect x="88.8369%" y="245" width="0.0390%" height="15" fill="rgb(242,119,39)" fg:x="45584" fg:w="20"/><text x="89.0869%" y="255.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (8 samples, 0.02%)</title><rect x="88.8895%" y="293" width="0.0156%" height="15" fill="rgb(241,98,45)" fg:x="45611" fg:w="8"/><text x="89.1395%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (8 samples, 0.02%)</title><rect x="88.8895%" y="277" width="0.0156%" height="15" fill="rgb(254,28,30)" fg:x="45611" fg:w="8"/><text x="89.1395%" y="287.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="88.8895%" y="261" width="0.0156%" height="15" fill="rgb(241,142,54)" fg:x="45611" fg:w="8"/><text x="89.1395%" y="271.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="88.8895%" y="245" width="0.0156%" height="15" fill="rgb(222,85,15)" fg:x="45611" fg:w="8"/><text x="89.1395%" y="255.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 0.03%)</title><rect x="88.8759%" y="469" width="0.0331%" height="15" fill="rgb(210,85,47)" fg:x="45604" fg:w="17"/><text x="89.1259%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (17 samples, 0.03%)</title><rect x="88.8759%" y="453" width="0.0331%" height="15" fill="rgb(224,206,25)" fg:x="45604" fg:w="17"/><text x="89.1259%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (17 samples, 0.03%)</title><rect x="88.8759%" y="437" width="0.0331%" height="15" fill="rgb(243,201,19)" fg:x="45604" fg:w="17"/><text x="89.1259%" y="447.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (12 samples, 0.02%)</title><rect x="88.8856%" y="421" width="0.0234%" height="15" fill="rgb(236,59,4)" fg:x="45609" fg:w="12"/><text x="89.1356%" y="431.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (12 samples, 0.02%)</title><rect x="88.8856%" y="405" width="0.0234%" height="15" fill="rgb(254,179,45)" fg:x="45609" fg:w="12"/><text x="89.1356%" y="415.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (12 samples, 0.02%)</title><rect x="88.8856%" y="389" width="0.0234%" height="15" fill="rgb(226,14,10)" fg:x="45609" fg:w="12"/><text x="89.1356%" y="399.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (12 samples, 0.02%)</title><rect x="88.8856%" y="373" width="0.0234%" height="15" fill="rgb(244,27,41)" fg:x="45609" fg:w="12"/><text x="89.1356%" y="383.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (12 samples, 0.02%)</title><rect x="88.8856%" y="357" width="0.0234%" height="15" fill="rgb(235,35,32)" fg:x="45609" fg:w="12"/><text x="89.1356%" y="367.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12 samples, 0.02%)</title><rect x="88.8856%" y="341" width="0.0234%" height="15" fill="rgb(218,68,31)" fg:x="45609" fg:w="12"/><text x="89.1356%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (12 samples, 0.02%)</title><rect x="88.8856%" y="325" width="0.0234%" height="15" fill="rgb(207,120,37)" fg:x="45609" fg:w="12"/><text x="89.1356%" y="335.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (11 samples, 0.02%)</title><rect x="88.8876%" y="309" width="0.0214%" height="15" fill="rgb(227,98,0)" fg:x="45610" fg:w="11"/><text x="89.1376%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="88.9149%" y="309" width="0.0136%" height="15" fill="rgb(207,7,3)" fg:x="45624" fg:w="7"/><text x="89.1649%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="88.9149%" y="293" width="0.0136%" height="15" fill="rgb(206,98,19)" fg:x="45624" fg:w="7"/><text x="89.1649%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="88.9168%" y="277" width="0.0117%" height="15" fill="rgb(217,5,26)" fg:x="45625" fg:w="6"/><text x="89.1668%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (23 samples, 0.04%)</title><rect x="88.9129%" y="373" width="0.0448%" height="15" fill="rgb(235,190,38)" fg:x="45623" fg:w="23"/><text x="89.1629%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (22 samples, 0.04%)</title><rect x="88.9149%" y="357" width="0.0429%" height="15" fill="rgb(247,86,24)" fg:x="45624" fg:w="22"/><text x="89.1649%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (22 samples, 0.04%)</title><rect x="88.9149%" y="341" width="0.0429%" height="15" fill="rgb(205,101,16)" fg:x="45624" fg:w="22"/><text x="89.1649%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (22 samples, 0.04%)</title><rect x="88.9149%" y="325" width="0.0429%" height="15" fill="rgb(246,168,33)" fg:x="45624" fg:w="22"/><text x="89.1649%" y="335.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="88.9441%" y="309" width="0.0136%" height="15" fill="rgb(231,114,1)" fg:x="45639" fg:w="7"/><text x="89.1941%" y="319.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="88.9441%" y="293" width="0.0136%" height="15" fill="rgb(207,184,53)" fg:x="45639" fg:w="7"/><text x="89.1941%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (31 samples, 0.06%)</title><rect x="88.9110%" y="389" width="0.0604%" height="15" fill="rgb(224,95,51)" fg:x="45622" fg:w="31"/><text x="89.1610%" y="399.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (442 samples, 0.86%)</title><rect x="88.1119%" y="597" width="0.8614%" height="15" fill="rgb(212,188,45)" fg:x="45212" fg:w="442"/><text x="88.3619%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (389 samples, 0.76%)</title><rect x="88.2152%" y="581" width="0.7581%" height="15" fill="rgb(223,154,38)" fg:x="45265" fg:w="389"/><text x="88.4652%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (389 samples, 0.76%)</title><rect x="88.2152%" y="565" width="0.7581%" height="15" fill="rgb(251,22,52)" fg:x="45265" fg:w="389"/><text x="88.4652%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (50 samples, 0.10%)</title><rect x="88.8759%" y="549" width="0.0974%" height="15" fill="rgb(229,209,22)" fg:x="45604" fg:w="50"/><text x="89.1259%" y="559.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (50 samples, 0.10%)</title><rect x="88.8759%" y="533" width="0.0974%" height="15" fill="rgb(234,138,34)" fg:x="45604" fg:w="50"/><text x="89.1259%" y="543.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (50 samples, 0.10%)</title><rect x="88.8759%" y="517" width="0.0974%" height="15" fill="rgb(212,95,11)" fg:x="45604" fg:w="50"/><text x="89.1259%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (50 samples, 0.10%)</title><rect x="88.8759%" y="501" width="0.0974%" height="15" fill="rgb(240,179,47)" fg:x="45604" fg:w="50"/><text x="89.1259%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (50 samples, 0.10%)</title><rect x="88.8759%" y="485" width="0.0974%" height="15" fill="rgb(240,163,11)" fg:x="45604" fg:w="50"/><text x="89.1259%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (33 samples, 0.06%)</title><rect x="88.9090%" y="469" width="0.0643%" height="15" fill="rgb(236,37,12)" fg:x="45621" fg:w="33"/><text x="89.1590%" y="479.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (33 samples, 0.06%)</title><rect x="88.9090%" y="453" width="0.0643%" height="15" fill="rgb(232,164,16)" fg:x="45621" fg:w="33"/><text x="89.1590%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (33 samples, 0.06%)</title><rect x="88.9090%" y="437" width="0.0643%" height="15" fill="rgb(244,205,15)" fg:x="45621" fg:w="33"/><text x="89.1590%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (33 samples, 0.06%)</title><rect x="88.9090%" y="421" width="0.0643%" height="15" fill="rgb(223,117,47)" fg:x="45621" fg:w="33"/><text x="89.1590%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (33 samples, 0.06%)</title><rect x="88.9090%" y="405" width="0.0643%" height="15" fill="rgb(244,107,35)" fg:x="45621" fg:w="33"/><text x="89.1590%" y="415.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (9 samples, 0.02%)</title><rect x="88.9733%" y="485" width="0.0175%" height="15" fill="rgb(205,140,8)" fg:x="45654" fg:w="9"/><text x="89.2233%" y="495.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (9 samples, 0.02%)</title><rect x="88.9733%" y="469" width="0.0175%" height="15" fill="rgb(228,84,46)" fg:x="45654" fg:w="9"/><text x="89.2233%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (10 samples, 0.02%)</title><rect x="88.9733%" y="517" width="0.0195%" height="15" fill="rgb(254,188,9)" fg:x="45654" fg:w="10"/><text x="89.2233%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (10 samples, 0.02%)</title><rect x="88.9733%" y="501" width="0.0195%" height="15" fill="rgb(206,112,54)" fg:x="45654" fg:w="10"/><text x="89.2233%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12 samples, 0.02%)</title><rect x="88.9733%" y="565" width="0.0234%" height="15" fill="rgb(216,84,49)" fg:x="45654" fg:w="12"/><text x="89.2233%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (12 samples, 0.02%)</title><rect x="88.9733%" y="549" width="0.0234%" height="15" fill="rgb(214,194,35)" fg:x="45654" fg:w="12"/><text x="89.2233%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (12 samples, 0.02%)</title><rect x="88.9733%" y="533" width="0.0234%" height="15" fill="rgb(249,28,3)" fg:x="45654" fg:w="12"/><text x="89.2233%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (10 samples, 0.02%)</title><rect x="89.0065%" y="405" width="0.0195%" height="15" fill="rgb(222,56,52)" fg:x="45671" fg:w="10"/><text x="89.2565%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (10 samples, 0.02%)</title><rect x="89.0065%" y="389" width="0.0195%" height="15" fill="rgb(245,217,50)" fg:x="45671" fg:w="10"/><text x="89.2565%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="89.0065%" y="373" width="0.0195%" height="15" fill="rgb(213,201,24)" fg:x="45671" fg:w="10"/><text x="89.2565%" y="383.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.02%)</title><rect x="89.0104%" y="357" width="0.0156%" height="15" fill="rgb(248,116,28)" fg:x="45673" fg:w="8"/><text x="89.2604%" y="367.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (8 samples, 0.02%)</title><rect x="89.0104%" y="341" width="0.0156%" height="15" fill="rgb(219,72,43)" fg:x="45673" fg:w="8"/><text x="89.2604%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (8 samples, 0.02%)</title><rect x="89.0104%" y="325" width="0.0156%" height="15" fill="rgb(209,138,14)" fg:x="45673" fg:w="8"/><text x="89.2604%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (7 samples, 0.01%)</title><rect x="89.0123%" y="309" width="0.0136%" height="15" fill="rgb(222,18,33)" fg:x="45674" fg:w="7"/><text x="89.2623%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (25 samples, 0.05%)</title><rect x="89.0065%" y="469" width="0.0487%" height="15" fill="rgb(213,199,7)" fg:x="45671" fg:w="25"/><text x="89.2565%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (25 samples, 0.05%)</title><rect x="89.0065%" y="453" width="0.0487%" height="15" fill="rgb(250,110,10)" fg:x="45671" fg:w="25"/><text x="89.2565%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (25 samples, 0.05%)</title><rect x="89.0065%" y="437" width="0.0487%" height="15" fill="rgb(248,123,6)" fg:x="45671" fg:w="25"/><text x="89.2565%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (25 samples, 0.05%)</title><rect x="89.0065%" y="421" width="0.0487%" height="15" fill="rgb(206,91,31)" fg:x="45671" fg:w="25"/><text x="89.2565%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="89.0415%" y="405" width="0.0136%" height="15" fill="rgb(211,154,13)" fg:x="45689" fg:w="7"/><text x="89.2915%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="89.0415%" y="389" width="0.0136%" height="15" fill="rgb(225,148,7)" fg:x="45689" fg:w="7"/><text x="89.2915%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (36 samples, 0.07%)</title><rect x="88.9967%" y="517" width="0.0702%" height="15" fill="rgb(220,160,43)" fg:x="45666" fg:w="36"/><text x="89.2467%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (36 samples, 0.07%)</title><rect x="88.9967%" y="501" width="0.0702%" height="15" fill="rgb(213,52,39)" fg:x="45666" fg:w="36"/><text x="89.2467%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (33 samples, 0.06%)</title><rect x="89.0026%" y="485" width="0.0643%" height="15" fill="rgb(243,137,7)" fg:x="45669" fg:w="33"/><text x="89.2526%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (11 samples, 0.02%)</title><rect x="89.0747%" y="357" width="0.0214%" height="15" fill="rgb(230,79,13)" fg:x="45706" fg:w="11"/><text x="89.3247%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (11 samples, 0.02%)</title><rect x="89.0747%" y="341" width="0.0214%" height="15" fill="rgb(247,105,23)" fg:x="45706" fg:w="11"/><text x="89.3247%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (11 samples, 0.02%)</title><rect x="89.0747%" y="325" width="0.0214%" height="15" fill="rgb(223,179,41)" fg:x="45706" fg:w="11"/><text x="89.3247%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (11 samples, 0.02%)</title><rect x="89.0747%" y="309" width="0.0214%" height="15" fill="rgb(218,9,34)" fg:x="45706" fg:w="11"/><text x="89.3247%" y="319.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (53 samples, 0.10%)</title><rect x="88.9967%" y="533" width="0.1033%" height="15" fill="rgb(222,106,8)" fg:x="45666" fg:w="53"/><text x="89.2467%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (17 samples, 0.03%)</title><rect x="89.0669%" y="517" width="0.0331%" height="15" fill="rgb(211,220,0)" fg:x="45702" fg:w="17"/><text x="89.3169%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (17 samples, 0.03%)</title><rect x="89.0669%" y="501" width="0.0331%" height="15" fill="rgb(229,52,16)" fg:x="45702" fg:w="17"/><text x="89.3169%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (15 samples, 0.03%)</title><rect x="89.0708%" y="485" width="0.0292%" height="15" fill="rgb(212,155,18)" fg:x="45704" fg:w="15"/><text x="89.3208%" y="495.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (15 samples, 0.03%)</title><rect x="89.0708%" y="469" width="0.0292%" height="15" fill="rgb(242,21,14)" fg:x="45704" fg:w="15"/><text x="89.3208%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (15 samples, 0.03%)</title><rect x="89.0708%" y="453" width="0.0292%" height="15" fill="rgb(222,19,48)" fg:x="45704" fg:w="15"/><text x="89.3208%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (15 samples, 0.03%)</title><rect x="89.0708%" y="437" width="0.0292%" height="15" fill="rgb(232,45,27)" fg:x="45704" fg:w="15"/><text x="89.3208%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (15 samples, 0.03%)</title><rect x="89.0708%" y="421" width="0.0292%" height="15" fill="rgb(249,103,42)" fg:x="45704" fg:w="15"/><text x="89.3208%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.03%)</title><rect x="89.0708%" y="405" width="0.0292%" height="15" fill="rgb(246,81,33)" fg:x="45704" fg:w="15"/><text x="89.3208%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (15 samples, 0.03%)</title><rect x="89.0708%" y="389" width="0.0292%" height="15" fill="rgb(252,33,42)" fg:x="45704" fg:w="15"/><text x="89.3208%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (14 samples, 0.03%)</title><rect x="89.0727%" y="373" width="0.0273%" height="15" fill="rgb(209,212,41)" fg:x="45705" fg:w="14"/><text x="89.3227%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (16 samples, 0.03%)</title><rect x="89.1000%" y="453" width="0.0312%" height="15" fill="rgb(207,154,6)" fg:x="45719" fg:w="16"/><text x="89.3500%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (16 samples, 0.03%)</title><rect x="89.1000%" y="437" width="0.0312%" height="15" fill="rgb(223,64,47)" fg:x="45719" fg:w="16"/><text x="89.3500%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (16 samples, 0.03%)</title><rect x="89.1000%" y="421" width="0.0312%" height="15" fill="rgb(211,161,38)" fg:x="45719" fg:w="16"/><text x="89.3500%" y="431.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (16 samples, 0.03%)</title><rect x="89.1000%" y="405" width="0.0312%" height="15" fill="rgb(219,138,40)" fg:x="45719" fg:w="16"/><text x="89.3500%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="89.1176%" y="389" width="0.0136%" height="15" fill="rgb(241,228,46)" fg:x="45728" fg:w="7"/><text x="89.3676%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="89.1176%" y="373" width="0.0136%" height="15" fill="rgb(223,209,38)" fg:x="45728" fg:w="7"/><text x="89.3676%" y="383.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="89.1195%" y="357" width="0.0117%" height="15" fill="rgb(236,164,45)" fg:x="45729" fg:w="6"/><text x="89.3695%" y="367.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.04%)</title><rect x="89.1000%" y="501" width="0.0390%" height="15" fill="rgb(231,15,5)" fg:x="45719" fg:w="20"/><text x="89.3500%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (20 samples, 0.04%)</title><rect x="89.1000%" y="485" width="0.0390%" height="15" fill="rgb(252,35,15)" fg:x="45719" fg:w="20"/><text x="89.3500%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (20 samples, 0.04%)</title><rect x="89.1000%" y="469" width="0.0390%" height="15" fill="rgb(248,181,18)" fg:x="45719" fg:w="20"/><text x="89.3500%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (8 samples, 0.02%)</title><rect x="89.1409%" y="341" width="0.0156%" height="15" fill="rgb(233,39,42)" fg:x="45740" fg:w="8"/><text x="89.3909%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="89.1429%" y="325" width="0.0136%" height="15" fill="rgb(238,110,33)" fg:x="45741" fg:w="7"/><text x="89.3929%" y="335.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="89.1448%" y="309" width="0.0117%" height="15" fill="rgb(233,195,10)" fg:x="45742" fg:w="6"/><text x="89.3948%" y="319.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (20 samples, 0.04%)</title><rect x="89.1409%" y="373" width="0.0390%" height="15" fill="rgb(254,105,3)" fg:x="45740" fg:w="20"/><text x="89.3909%" y="383.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (20 samples, 0.04%)</title><rect x="89.1409%" y="357" width="0.0390%" height="15" fill="rgb(221,225,9)" fg:x="45740" fg:w="20"/><text x="89.3909%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (21 samples, 0.04%)</title><rect x="89.1409%" y="405" width="0.0409%" height="15" fill="rgb(224,227,45)" fg:x="45740" fg:w="21"/><text x="89.3909%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (21 samples, 0.04%)</title><rect x="89.1409%" y="389" width="0.0409%" height="15" fill="rgb(229,198,43)" fg:x="45740" fg:w="21"/><text x="89.3909%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (24 samples, 0.05%)</title><rect x="89.1409%" y="421" width="0.0468%" height="15" fill="rgb(206,209,35)" fg:x="45740" fg:w="24"/><text x="89.3909%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26 samples, 0.05%)</title><rect x="89.1390%" y="453" width="0.0507%" height="15" fill="rgb(245,195,53)" fg:x="45739" fg:w="26"/><text x="89.3890%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (26 samples, 0.05%)</title><rect x="89.1390%" y="437" width="0.0507%" height="15" fill="rgb(240,92,26)" fg:x="45739" fg:w="26"/><text x="89.3890%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="89.1936%" y="293" width="0.0136%" height="15" fill="rgb(207,40,23)" fg:x="45767" fg:w="7"/><text x="89.4436%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="89.1936%" y="277" width="0.0136%" height="15" fill="rgb(223,111,35)" fg:x="45767" fg:w="7"/><text x="89.4436%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="89.1936%" y="261" width="0.0136%" height="15" fill="rgb(229,147,28)" fg:x="45767" fg:w="7"/><text x="89.4436%" y="271.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="89.1936%" y="245" width="0.0136%" height="15" fill="rgb(211,29,28)" fg:x="45767" fg:w="7"/><text x="89.4436%" y="255.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="89.1955%" y="229" width="0.0117%" height="15" fill="rgb(228,72,33)" fg:x="45768" fg:w="6"/><text x="89.4455%" y="239.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="89.1955%" y="213" width="0.0117%" height="15" fill="rgb(205,214,31)" fg:x="45768" fg:w="6"/><text x="89.4455%" y="223.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (6 samples, 0.01%)</title><rect x="89.1955%" y="197" width="0.0117%" height="15" fill="rgb(224,111,15)" fg:x="45768" fg:w="6"/><text x="89.4455%" y="207.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (16 samples, 0.03%)</title><rect x="89.1936%" y="357" width="0.0312%" height="15" fill="rgb(253,21,26)" fg:x="45767" fg:w="16"/><text x="89.4436%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (16 samples, 0.03%)</title><rect x="89.1936%" y="341" width="0.0312%" height="15" fill="rgb(245,139,43)" fg:x="45767" fg:w="16"/><text x="89.4436%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (16 samples, 0.03%)</title><rect x="89.1936%" y="325" width="0.0312%" height="15" fill="rgb(252,170,7)" fg:x="45767" fg:w="16"/><text x="89.4436%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (16 samples, 0.03%)</title><rect x="89.1936%" y="309" width="0.0312%" height="15" fill="rgb(231,118,14)" fg:x="45767" fg:w="16"/><text x="89.4436%" y="319.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (46 samples, 0.09%)</title><rect x="89.1390%" y="469" width="0.0896%" height="15" fill="rgb(238,83,0)" fg:x="45739" fg:w="46"/><text x="89.3890%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (20 samples, 0.04%)</title><rect x="89.1897%" y="453" width="0.0390%" height="15" fill="rgb(221,39,39)" fg:x="45765" fg:w="20"/><text x="89.4397%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (20 samples, 0.04%)</title><rect x="89.1897%" y="437" width="0.0390%" height="15" fill="rgb(222,119,46)" fg:x="45765" fg:w="20"/><text x="89.4397%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.04%)</title><rect x="89.1897%" y="421" width="0.0390%" height="15" fill="rgb(222,165,49)" fg:x="45765" fg:w="20"/><text x="89.4397%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.04%)</title><rect x="89.1897%" y="405" width="0.0390%" height="15" fill="rgb(219,113,52)" fg:x="45765" fg:w="20"/><text x="89.4397%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (20 samples, 0.04%)</title><rect x="89.1897%" y="389" width="0.0390%" height="15" fill="rgb(214,7,15)" fg:x="45765" fg:w="20"/><text x="89.4397%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (19 samples, 0.04%)</title><rect x="89.1916%" y="373" width="0.0370%" height="15" fill="rgb(235,32,4)" fg:x="45766" fg:w="19"/><text x="89.4416%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="89.2306%" y="389" width="0.0136%" height="15" fill="rgb(238,90,54)" fg:x="45786" fg:w="7"/><text x="89.4806%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (7 samples, 0.01%)</title><rect x="89.2306%" y="373" width="0.0136%" height="15" fill="rgb(213,208,19)" fg:x="45786" fg:w="7"/><text x="89.4806%" y="383.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.2306%" y="357" width="0.0136%" height="15" fill="rgb(233,156,4)" fg:x="45786" fg:w="7"/><text x="89.4806%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.2306%" y="341" width="0.0136%" height="15" fill="rgb(207,194,5)" fg:x="45786" fg:w="7"/><text x="89.4806%" y="351.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (76 samples, 0.15%)</title><rect x="89.1000%" y="533" width="0.1481%" height="15" fill="rgb(206,111,30)" fg:x="45719" fg:w="76"/><text x="89.3500%" y="543.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (76 samples, 0.15%)</title><rect x="89.1000%" y="517" width="0.1481%" height="15" fill="rgb(243,70,54)" fg:x="45719" fg:w="76"/><text x="89.3500%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (56 samples, 0.11%)</title><rect x="89.1390%" y="501" width="0.1091%" height="15" fill="rgb(242,28,8)" fg:x="45739" fg:w="56"/><text x="89.3890%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (56 samples, 0.11%)</title><rect x="89.1390%" y="485" width="0.1091%" height="15" fill="rgb(219,106,18)" fg:x="45739" fg:w="56"/><text x="89.3890%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (10 samples, 0.02%)</title><rect x="89.2286%" y="469" width="0.0195%" height="15" fill="rgb(244,222,10)" fg:x="45785" fg:w="10"/><text x="89.4786%" y="479.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.02%)</title><rect x="89.2286%" y="453" width="0.0195%" height="15" fill="rgb(236,179,52)" fg:x="45785" fg:w="10"/><text x="89.4786%" y="463.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.02%)</title><rect x="89.2286%" y="437" width="0.0195%" height="15" fill="rgb(213,23,39)" fg:x="45785" fg:w="10"/><text x="89.4786%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (10 samples, 0.02%)</title><rect x="89.2286%" y="421" width="0.0195%" height="15" fill="rgb(238,48,10)" fg:x="45785" fg:w="10"/><text x="89.4786%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (10 samples, 0.02%)</title><rect x="89.2286%" y="405" width="0.0195%" height="15" fill="rgb(251,196,23)" fg:x="45785" fg:w="10"/><text x="89.4786%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="89.2501%" y="341" width="0.0136%" height="15" fill="rgb(250,152,24)" fg:x="45796" fg:w="7"/><text x="89.5001%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (6 samples, 0.01%)</title><rect x="89.2520%" y="325" width="0.0117%" height="15" fill="rgb(209,150,17)" fg:x="45797" fg:w="6"/><text x="89.5020%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="89.2520%" y="309" width="0.0117%" height="15" fill="rgb(234,202,34)" fg:x="45797" fg:w="6"/><text x="89.5020%" y="319.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="89.2520%" y="293" width="0.0117%" height="15" fill="rgb(253,148,53)" fg:x="45797" fg:w="6"/><text x="89.5020%" y="303.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.02%)</title><rect x="89.2481%" y="405" width="0.0195%" height="15" fill="rgb(218,129,16)" fg:x="45795" fg:w="10"/><text x="89.4981%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.02%)</title><rect x="89.2481%" y="389" width="0.0195%" height="15" fill="rgb(216,85,19)" fg:x="45795" fg:w="10"/><text x="89.4981%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (10 samples, 0.02%)</title><rect x="89.2481%" y="373" width="0.0195%" height="15" fill="rgb(235,228,7)" fg:x="45795" fg:w="10"/><text x="89.4981%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (9 samples, 0.02%)</title><rect x="89.2501%" y="357" width="0.0175%" height="15" fill="rgb(245,175,0)" fg:x="45796" fg:w="9"/><text x="89.5001%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (8 samples, 0.02%)</title><rect x="89.2715%" y="325" width="0.0156%" height="15" fill="rgb(208,168,36)" fg:x="45807" fg:w="8"/><text x="89.5215%" y="335.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (8 samples, 0.02%)</title><rect x="89.2715%" y="309" width="0.0156%" height="15" fill="rgb(246,171,24)" fg:x="45807" fg:w="8"/><text x="89.5215%" y="319.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="89.2715%" y="293" width="0.0156%" height="15" fill="rgb(215,142,24)" fg:x="45807" fg:w="8"/><text x="89.5215%" y="303.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="89.2715%" y="277" width="0.0156%" height="15" fill="rgb(250,187,7)" fg:x="45807" fg:w="8"/><text x="89.5215%" y="287.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (634 samples, 1.24%)</title><rect x="88.0554%" y="645" width="1.2356%" height="15" fill="rgb(228,66,33)" fg:x="45183" fg:w="634"/><text x="88.3054%" y="655.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (605 samples, 1.18%)</title><rect x="88.1119%" y="629" width="1.1791%" height="15" fill="rgb(234,215,21)" fg:x="45212" fg:w="605"/><text x="88.3619%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (605 samples, 1.18%)</title><rect x="88.1119%" y="613" width="1.1791%" height="15" fill="rgb(222,191,20)" fg:x="45212" fg:w="605"/><text x="88.3619%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (163 samples, 0.32%)</title><rect x="88.9733%" y="597" width="0.3177%" height="15" fill="rgb(245,79,54)" fg:x="45654" fg:w="163"/><text x="89.2233%" y="607.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (163 samples, 0.32%)</title><rect x="88.9733%" y="581" width="0.3177%" height="15" fill="rgb(240,10,37)" fg:x="45654" fg:w="163"/><text x="89.2233%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (151 samples, 0.29%)</title><rect x="88.9967%" y="565" width="0.2943%" height="15" fill="rgb(214,192,32)" fg:x="45666" fg:w="151"/><text x="89.2467%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (151 samples, 0.29%)</title><rect x="88.9967%" y="549" width="0.2943%" height="15" fill="rgb(209,36,54)" fg:x="45666" fg:w="151"/><text x="89.2467%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (22 samples, 0.04%)</title><rect x="89.2481%" y="533" width="0.0429%" height="15" fill="rgb(220,10,11)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="543.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (22 samples, 0.04%)</title><rect x="89.2481%" y="517" width="0.0429%" height="15" fill="rgb(221,106,17)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.04%)</title><rect x="89.2481%" y="501" width="0.0429%" height="15" fill="rgb(251,142,44)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (22 samples, 0.04%)</title><rect x="89.2481%" y="485" width="0.0429%" height="15" fill="rgb(238,13,15)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (22 samples, 0.04%)</title><rect x="89.2481%" y="469" width="0.0429%" height="15" fill="rgb(208,107,27)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="479.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.04%)</title><rect x="89.2481%" y="453" width="0.0429%" height="15" fill="rgb(205,136,37)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (22 samples, 0.04%)</title><rect x="89.2481%" y="437" width="0.0429%" height="15" fill="rgb(250,205,27)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="447.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (22 samples, 0.04%)</title><rect x="89.2481%" y="421" width="0.0429%" height="15" fill="rgb(210,80,43)" fg:x="45795" fg:w="22"/><text x="89.4981%" y="431.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (12 samples, 0.02%)</title><rect x="89.2676%" y="405" width="0.0234%" height="15" fill="rgb(247,160,36)" fg:x="45805" fg:w="12"/><text x="89.5176%" y="415.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (12 samples, 0.02%)</title><rect x="89.2676%" y="389" width="0.0234%" height="15" fill="rgb(234,13,49)" fg:x="45805" fg:w="12"/><text x="89.5176%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12 samples, 0.02%)</title><rect x="89.2676%" y="373" width="0.0234%" height="15" fill="rgb(234,122,0)" fg:x="45805" fg:w="12"/><text x="89.5176%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (12 samples, 0.02%)</title><rect x="89.2676%" y="357" width="0.0234%" height="15" fill="rgb(207,146,38)" fg:x="45805" fg:w="12"/><text x="89.5176%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (11 samples, 0.02%)</title><rect x="89.2696%" y="341" width="0.0214%" height="15" fill="rgb(207,177,25)" fg:x="45806" fg:w="11"/><text x="89.5196%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="89.2969%" y="453" width="0.0136%" height="15" fill="rgb(211,178,42)" fg:x="45820" fg:w="7"/><text x="89.5469%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="89.2988%" y="437" width="0.0117%" height="15" fill="rgb(230,69,54)" fg:x="45821" fg:w="6"/><text x="89.5488%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="89.2988%" y="421" width="0.0117%" height="15" fill="rgb(214,135,41)" fg:x="45821" fg:w="6"/><text x="89.5488%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="89.2988%" y="405" width="0.0117%" height="15" fill="rgb(237,67,25)" fg:x="45821" fg:w="6"/><text x="89.5488%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::nfd (7 samples, 0.01%)</title><rect x="89.3144%" y="453" width="0.0136%" height="15" fill="rgb(222,189,50)" fg:x="45829" fg:w="7"/><text x="89.5644%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="89.3144%" y="437" width="0.0136%" height="15" fill="rgb(245,148,34)" fg:x="45829" fg:w="7"/><text x="89.5644%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="89.3144%" y="421" width="0.0136%" height="15" fill="rgb(222,29,6)" fg:x="45829" fg:w="7"/><text x="89.5644%" y="431.50"></text></g><g><title>swiftide-bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="89.3144%" y="405" width="0.0136%" height="15" fill="rgb(221,189,43)" fg:x="45829" fg:w="7"/><text x="89.5644%" y="415.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="89.3163%" y="389" width="0.0117%" height="15" fill="rgb(207,36,27)" fg:x="45830" fg:w="6"/><text x="89.5663%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (20 samples, 0.04%)</title><rect x="89.2969%" y="485" width="0.0390%" height="15" fill="rgb(217,90,24)" fg:x="45820" fg:w="20"/><text x="89.5469%" y="495.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (20 samples, 0.04%)</title><rect x="89.2969%" y="469" width="0.0390%" height="15" fill="rgb(224,66,35)" fg:x="45820" fg:w="20"/><text x="89.5469%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (21 samples, 0.04%)</title><rect x="89.2969%" y="517" width="0.0409%" height="15" fill="rgb(221,13,50)" fg:x="45820" fg:w="21"/><text x="89.5469%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (21 samples, 0.04%)</title><rect x="89.2969%" y="501" width="0.0409%" height="15" fill="rgb(236,68,49)" fg:x="45820" fg:w="21"/><text x="89.5469%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (27 samples, 0.05%)</title><rect x="89.2930%" y="565" width="0.0526%" height="15" fill="rgb(229,146,28)" fg:x="45818" fg:w="27"/><text x="89.5430%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (27 samples, 0.05%)</title><rect x="89.2930%" y="549" width="0.0526%" height="15" fill="rgb(225,31,38)" fg:x="45818" fg:w="27"/><text x="89.5430%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (26 samples, 0.05%)</title><rect x="89.2949%" y="533" width="0.0507%" height="15" fill="rgb(250,208,3)" fg:x="45819" fg:w="26"/><text x="89.5449%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="89.3573%" y="453" width="0.0136%" height="15" fill="rgb(246,54,23)" fg:x="45851" fg:w="7"/><text x="89.6073%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (7 samples, 0.01%)</title><rect x="89.3573%" y="437" width="0.0136%" height="15" fill="rgb(243,76,11)" fg:x="45851" fg:w="7"/><text x="89.6073%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.3573%" y="421" width="0.0136%" height="15" fill="rgb(245,21,50)" fg:x="45851" fg:w="7"/><text x="89.6073%" y="431.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.3573%" y="405" width="0.0136%" height="15" fill="rgb(228,9,43)" fg:x="45851" fg:w="7"/><text x="89.6073%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.02%)</title><rect x="89.3553%" y="501" width="0.0195%" height="15" fill="rgb(208,100,47)" fg:x="45850" fg:w="10"/><text x="89.6053%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (10 samples, 0.02%)</title><rect x="89.3553%" y="485" width="0.0195%" height="15" fill="rgb(232,26,8)" fg:x="45850" fg:w="10"/><text x="89.6053%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (10 samples, 0.02%)</title><rect x="89.3553%" y="469" width="0.0195%" height="15" fill="rgb(216,166,38)" fg:x="45850" fg:w="10"/><text x="89.6053%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (15 samples, 0.03%)</title><rect x="89.3787%" y="405" width="0.0292%" height="15" fill="rgb(251,202,51)" fg:x="45862" fg:w="15"/><text x="89.6287%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (15 samples, 0.03%)</title><rect x="89.3787%" y="389" width="0.0292%" height="15" fill="rgb(254,216,34)" fg:x="45862" fg:w="15"/><text x="89.6287%" y="399.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (15 samples, 0.03%)</title><rect x="89.3787%" y="373" width="0.0292%" height="15" fill="rgb(251,32,27)" fg:x="45862" fg:w="15"/><text x="89.6287%" y="383.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (15 samples, 0.03%)</title><rect x="89.3787%" y="357" width="0.0292%" height="15" fill="rgb(208,127,28)" fg:x="45862" fg:w="15"/><text x="89.6287%" y="367.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.04%)</title><rect x="89.3748%" y="469" width="0.0409%" height="15" fill="rgb(224,137,22)" fg:x="45860" fg:w="21"/><text x="89.6248%" y="479.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.04%)</title><rect x="89.3748%" y="453" width="0.0409%" height="15" fill="rgb(254,70,32)" fg:x="45860" fg:w="21"/><text x="89.6248%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (21 samples, 0.04%)</title><rect x="89.3748%" y="437" width="0.0409%" height="15" fill="rgb(229,75,37)" fg:x="45860" fg:w="21"/><text x="89.6248%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (20 samples, 0.04%)</title><rect x="89.3768%" y="421" width="0.0390%" height="15" fill="rgb(252,64,23)" fg:x="45861" fg:w="20"/><text x="89.6268%" y="431.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (67 samples, 0.13%)</title><rect x="89.2930%" y="581" width="0.1306%" height="15" fill="rgb(232,162,48)" fg:x="45818" fg:w="67"/><text x="89.5430%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (40 samples, 0.08%)</title><rect x="89.3456%" y="565" width="0.0780%" height="15" fill="rgb(246,160,12)" fg:x="45845" fg:w="40"/><text x="89.5956%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (40 samples, 0.08%)</title><rect x="89.3456%" y="549" width="0.0780%" height="15" fill="rgb(247,166,0)" fg:x="45845" fg:w="40"/><text x="89.5956%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (35 samples, 0.07%)</title><rect x="89.3553%" y="533" width="0.0682%" height="15" fill="rgb(249,219,21)" fg:x="45850" fg:w="35"/><text x="89.6053%" y="543.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (35 samples, 0.07%)</title><rect x="89.3553%" y="517" width="0.0682%" height="15" fill="rgb(205,209,3)" fg:x="45850" fg:w="35"/><text x="89.6053%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (25 samples, 0.05%)</title><rect x="89.3748%" y="501" width="0.0487%" height="15" fill="rgb(243,44,1)" fg:x="45860" fg:w="25"/><text x="89.6248%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (25 samples, 0.05%)</title><rect x="89.3748%" y="485" width="0.0487%" height="15" fill="rgb(206,159,16)" fg:x="45860" fg:w="25"/><text x="89.6248%" y="495.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.01%)</title><rect x="89.4235%" y="549" width="0.0136%" height="15" fill="rgb(244,77,30)" fg:x="45885" fg:w="7"/><text x="89.6735%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (7 samples, 0.01%)</title><rect x="89.4235%" y="533" width="0.0136%" height="15" fill="rgb(218,69,12)" fg:x="45885" fg:w="7"/><text x="89.6735%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (7 samples, 0.01%)</title><rect x="89.4235%" y="517" width="0.0136%" height="15" fill="rgb(212,87,7)" fg:x="45885" fg:w="7"/><text x="89.6735%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (17 samples, 0.03%)</title><rect x="89.4235%" y="581" width="0.0331%" height="15" fill="rgb(245,114,25)" fg:x="45885" fg:w="17"/><text x="89.6735%" y="591.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 0.03%)</title><rect x="89.4235%" y="565" width="0.0331%" height="15" fill="rgb(210,61,42)" fg:x="45885" fg:w="17"/><text x="89.6735%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (10 samples, 0.02%)</title><rect x="89.4372%" y="549" width="0.0195%" height="15" fill="rgb(211,52,33)" fg:x="45892" fg:w="10"/><text x="89.6872%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (10 samples, 0.02%)</title><rect x="89.4372%" y="533" width="0.0195%" height="15" fill="rgb(234,58,33)" fg:x="45892" fg:w="10"/><text x="89.6872%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (7 samples, 0.01%)</title><rect x="89.4430%" y="517" width="0.0136%" height="15" fill="rgb(220,115,36)" fg:x="45895" fg:w="7"/><text x="89.6930%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (7 samples, 0.01%)</title><rect x="89.4430%" y="501" width="0.0136%" height="15" fill="rgb(243,153,54)" fg:x="45895" fg:w="7"/><text x="89.6930%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.01%)</title><rect x="89.4430%" y="485" width="0.0136%" height="15" fill="rgb(251,47,18)" fg:x="45895" fg:w="7"/><text x="89.6930%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (7 samples, 0.01%)</title><rect x="89.4430%" y="469" width="0.0136%" height="15" fill="rgb(242,102,42)" fg:x="45895" fg:w="7"/><text x="89.6930%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (7 samples, 0.01%)</title><rect x="89.4430%" y="453" width="0.0136%" height="15" fill="rgb(234,31,38)" fg:x="45895" fg:w="7"/><text x="89.6930%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (6 samples, 0.01%)</title><rect x="89.4567%" y="485" width="0.0117%" height="15" fill="rgb(221,117,51)" fg:x="45902" fg:w="6"/><text x="89.7067%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (6 samples, 0.01%)</title><rect x="89.4567%" y="469" width="0.0117%" height="15" fill="rgb(212,20,18)" fg:x="45902" fg:w="6"/><text x="89.7067%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="89.4567%" y="453" width="0.0117%" height="15" fill="rgb(245,133,36)" fg:x="45902" fg:w="6"/><text x="89.7067%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="89.4567%" y="437" width="0.0117%" height="15" fill="rgb(212,6,19)" fg:x="45902" fg:w="6"/><text x="89.7067%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="89.4567%" y="533" width="0.0156%" height="15" fill="rgb(218,1,36)" fg:x="45902" fg:w="8"/><text x="89.7067%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (8 samples, 0.02%)</title><rect x="89.4567%" y="517" width="0.0156%" height="15" fill="rgb(246,84,54)" fg:x="45902" fg:w="8"/><text x="89.7067%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (8 samples, 0.02%)</title><rect x="89.4567%" y="501" width="0.0156%" height="15" fill="rgb(242,110,6)" fg:x="45902" fg:w="8"/><text x="89.7067%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="89.4761%" y="373" width="0.0117%" height="15" fill="rgb(214,47,5)" fg:x="45912" fg:w="6"/><text x="89.7261%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="89.4761%" y="357" width="0.0117%" height="15" fill="rgb(218,159,25)" fg:x="45912" fg:w="6"/><text x="89.7261%" y="367.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="89.4761%" y="341" width="0.0117%" height="15" fill="rgb(215,211,28)" fg:x="45912" fg:w="6"/><text x="89.7261%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (15 samples, 0.03%)</title><rect x="89.4761%" y="437" width="0.0292%" height="15" fill="rgb(238,59,32)" fg:x="45912" fg:w="15"/><text x="89.7261%" y="447.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (15 samples, 0.03%)</title><rect x="89.4761%" y="421" width="0.0292%" height="15" fill="rgb(226,82,3)" fg:x="45912" fg:w="15"/><text x="89.7261%" y="431.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (15 samples, 0.03%)</title><rect x="89.4761%" y="405" width="0.0292%" height="15" fill="rgb(240,164,32)" fg:x="45912" fg:w="15"/><text x="89.7261%" y="415.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (15 samples, 0.03%)</title><rect x="89.4761%" y="389" width="0.0292%" height="15" fill="rgb(232,46,7)" fg:x="45912" fg:w="15"/><text x="89.7261%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.04%)</title><rect x="89.4722%" y="485" width="0.0409%" height="15" fill="rgb(229,129,53)" fg:x="45910" fg:w="21"/><text x="89.7222%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (21 samples, 0.04%)</title><rect x="89.4722%" y="469" width="0.0409%" height="15" fill="rgb(234,188,29)" fg:x="45910" fg:w="21"/><text x="89.7222%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (20 samples, 0.04%)</title><rect x="89.4742%" y="453" width="0.0390%" height="15" fill="rgb(246,141,4)" fg:x="45911" fg:w="20"/><text x="89.7242%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (6 samples, 0.01%)</title><rect x="89.5171%" y="309" width="0.0117%" height="15" fill="rgb(229,23,39)" fg:x="45933" fg:w="6"/><text x="89.7671%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="89.5171%" y="293" width="0.0117%" height="15" fill="rgb(206,12,3)" fg:x="45933" fg:w="6"/><text x="89.7671%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (14 samples, 0.03%)</title><rect x="89.5171%" y="373" width="0.0273%" height="15" fill="rgb(252,226,20)" fg:x="45933" fg:w="14"/><text x="89.7671%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (14 samples, 0.03%)</title><rect x="89.5171%" y="357" width="0.0273%" height="15" fill="rgb(216,123,35)" fg:x="45933" fg:w="14"/><text x="89.7671%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (14 samples, 0.03%)</title><rect x="89.5171%" y="341" width="0.0273%" height="15" fill="rgb(212,68,40)" fg:x="45933" fg:w="14"/><text x="89.7671%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (14 samples, 0.03%)</title><rect x="89.5171%" y="325" width="0.0273%" height="15" fill="rgb(254,125,32)" fg:x="45933" fg:w="14"/><text x="89.7671%" y="335.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (133 samples, 0.26%)</title><rect x="89.2910%" y="645" width="0.2592%" height="15" fill="rgb(253,97,22)" fg:x="45817" fg:w="133"/><text x="89.5410%" y="655.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (133 samples, 0.26%)</title><rect x="89.2910%" y="629" width="0.2592%" height="15" fill="rgb(241,101,14)" fg:x="45817" fg:w="133"/><text x="89.5410%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (132 samples, 0.26%)</title><rect x="89.2930%" y="613" width="0.2572%" height="15" fill="rgb(238,103,29)" fg:x="45818" fg:w="132"/><text x="89.5430%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (132 samples, 0.26%)</title><rect x="89.2930%" y="597" width="0.2572%" height="15" fill="rgb(233,195,47)" fg:x="45818" fg:w="132"/><text x="89.5430%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (48 samples, 0.09%)</title><rect x="89.4567%" y="581" width="0.0935%" height="15" fill="rgb(246,218,30)" fg:x="45902" fg:w="48"/><text x="89.7067%" y="591.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (48 samples, 0.09%)</title><rect x="89.4567%" y="565" width="0.0935%" height="15" fill="rgb(219,145,47)" fg:x="45902" fg:w="48"/><text x="89.7067%" y="575.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (48 samples, 0.09%)</title><rect x="89.4567%" y="549" width="0.0935%" height="15" fill="rgb(243,12,26)" fg:x="45902" fg:w="48"/><text x="89.7067%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (40 samples, 0.08%)</title><rect x="89.4722%" y="533" width="0.0780%" height="15" fill="rgb(214,87,16)" fg:x="45910" fg:w="40"/><text x="89.7222%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (40 samples, 0.08%)</title><rect x="89.4722%" y="517" width="0.0780%" height="15" fill="rgb(208,99,42)" fg:x="45910" fg:w="40"/><text x="89.7222%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (40 samples, 0.08%)</title><rect x="89.4722%" y="501" width="0.0780%" height="15" fill="rgb(253,99,2)" fg:x="45910" fg:w="40"/><text x="89.7222%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (19 samples, 0.04%)</title><rect x="89.5132%" y="485" width="0.0370%" height="15" fill="rgb(220,168,23)" fg:x="45931" fg:w="19"/><text x="89.7632%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (19 samples, 0.04%)</title><rect x="89.5132%" y="469" width="0.0370%" height="15" fill="rgb(242,38,24)" fg:x="45931" fg:w="19"/><text x="89.7632%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (18 samples, 0.04%)</title><rect x="89.5151%" y="453" width="0.0351%" height="15" fill="rgb(225,182,9)" fg:x="45932" fg:w="18"/><text x="89.7651%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (18 samples, 0.04%)</title><rect x="89.5151%" y="437" width="0.0351%" height="15" fill="rgb(243,178,37)" fg:x="45932" fg:w="18"/><text x="89.7651%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.04%)</title><rect x="89.5151%" y="421" width="0.0351%" height="15" fill="rgb(232,139,19)" fg:x="45932" fg:w="18"/><text x="89.7651%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (18 samples, 0.04%)</title><rect x="89.5151%" y="405" width="0.0351%" height="15" fill="rgb(225,201,24)" fg:x="45932" fg:w="18"/><text x="89.7651%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (17 samples, 0.03%)</title><rect x="89.5171%" y="389" width="0.0331%" height="15" fill="rgb(221,47,46)" fg:x="45933" fg:w="17"/><text x="89.7671%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (14 samples, 0.03%)</title><rect x="89.5580%" y="549" width="0.0273%" height="15" fill="rgb(249,23,13)" fg:x="45954" fg:w="14"/><text x="89.8080%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (14 samples, 0.03%)</title><rect x="89.5580%" y="533" width="0.0273%" height="15" fill="rgb(219,9,5)" fg:x="45954" fg:w="14"/><text x="89.8080%" y="543.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (14 samples, 0.03%)</title><rect x="89.5580%" y="517" width="0.0273%" height="15" fill="rgb(254,171,16)" fg:x="45954" fg:w="14"/><text x="89.8080%" y="527.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (14 samples, 0.03%)</title><rect x="89.5580%" y="501" width="0.0273%" height="15" fill="rgb(230,171,20)" fg:x="45954" fg:w="14"/><text x="89.8080%" y="511.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (19 samples, 0.04%)</title><rect x="89.5522%" y="597" width="0.0370%" height="15" fill="rgb(210,71,41)" fg:x="45951" fg:w="19"/><text x="89.8022%" y="607.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (19 samples, 0.04%)</title><rect x="89.5522%" y="581" width="0.0370%" height="15" fill="rgb(206,173,20)" fg:x="45951" fg:w="19"/><text x="89.8022%" y="591.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (17 samples, 0.03%)</title><rect x="89.5560%" y="565" width="0.0331%" height="15" fill="rgb(233,88,34)" fg:x="45953" fg:w="17"/><text x="89.8060%" y="575.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (11 samples, 0.02%)</title><rect x="89.5892%" y="501" width="0.0214%" height="15" fill="rgb(223,209,46)" fg:x="45970" fg:w="11"/><text x="89.8392%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (11 samples, 0.02%)</title><rect x="89.5892%" y="485" width="0.0214%" height="15" fill="rgb(250,43,18)" fg:x="45970" fg:w="11"/><text x="89.8392%" y="495.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (11 samples, 0.02%)</title><rect x="89.5892%" y="469" width="0.0214%" height="15" fill="rgb(208,13,10)" fg:x="45970" fg:w="11"/><text x="89.8392%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (11 samples, 0.02%)</title><rect x="89.5892%" y="453" width="0.0214%" height="15" fill="rgb(212,200,36)" fg:x="45970" fg:w="11"/><text x="89.8392%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (13 samples, 0.03%)</title><rect x="89.5892%" y="517" width="0.0253%" height="15" fill="rgb(225,90,30)" fg:x="45970" fg:w="13"/><text x="89.8392%" y="527.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.03%)</title><rect x="89.5892%" y="549" width="0.0273%" height="15" fill="rgb(236,182,39)" fg:x="45970" fg:w="14"/><text x="89.8392%" y="559.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (14 samples, 0.03%)</title><rect x="89.5892%" y="533" width="0.0273%" height="15" fill="rgb(212,144,35)" fg:x="45970" fg:w="14"/><text x="89.8392%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.02%)</title><rect x="89.6243%" y="341" width="0.0195%" height="15" fill="rgb(228,63,44)" fg:x="45988" fg:w="10"/><text x="89.8743%" y="351.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (7 samples, 0.01%)</title><rect x="89.6301%" y="325" width="0.0136%" height="15" fill="rgb(228,109,6)" fg:x="45991" fg:w="7"/><text x="89.8801%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (7 samples, 0.01%)</title><rect x="89.6301%" y="309" width="0.0136%" height="15" fill="rgb(238,117,24)" fg:x="45991" fg:w="7"/><text x="89.8801%" y="319.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (7 samples, 0.01%)</title><rect x="89.6301%" y="293" width="0.0136%" height="15" fill="rgb(242,26,26)" fg:x="45991" fg:w="7"/><text x="89.8801%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (12 samples, 0.02%)</title><rect x="89.6223%" y="389" width="0.0234%" height="15" fill="rgb(221,92,48)" fg:x="45987" fg:w="12"/><text x="89.8723%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (12 samples, 0.02%)</title><rect x="89.6223%" y="373" width="0.0234%" height="15" fill="rgb(209,209,32)" fg:x="45987" fg:w="12"/><text x="89.8723%" y="383.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="89.6223%" y="357" width="0.0234%" height="15" fill="rgb(221,70,22)" fg:x="45987" fg:w="12"/><text x="89.8723%" y="367.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="89.6671%" y="357" width="0.0136%" height="15" fill="rgb(248,145,5)" fg:x="46010" fg:w="7"/><text x="89.9171%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (33 samples, 0.06%)</title><rect x="89.6184%" y="453" width="0.0643%" height="15" fill="rgb(226,116,26)" fg:x="45985" fg:w="33"/><text x="89.8684%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (32 samples, 0.06%)</title><rect x="89.6204%" y="437" width="0.0624%" height="15" fill="rgb(244,5,17)" fg:x="45986" fg:w="32"/><text x="89.8704%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (32 samples, 0.06%)</title><rect x="89.6204%" y="421" width="0.0624%" height="15" fill="rgb(252,159,33)" fg:x="45986" fg:w="32"/><text x="89.8704%" y="431.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (32 samples, 0.06%)</title><rect x="89.6204%" y="405" width="0.0624%" height="15" fill="rgb(206,71,0)" fg:x="45986" fg:w="32"/><text x="89.8704%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (9 samples, 0.02%)</title><rect x="89.6652%" y="389" width="0.0175%" height="15" fill="rgb(233,118,54)" fg:x="46009" fg:w="9"/><text x="89.9152%" y="399.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9 samples, 0.02%)</title><rect x="89.6652%" y="373" width="0.0175%" height="15" fill="rgb(234,83,48)" fg:x="46009" fg:w="9"/><text x="89.9152%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (42 samples, 0.08%)</title><rect x="89.6165%" y="469" width="0.0819%" height="15" fill="rgb(228,3,54)" fg:x="45984" fg:w="42"/><text x="89.8665%" y="479.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (43 samples, 0.08%)</title><rect x="89.6165%" y="517" width="0.0838%" height="15" fill="rgb(226,155,13)" fg:x="45984" fg:w="43"/><text x="89.8665%" y="527.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (43 samples, 0.08%)</title><rect x="89.6165%" y="501" width="0.0838%" height="15" fill="rgb(241,28,37)" fg:x="45984" fg:w="43"/><text x="89.8665%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (43 samples, 0.08%)</title><rect x="89.6165%" y="485" width="0.0838%" height="15" fill="rgb(233,93,10)" fg:x="45984" fg:w="43"/><text x="89.8665%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (10 samples, 0.02%)</title><rect x="89.7061%" y="373" width="0.0195%" height="15" fill="rgb(225,113,19)" fg:x="46030" fg:w="10"/><text x="89.9561%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (10 samples, 0.02%)</title><rect x="89.7061%" y="357" width="0.0195%" height="15" fill="rgb(241,2,18)" fg:x="46030" fg:w="10"/><text x="89.9561%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (10 samples, 0.02%)</title><rect x="89.7061%" y="341" width="0.0195%" height="15" fill="rgb(228,207,21)" fg:x="46030" fg:w="10"/><text x="89.9561%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (10 samples, 0.02%)</title><rect x="89.7061%" y="325" width="0.0195%" height="15" fill="rgb(213,211,35)" fg:x="46030" fg:w="10"/><text x="89.9561%" y="335.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (14 samples, 0.03%)</title><rect x="89.7042%" y="389" width="0.0273%" height="15" fill="rgb(209,83,10)" fg:x="46029" fg:w="14"/><text x="89.9542%" y="399.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (17 samples, 0.03%)</title><rect x="89.7003%" y="517" width="0.0331%" height="15" fill="rgb(209,164,1)" fg:x="46027" fg:w="17"/><text x="89.9503%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 0.03%)</title><rect x="89.7003%" y="501" width="0.0331%" height="15" fill="rgb(213,184,43)" fg:x="46027" fg:w="17"/><text x="89.9503%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (17 samples, 0.03%)</title><rect x="89.7003%" y="485" width="0.0331%" height="15" fill="rgb(231,61,34)" fg:x="46027" fg:w="17"/><text x="89.9503%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (17 samples, 0.03%)</title><rect x="89.7003%" y="469" width="0.0331%" height="15" fill="rgb(235,75,3)" fg:x="46027" fg:w="17"/><text x="89.9503%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (15 samples, 0.03%)</title><rect x="89.7042%" y="453" width="0.0292%" height="15" fill="rgb(220,106,47)" fg:x="46029" fg:w="15"/><text x="89.9542%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (15 samples, 0.03%)</title><rect x="89.7042%" y="437" width="0.0292%" height="15" fill="rgb(210,196,33)" fg:x="46029" fg:w="15"/><text x="89.9542%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.03%)</title><rect x="89.7042%" y="421" width="0.0292%" height="15" fill="rgb(229,154,42)" fg:x="46029" fg:w="15"/><text x="89.9542%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (15 samples, 0.03%)</title><rect x="89.7042%" y="405" width="0.0292%" height="15" fill="rgb(228,114,26)" fg:x="46029" fg:w="15"/><text x="89.9542%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (6 samples, 0.01%)</title><rect x="89.7353%" y="373" width="0.0117%" height="15" fill="rgb(208,144,1)" fg:x="46045" fg:w="6"/><text x="89.9853%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (6 samples, 0.01%)</title><rect x="89.7353%" y="357" width="0.0117%" height="15" fill="rgb(239,112,37)" fg:x="46045" fg:w="6"/><text x="89.9853%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="89.7353%" y="341" width="0.0117%" height="15" fill="rgb(210,96,50)" fg:x="46045" fg:w="6"/><text x="89.9853%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (6 samples, 0.01%)</title><rect x="89.7353%" y="325" width="0.0117%" height="15" fill="rgb(222,178,2)" fg:x="46045" fg:w="6"/><text x="89.9853%" y="335.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.02%)</title><rect x="89.7334%" y="437" width="0.0156%" height="15" fill="rgb(226,74,18)" fg:x="46044" fg:w="8"/><text x="89.9834%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="89.7334%" y="421" width="0.0156%" height="15" fill="rgb(225,67,54)" fg:x="46044" fg:w="8"/><text x="89.9834%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (8 samples, 0.02%)</title><rect x="89.7334%" y="405" width="0.0156%" height="15" fill="rgb(251,92,32)" fg:x="46044" fg:w="8"/><text x="89.9834%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (8 samples, 0.02%)</title><rect x="89.7334%" y="389" width="0.0156%" height="15" fill="rgb(228,149,22)" fg:x="46044" fg:w="8"/><text x="89.9834%" y="399.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (83 samples, 0.16%)</title><rect x="89.5892%" y="565" width="0.1618%" height="15" fill="rgb(243,54,13)" fg:x="45970" fg:w="83"/><text x="89.8392%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (69 samples, 0.13%)</title><rect x="89.6165%" y="549" width="0.1345%" height="15" fill="rgb(243,180,28)" fg:x="45984" fg:w="69"/><text x="89.8665%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (69 samples, 0.13%)</title><rect x="89.6165%" y="533" width="0.1345%" height="15" fill="rgb(208,167,24)" fg:x="45984" fg:w="69"/><text x="89.8665%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (9 samples, 0.02%)</title><rect x="89.7334%" y="517" width="0.0175%" height="15" fill="rgb(245,73,45)" fg:x="46044" fg:w="9"/><text x="89.9834%" y="527.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (9 samples, 0.02%)</title><rect x="89.7334%" y="501" width="0.0175%" height="15" fill="rgb(237,203,48)" fg:x="46044" fg:w="9"/><text x="89.9834%" y="511.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="89.7334%" y="485" width="0.0175%" height="15" fill="rgb(211,197,16)" fg:x="46044" fg:w="9"/><text x="89.9834%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (9 samples, 0.02%)</title><rect x="89.7334%" y="469" width="0.0175%" height="15" fill="rgb(243,99,51)" fg:x="46044" fg:w="9"/><text x="89.9834%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (9 samples, 0.02%)</title><rect x="89.7334%" y="453" width="0.0175%" height="15" fill="rgb(215,123,29)" fg:x="46044" fg:w="9"/><text x="89.9834%" y="463.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="89.7529%" y="485" width="0.0136%" height="15" fill="rgb(239,186,37)" fg:x="46054" fg:w="7"/><text x="90.0029%" y="495.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (7 samples, 0.01%)</title><rect x="89.7529%" y="469" width="0.0136%" height="15" fill="rgb(252,136,39)" fg:x="46054" fg:w="7"/><text x="90.0029%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.7529%" y="453" width="0.0136%" height="15" fill="rgb(223,213,32)" fg:x="46054" fg:w="7"/><text x="90.0029%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.7529%" y="437" width="0.0136%" height="15" fill="rgb(233,115,5)" fg:x="46054" fg:w="7"/><text x="90.0029%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.02%)</title><rect x="89.7509%" y="533" width="0.0195%" height="15" fill="rgb(207,226,44)" fg:x="46053" fg:w="10"/><text x="90.0009%" y="543.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (10 samples, 0.02%)</title><rect x="89.7509%" y="517" width="0.0195%" height="15" fill="rgb(208,126,0)" fg:x="46053" fg:w="10"/><text x="90.0009%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (10 samples, 0.02%)</title><rect x="89.7509%" y="501" width="0.0195%" height="15" fill="rgb(244,66,21)" fg:x="46053" fg:w="10"/><text x="90.0009%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (13 samples, 0.03%)</title><rect x="89.7860%" y="373" width="0.0253%" height="15" fill="rgb(222,97,12)" fg:x="46071" fg:w="13"/><text x="90.0360%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (12 samples, 0.02%)</title><rect x="89.7880%" y="357" width="0.0234%" height="15" fill="rgb(219,213,19)" fg:x="46072" fg:w="12"/><text x="90.0380%" y="367.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (12 samples, 0.02%)</title><rect x="89.7880%" y="341" width="0.0234%" height="15" fill="rgb(252,169,30)" fg:x="46072" fg:w="12"/><text x="90.0380%" y="351.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (12 samples, 0.02%)</title><rect x="89.7880%" y="325" width="0.0234%" height="15" fill="rgb(206,32,51)" fg:x="46072" fg:w="12"/><text x="90.0380%" y="335.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (6 samples, 0.01%)</title><rect x="89.7997%" y="309" width="0.0117%" height="15" fill="rgb(250,172,42)" fg:x="46078" fg:w="6"/><text x="90.0497%" y="319.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="89.7997%" y="293" width="0.0117%" height="15" fill="rgb(209,34,43)" fg:x="46078" fg:w="6"/><text x="90.0497%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="89.7997%" y="277" width="0.0117%" height="15" fill="rgb(223,11,35)" fg:x="46078" fg:w="6"/><text x="90.0497%" y="287.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="89.7997%" y="261" width="0.0117%" height="15" fill="rgb(251,219,26)" fg:x="46078" fg:w="6"/><text x="90.0497%" y="271.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (6 samples, 0.01%)</title><rect x="89.7997%" y="245" width="0.0117%" height="15" fill="rgb(231,119,3)" fg:x="46078" fg:w="6"/><text x="90.0497%" y="255.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (36 samples, 0.07%)</title><rect x="89.7509%" y="565" width="0.0702%" height="15" fill="rgb(216,97,11)" fg:x="46053" fg:w="36"/><text x="90.0009%" y="575.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (36 samples, 0.07%)</title><rect x="89.7509%" y="549" width="0.0702%" height="15" fill="rgb(223,59,9)" fg:x="46053" fg:w="36"/><text x="90.0009%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (26 samples, 0.05%)</title><rect x="89.7704%" y="533" width="0.0507%" height="15" fill="rgb(233,93,31)" fg:x="46063" fg:w="26"/><text x="90.0204%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (26 samples, 0.05%)</title><rect x="89.7704%" y="517" width="0.0507%" height="15" fill="rgb(239,81,33)" fg:x="46063" fg:w="26"/><text x="90.0204%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (21 samples, 0.04%)</title><rect x="89.7802%" y="501" width="0.0409%" height="15" fill="rgb(213,120,34)" fg:x="46068" fg:w="21"/><text x="90.0302%" y="511.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.04%)</title><rect x="89.7802%" y="485" width="0.0409%" height="15" fill="rgb(243,49,53)" fg:x="46068" fg:w="21"/><text x="90.0302%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (21 samples, 0.04%)</title><rect x="89.7802%" y="469" width="0.0409%" height="15" fill="rgb(247,216,33)" fg:x="46068" fg:w="21"/><text x="90.0302%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (21 samples, 0.04%)</title><rect x="89.7802%" y="453" width="0.0409%" height="15" fill="rgb(226,26,14)" fg:x="46068" fg:w="21"/><text x="90.0302%" y="463.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.04%)</title><rect x="89.7802%" y="437" width="0.0409%" height="15" fill="rgb(215,49,53)" fg:x="46068" fg:w="21"/><text x="90.0302%" y="447.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.04%)</title><rect x="89.7802%" y="421" width="0.0409%" height="15" fill="rgb(245,162,40)" fg:x="46068" fg:w="21"/><text x="90.0302%" y="431.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (21 samples, 0.04%)</title><rect x="89.7802%" y="405" width="0.0409%" height="15" fill="rgb(229,68,17)" fg:x="46068" fg:w="21"/><text x="90.0302%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (20 samples, 0.04%)</title><rect x="89.7821%" y="389" width="0.0390%" height="15" fill="rgb(213,182,10)" fg:x="46069" fg:w="20"/><text x="90.0321%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (8 samples, 0.02%)</title><rect x="89.8230%" y="469" width="0.0156%" height="15" fill="rgb(245,125,30)" fg:x="46090" fg:w="8"/><text x="90.0730%" y="479.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (8 samples, 0.02%)</title><rect x="89.8230%" y="453" width="0.0156%" height="15" fill="rgb(232,202,2)" fg:x="46090" fg:w="8"/><text x="90.0730%" y="463.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="89.8230%" y="437" width="0.0156%" height="15" fill="rgb(237,140,51)" fg:x="46090" fg:w="8"/><text x="90.0730%" y="447.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (8 samples, 0.02%)</title><rect x="89.8230%" y="421" width="0.0156%" height="15" fill="rgb(236,157,25)" fg:x="46090" fg:w="8"/><text x="90.0730%" y="431.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (148 samples, 0.29%)</title><rect x="89.5522%" y="629" width="0.2884%" height="15" fill="rgb(219,209,0)" fg:x="45951" fg:w="148"/><text x="89.8022%" y="639.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (148 samples, 0.29%)</title><rect x="89.5522%" y="613" width="0.2884%" height="15" fill="rgb(240,116,54)" fg:x="45951" fg:w="148"/><text x="89.8022%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (129 samples, 0.25%)</title><rect x="89.5892%" y="597" width="0.2514%" height="15" fill="rgb(216,10,36)" fg:x="45970" fg:w="129"/><text x="89.8392%" y="607.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (129 samples, 0.25%)</title><rect x="89.5892%" y="581" width="0.2514%" height="15" fill="rgb(222,72,44)" fg:x="45970" fg:w="129"/><text x="89.8392%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (10 samples, 0.02%)</title><rect x="89.8211%" y="565" width="0.0195%" height="15" fill="rgb(232,159,9)" fg:x="46089" fg:w="10"/><text x="90.0711%" y="575.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (10 samples, 0.02%)</title><rect x="89.8211%" y="549" width="0.0195%" height="15" fill="rgb(210,39,32)" fg:x="46089" fg:w="10"/><text x="90.0711%" y="559.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.02%)</title><rect x="89.8211%" y="533" width="0.0195%" height="15" fill="rgb(216,194,45)" fg:x="46089" fg:w="10"/><text x="90.0711%" y="543.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.02%)</title><rect x="89.8211%" y="517" width="0.0195%" height="15" fill="rgb(218,18,35)" fg:x="46089" fg:w="10"/><text x="90.0711%" y="527.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (10 samples, 0.02%)</title><rect x="89.8211%" y="501" width="0.0195%" height="15" fill="rgb(207,83,51)" fg:x="46089" fg:w="10"/><text x="90.0711%" y="511.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (10 samples, 0.02%)</title><rect x="89.8211%" y="485" width="0.0195%" height="15" fill="rgb(225,63,43)" fg:x="46089" fg:w="10"/><text x="90.0711%" y="495.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (917 samples, 1.79%)</title><rect x="88.0554%" y="693" width="1.7871%" height="15" fill="rgb(207,57,36)" fg:x="45183" fg:w="917"/><text x="88.3054%" y="703.50">s..</text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (917 samples, 1.79%)</title><rect x="88.0554%" y="677" width="1.7871%" height="15" fill="rgb(216,99,33)" fg:x="45183" fg:w="917"/><text x="88.3054%" y="687.50">s..</text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (917 samples, 1.79%)</title><rect x="88.0554%" y="661" width="1.7871%" height="15" fill="rgb(225,42,16)" fg:x="45183" fg:w="917"/><text x="88.3054%" y="671.50">s..</text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (150 samples, 0.29%)</title><rect x="89.5502%" y="645" width="0.2923%" height="15" fill="rgb(220,201,45)" fg:x="45950" fg:w="150"/><text x="89.8002%" y="655.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="89.8484%" y="245" width="0.0117%" height="15" fill="rgb(225,33,4)" fg:x="46103" fg:w="6"/><text x="90.0984%" y="255.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (6 samples, 0.01%)</title><rect x="89.8484%" y="229" width="0.0117%" height="15" fill="rgb(224,33,50)" fg:x="46103" fg:w="6"/><text x="90.0984%" y="239.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (7 samples, 0.01%)</title><rect x="89.8484%" y="293" width="0.0136%" height="15" fill="rgb(246,198,51)" fg:x="46103" fg:w="7"/><text x="90.0984%" y="303.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="89.8484%" y="277" width="0.0136%" height="15" fill="rgb(205,22,4)" fg:x="46103" fg:w="7"/><text x="90.0984%" y="287.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="89.8484%" y="261" width="0.0136%" height="15" fill="rgb(206,3,8)" fg:x="46103" fg:w="7"/><text x="90.0984%" y="271.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (22 samples, 0.04%)</title><rect x="89.8484%" y="325" width="0.0429%" height="15" fill="rgb(251,23,15)" fg:x="46103" fg:w="22"/><text x="90.0984%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (22 samples, 0.04%)</title><rect x="89.8484%" y="309" width="0.0429%" height="15" fill="rgb(252,88,28)" fg:x="46103" fg:w="22"/><text x="90.0984%" y="319.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (7 samples, 0.01%)</title><rect x="89.8776%" y="293" width="0.0136%" height="15" fill="rgb(212,127,14)" fg:x="46118" fg:w="7"/><text x="90.1276%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="89.8776%" y="277" width="0.0136%" height="15" fill="rgb(247,145,37)" fg:x="46118" fg:w="7"/><text x="90.1276%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (23 samples, 0.04%)</title><rect x="89.8484%" y="357" width="0.0448%" height="15" fill="rgb(209,117,53)" fg:x="46103" fg:w="23"/><text x="90.0984%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (23 samples, 0.04%)</title><rect x="89.8484%" y="341" width="0.0448%" height="15" fill="rgb(212,90,42)" fg:x="46103" fg:w="23"/><text x="90.0984%" y="351.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (32 samples, 0.06%)</title><rect x="89.8425%" y="485" width="0.0624%" height="15" fill="rgb(218,164,37)" fg:x="46100" fg:w="32"/><text x="90.0925%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (32 samples, 0.06%)</title><rect x="89.8425%" y="469" width="0.0624%" height="15" fill="rgb(246,65,34)" fg:x="46100" fg:w="32"/><text x="90.0925%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (32 samples, 0.06%)</title><rect x="89.8425%" y="453" width="0.0624%" height="15" fill="rgb(231,100,33)" fg:x="46100" fg:w="32"/><text x="90.0925%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (31 samples, 0.06%)</title><rect x="89.8445%" y="437" width="0.0604%" height="15" fill="rgb(228,126,14)" fg:x="46101" fg:w="31"/><text x="90.0945%" y="447.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (31 samples, 0.06%)</title><rect x="89.8445%" y="421" width="0.0604%" height="15" fill="rgb(215,173,21)" fg:x="46101" fg:w="31"/><text x="90.0945%" y="431.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (31 samples, 0.06%)</title><rect x="89.8445%" y="405" width="0.0604%" height="15" fill="rgb(210,6,40)" fg:x="46101" fg:w="31"/><text x="90.0945%" y="415.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (31 samples, 0.06%)</title><rect x="89.8445%" y="389" width="0.0604%" height="15" fill="rgb(212,48,18)" fg:x="46101" fg:w="31"/><text x="90.0945%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (30 samples, 0.06%)</title><rect x="89.8464%" y="373" width="0.0585%" height="15" fill="rgb(230,214,11)" fg:x="46102" fg:w="30"/><text x="90.0964%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="89.9068%" y="341" width="0.0136%" height="15" fill="rgb(254,105,39)" fg:x="46133" fg:w="7"/><text x="90.1568%" y="351.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (7 samples, 0.01%)</title><rect x="89.9068%" y="325" width="0.0136%" height="15" fill="rgb(245,158,5)" fg:x="46133" fg:w="7"/><text x="90.1568%" y="335.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.9068%" y="309" width="0.0136%" height="15" fill="rgb(249,208,11)" fg:x="46133" fg:w="7"/><text x="90.1568%" y="319.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="89.9068%" y="293" width="0.0136%" height="15" fill="rgb(210,39,28)" fg:x="46133" fg:w="7"/><text x="90.1568%" y="303.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (42 samples, 0.08%)</title><rect x="89.8425%" y="533" width="0.0819%" height="15" fill="rgb(211,56,53)" fg:x="46100" fg:w="42"/><text x="90.0925%" y="543.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (42 samples, 0.08%)</title><rect x="89.8425%" y="517" width="0.0819%" height="15" fill="rgb(226,201,30)" fg:x="46100" fg:w="42"/><text x="90.0925%" y="527.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (42 samples, 0.08%)</title><rect x="89.8425%" y="501" width="0.0819%" height="15" fill="rgb(239,101,34)" fg:x="46100" fg:w="42"/><text x="90.0925%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (10 samples, 0.02%)</title><rect x="89.9049%" y="485" width="0.0195%" height="15" fill="rgb(226,209,5)" fg:x="46132" fg:w="10"/><text x="90.1549%" y="495.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.02%)</title><rect x="89.9049%" y="469" width="0.0195%" height="15" fill="rgb(250,105,47)" fg:x="46132" fg:w="10"/><text x="90.1549%" y="479.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (10 samples, 0.02%)</title><rect x="89.9049%" y="453" width="0.0195%" height="15" fill="rgb(230,72,3)" fg:x="46132" fg:w="10"/><text x="90.1549%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (10 samples, 0.02%)</title><rect x="89.9049%" y="437" width="0.0195%" height="15" fill="rgb(232,218,39)" fg:x="46132" fg:w="10"/><text x="90.1549%" y="447.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (9 samples, 0.02%)</title><rect x="89.9068%" y="421" width="0.0175%" height="15" fill="rgb(248,166,6)" fg:x="46133" fg:w="9"/><text x="90.1568%" y="431.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.02%)</title><rect x="89.9068%" y="405" width="0.0175%" height="15" fill="rgb(247,89,20)" fg:x="46133" fg:w="9"/><text x="90.1568%" y="415.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.02%)</title><rect x="89.9068%" y="389" width="0.0175%" height="15" fill="rgb(248,130,54)" fg:x="46133" fg:w="9"/><text x="90.1568%" y="399.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (9 samples, 0.02%)</title><rect x="89.9068%" y="373" width="0.0175%" height="15" fill="rgb(234,196,4)" fg:x="46133" fg:w="9"/><text x="90.1568%" y="383.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (9 samples, 0.02%)</title><rect x="89.9068%" y="357" width="0.0175%" height="15" fill="rgb(250,143,31)" fg:x="46133" fg:w="9"/><text x="90.1568%" y="367.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::filter (11 samples, 0.02%)</title><rect x="89.9341%" y="165" width="0.0214%" height="15" fill="rgb(211,110,34)" fg:x="46147" fg:w="11"/><text x="90.1841%" y="175.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (11 samples, 0.02%)</title><rect x="89.9341%" y="149" width="0.0214%" height="15" fill="rgb(215,124,48)" fg:x="46147" fg:w="11"/><text x="90.1841%" y="159.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (11 samples, 0.02%)</title><rect x="89.9341%" y="133" width="0.0214%" height="15" fill="rgb(216,46,13)" fg:x="46147" fg:w="11"/><text x="90.1841%" y="143.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.02%)</title><rect x="89.9361%" y="117" width="0.0195%" height="15" fill="rgb(205,184,25)" fg:x="46148" fg:w="10"/><text x="90.1861%" y="127.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (7 samples, 0.01%)</title><rect x="89.9419%" y="101" width="0.0136%" height="15" fill="rgb(228,1,10)" fg:x="46151" fg:w="7"/><text x="90.1919%" y="111.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (6 samples, 0.01%)</title><rect x="89.9829%" y="85" width="0.0117%" height="15" fill="rgb(213,116,27)" fg:x="46172" fg:w="6"/><text x="90.2329%" y="95.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::normalizer::NormalizedString::transform_range (13 samples, 0.03%)</title><rect x="89.9712%" y="165" width="0.0253%" height="15" fill="rgb(241,95,50)" fg:x="46166" fg:w="13"/><text x="90.2212%" y="175.50"></text></g><g><title>swiftide-bench`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (13 samples, 0.03%)</title><rect x="89.9712%" y="149" width="0.0253%" height="15" fill="rgb(238,48,32)" fg:x="46166" fg:w="13"/><text x="90.2212%" y="159.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.03%)</title><rect x="89.9712%" y="133" width="0.0253%" height="15" fill="rgb(235,113,49)" fg:x="46166" fg:w="13"/><text x="90.2212%" y="143.50"></text></g><g><title>swiftide-bench`log::__private_api::log_impl (9 samples, 0.02%)</title><rect x="89.9790%" y="117" width="0.0175%" height="15" fill="rgb(205,127,43)" fg:x="46170" fg:w="9"/><text x="90.2290%" y="127.50"></text></g><g><title>swiftide-bench`&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::log (7 samples, 0.01%)</title><rect x="89.9829%" y="101" width="0.0136%" height="15" fill="rgb(250,162,2)" fg:x="46172" fg:w="7"/><text x="90.2329%" y="111.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (33 samples, 0.06%)</title><rect x="89.9341%" y="197" width="0.0643%" height="15" fill="rgb(220,13,41)" fg:x="46147" fg:w="33"/><text x="90.1841%" y="207.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (33 samples, 0.06%)</title><rect x="89.9341%" y="181" width="0.0643%" height="15" fill="rgb(249,221,25)" fg:x="46147" fg:w="33"/><text x="90.1841%" y="191.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (34 samples, 0.07%)</title><rect x="89.9341%" y="229" width="0.0663%" height="15" fill="rgb(215,208,19)" fg:x="46147" fg:w="34"/><text x="90.1841%" y="239.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (34 samples, 0.07%)</title><rect x="89.9341%" y="213" width="0.0663%" height="15" fill="rgb(236,175,2)" fg:x="46147" fg:w="34"/><text x="90.1841%" y="223.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (41 samples, 0.08%)</title><rect x="89.9322%" y="245" width="0.0799%" height="15" fill="rgb(241,52,2)" fg:x="46146" fg:w="41"/><text x="90.1822%" y="255.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (43 samples, 0.08%)</title><rect x="89.9302%" y="293" width="0.0838%" height="15" fill="rgb(248,140,14)" fg:x="46145" fg:w="43"/><text x="90.1802%" y="303.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (43 samples, 0.08%)</title><rect x="89.9302%" y="277" width="0.0838%" height="15" fill="rgb(253,22,42)" fg:x="46145" fg:w="43"/><text x="90.1802%" y="287.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (43 samples, 0.08%)</title><rect x="89.9302%" y="261" width="0.0838%" height="15" fill="rgb(234,61,47)" fg:x="46145" fg:w="43"/><text x="90.1802%" y="271.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::added_vocabulary::AddedVocabulary::extract_and_normalize (7 samples, 0.01%)</title><rect x="90.0160%" y="197" width="0.0136%" height="15" fill="rgb(208,226,15)" fg:x="46189" fg:w="7"/><text x="90.2660%" y="207.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::pre_tokenizer::PreTokenizedString::split (7 samples, 0.01%)</title><rect x="90.0160%" y="181" width="0.0136%" height="15" fill="rgb(217,221,4)" fg:x="46189" fg:w="7"/><text x="90.2660%" y="191.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::NormalizerWrapper as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="90.0160%" y="165" width="0.0136%" height="15" fill="rgb(212,174,34)" fg:x="46189" fg:w="7"/><text x="90.2660%" y="175.50"></text></g><g><title>swiftide-bench`&lt;tokenizers::normalizers::bert::BertNormalizer as tokenizers::tokenizer::Normalizer&gt;::normalize (7 samples, 0.01%)</title><rect x="90.0160%" y="149" width="0.0136%" height="15" fill="rgb(253,83,4)" fg:x="46189" fg:w="7"/><text x="90.2660%" y="159.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (9 samples, 0.02%)</title><rect x="90.0140%" y="213" width="0.0175%" height="15" fill="rgb(250,195,49)" fg:x="46188" fg:w="9"/><text x="90.2640%" y="223.50"></text></g><g><title>swiftide-bench`rayon_core::registry::ThreadBuilder::run (1,015 samples, 1.98%)</title><rect x="88.0554%" y="741" width="1.9781%" height="15" fill="rgb(241,192,25)" fg:x="45183" fg:w="1015"/><text x="88.3054%" y="751.50">s..</text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (1,015 samples, 1.98%)</title><rect x="88.0554%" y="725" width="1.9781%" height="15" fill="rgb(208,124,10)" fg:x="45183" fg:w="1015"/><text x="88.3054%" y="735.50">s..</text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1,015 samples, 1.98%)</title><rect x="88.0554%" y="709" width="1.9781%" height="15" fill="rgb(222,33,0)" fg:x="45183" fg:w="1015"/><text x="88.3054%" y="719.50">s..</text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (98 samples, 0.19%)</title><rect x="89.8425%" y="693" width="0.1910%" height="15" fill="rgb(234,209,28)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="703.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (98 samples, 0.19%)</title><rect x="89.8425%" y="677" width="0.1910%" height="15" fill="rgb(224,11,23)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="687.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (98 samples, 0.19%)</title><rect x="89.8425%" y="661" width="0.1910%" height="15" fill="rgb(232,99,1)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="671.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (98 samples, 0.19%)</title><rect x="89.8425%" y="645" width="0.1910%" height="15" fill="rgb(237,95,45)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="655.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (98 samples, 0.19%)</title><rect x="89.8425%" y="629" width="0.1910%" height="15" fill="rgb(208,109,11)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="639.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (98 samples, 0.19%)</title><rect x="89.8425%" y="613" width="0.1910%" height="15" fill="rgb(216,190,48)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="623.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (98 samples, 0.19%)</title><rect x="89.8425%" y="597" width="0.1910%" height="15" fill="rgb(251,171,36)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="607.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (98 samples, 0.19%)</title><rect x="89.8425%" y="581" width="0.1910%" height="15" fill="rgb(230,62,22)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="591.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (98 samples, 0.19%)</title><rect x="89.8425%" y="565" width="0.1910%" height="15" fill="rgb(225,114,35)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="575.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (98 samples, 0.19%)</title><rect x="89.8425%" y="549" width="0.1910%" height="15" fill="rgb(215,118,42)" fg:x="46100" fg:w="98"/><text x="90.0925%" y="559.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (56 samples, 0.11%)</title><rect x="89.9244%" y="533" width="0.1091%" height="15" fill="rgb(243,119,21)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="543.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (56 samples, 0.11%)</title><rect x="89.9244%" y="517" width="0.1091%" height="15" fill="rgb(252,177,53)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="527.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (56 samples, 0.11%)</title><rect x="89.9244%" y="501" width="0.1091%" height="15" fill="rgb(237,209,29)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="511.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (56 samples, 0.11%)</title><rect x="89.9244%" y="485" width="0.1091%" height="15" fill="rgb(212,65,23)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="495.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (56 samples, 0.11%)</title><rect x="89.9244%" y="469" width="0.1091%" height="15" fill="rgb(230,222,46)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="479.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (56 samples, 0.11%)</title><rect x="89.9244%" y="453" width="0.1091%" height="15" fill="rgb(215,135,32)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="463.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (56 samples, 0.11%)</title><rect x="89.9244%" y="437" width="0.1091%" height="15" fill="rgb(246,101,22)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="447.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (56 samples, 0.11%)</title><rect x="89.9244%" y="421" width="0.1091%" height="15" fill="rgb(206,107,13)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="431.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (56 samples, 0.11%)</title><rect x="89.9244%" y="405" width="0.1091%" height="15" fill="rgb(250,100,44)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="415.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (56 samples, 0.11%)</title><rect x="89.9244%" y="389" width="0.1091%" height="15" fill="rgb(231,147,38)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="399.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (56 samples, 0.11%)</title><rect x="89.9244%" y="373" width="0.1091%" height="15" fill="rgb(229,8,40)" fg:x="46142" fg:w="56"/><text x="90.1744%" y="383.50"></text></g><g><title>swiftide-bench`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (53 samples, 0.10%)</title><rect x="89.9302%" y="357" width="0.1033%" height="15" fill="rgb(221,135,30)" fg:x="46145" fg:w="53"/><text x="90.1802%" y="367.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (53 samples, 0.10%)</title><rect x="89.9302%" y="341" width="0.1033%" height="15" fill="rgb(249,193,18)" fg:x="46145" fg:w="53"/><text x="90.1802%" y="351.50"></text></g><g><title>swiftide-bench`rayon_core::registry::in_worker (53 samples, 0.10%)</title><rect x="89.9302%" y="325" width="0.1033%" height="15" fill="rgb(209,133,39)" fg:x="46145" fg:w="53"/><text x="90.1802%" y="335.50"></text></g><g><title>swiftide-bench`rayon_core::join::join_context::_{{closure}} (53 samples, 0.10%)</title><rect x="89.9302%" y="309" width="0.1033%" height="15" fill="rgb(232,100,14)" fg:x="46145" fg:w="53"/><text x="90.1802%" y="319.50"></text></g><g><title>swiftide-bench`rayon_core::registry::WorkerThread::wait_until_cold (10 samples, 0.02%)</title><rect x="90.0140%" y="293" width="0.0195%" height="15" fill="rgb(224,185,1)" fg:x="46188" fg:w="10"/><text x="90.2640%" y="303.50"></text></g><g><title>swiftide-bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (10 samples, 0.02%)</title><rect x="90.0140%" y="277" width="0.0195%" height="15" fill="rgb(223,139,8)" fg:x="46188" fg:w="10"/><text x="90.2640%" y="287.50"></text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.02%)</title><rect x="90.0140%" y="261" width="0.0195%" height="15" fill="rgb(232,213,38)" fg:x="46188" fg:w="10"/><text x="90.2640%" y="271.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.02%)</title><rect x="90.0140%" y="245" width="0.0195%" height="15" fill="rgb(207,94,22)" fg:x="46188" fg:w="10"/><text x="90.2640%" y="255.50"></text></g><g><title>swiftide-bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode (10 samples, 0.02%)</title><rect x="90.0140%" y="229" width="0.0195%" height="15" fill="rgb(219,183,54)" fg:x="46188" fg:w="10"/><text x="90.2640%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.01%)</title><rect x="90.0550%" y="37" width="0.0117%" height="15" fill="rgb(216,185,54)" fg:x="46209" fg:w="6"/><text x="90.3050%" y="47.50"></text></g><g><title>swiftide-bench`onnxruntime::OpKernelContext::Output (8 samples, 0.02%)</title><rect x="90.0550%" y="213" width="0.0156%" height="15" fill="rgb(254,217,39)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::OpKernelContext::OutputMLValue (8 samples, 0.02%)</title><rect x="90.0550%" y="197" width="0.0156%" height="15" fill="rgb(240,178,23)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (8 samples, 0.02%)</title><rect x="90.0550%" y="181" width="0.0156%" height="15" fill="rgb(218,11,47)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="191.50"></text></g><g><title>swiftide-bench`onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (8 samples, 0.02%)</title><rect x="90.0550%" y="165" width="0.0156%" height="15" fill="rgb(218,51,51)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="175.50"></text></g><g><title>swiftide-bench`onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (8 samples, 0.02%)</title><rect x="90.0550%" y="149" width="0.0156%" height="15" fill="rgb(238,126,27)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="159.50"></text></g><g><title>swiftide-bench`onnxruntime::Tensor::InitOrtValue(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&amp;, std::__1::shared_ptr (8 samples, 0.02%)</title><rect x="90.0550%" y="133" width="0.0156%" height="15" fill="rgb(249,202,22)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&amp;, std::__1::shared_ptr (8 samples, 0.02%)</title><rect x="90.0550%" y="117" width="0.0156%" height="15" fill="rgb(254,195,49)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="127.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::Alloc (8 samples, 0.02%)</title><rect x="90.0550%" y="101" width="0.0156%" height="15" fill="rgb(208,123,14)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="111.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::AllocateRawInternal(unsigned long, bool, onnxruntime::Stream*, bool, std::__1::function&lt;void  (8 samples, 0.02%)</title><rect x="90.0550%" y="85" width="0.0156%" height="15" fill="rgb(224,200,8)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="95.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::Extend (8 samples, 0.02%)</title><rect x="90.0550%" y="69" width="0.0156%" height="15" fill="rgb(217,61,36)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="79.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::RegionManager::AddAllocationRegion (8 samples, 0.02%)</title><rect x="90.0550%" y="53" width="0.0156%" height="15" fill="rgb(206,35,45)" fg:x="46209" fg:w="8"/><text x="90.3050%" y="63.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (23 samples, 0.04%)</title><rect x="90.0705%" y="165" width="0.0448%" height="15" fill="rgb(217,65,33)" fg:x="46217" fg:w="23"/><text x="90.3205%" y="175.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (303 samples, 0.59%)</title><rect x="90.1173%" y="133" width="0.5905%" height="15" fill="rgb(222,158,48)" fg:x="46241" fg:w="303"/><text x="90.3673%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (9 samples, 0.02%)</title><rect x="90.7078%" y="133" width="0.0175%" height="15" fill="rgb(254,2,54)" fg:x="46544" fg:w="9"/><text x="90.9578%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::BroadcastIterator::AdvanceBy (14 samples, 0.03%)</title><rect x="90.7332%" y="117" width="0.0273%" height="15" fill="rgb(250,143,38)" fg:x="46557" fg:w="14"/><text x="90.9832%" y="127.50"></text></g><g><title>swiftide-bench`onnxruntime::InputBroadcaster::AdvanceBy (6 samples, 0.01%)</title><rect x="90.7604%" y="117" width="0.0117%" height="15" fill="rgb(248,25,0)" fg:x="46571" fg:w="6"/><text x="91.0104%" y="127.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (361 samples, 0.70%)</title><rect x="90.0705%" y="213" width="0.7035%" height="15" fill="rgb(206,152,27)" fg:x="46217" fg:w="361"/><text x="90.3205%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (361 samples, 0.70%)</title><rect x="90.0705%" y="197" width="0.7035%" height="15" fill="rgb(240,77,30)" fg:x="46217" fg:w="361"/><text x="90.3205%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (361 samples, 0.70%)</title><rect x="90.0705%" y="181" width="0.7035%" height="15" fill="rgb(231,5,3)" fg:x="46217" fg:w="361"/><text x="90.3205%" y="191.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (338 samples, 0.66%)</title><rect x="90.1154%" y="165" width="0.6587%" height="15" fill="rgb(207,226,32)" fg:x="46240" fg:w="338"/><text x="90.3654%" y="175.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_259&gt;, void (long, long)&gt;::operator() (338 samples, 0.66%)</title><rect x="90.1154%" y="149" width="0.6587%" height="15" fill="rgb(222,207,47)" fg:x="46240" fg:w="338"/><text x="90.3654%" y="159.50"></text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (24 samples, 0.05%)</title><rect x="90.7273%" y="133" width="0.0468%" height="15" fill="rgb(229,115,45)" fg:x="46554" fg:w="24"/><text x="90.9773%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute (411 samples, 0.80%)</title><rect x="90.0530%" y="245" width="0.8010%" height="15" fill="rgb(224,191,6)" fg:x="46208" fg:w="411"/><text x="90.3030%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::UntypedBroadcastTwo (410 samples, 0.80%)</title><rect x="90.0550%" y="229" width="0.7990%" height="15" fill="rgb(230,227,24)" fg:x="46209" fg:w="410"/><text x="90.3050%" y="239.50"></text></g><g><title>swiftide-bench`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (41 samples, 0.08%)</title><rect x="90.7741%" y="213" width="0.0799%" height="15" fill="rgb(228,80,19)" fg:x="46578" fg:w="41"/><text x="91.0241%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (41 samples, 0.08%)</title><rect x="90.7741%" y="197" width="0.0799%" height="15" fill="rgb(247,229,0)" fg:x="46578" fg:w="41"/><text x="91.0241%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (41 samples, 0.08%)</title><rect x="90.7741%" y="181" width="0.0799%" height="15" fill="rgb(237,194,15)" fg:x="46578" fg:w="41"/><text x="91.0241%" y="191.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (41 samples, 0.08%)</title><rect x="90.7741%" y="165" width="0.0799%" height="15" fill="rgb(219,203,20)" fg:x="46578" fg:w="41"/><text x="91.0241%" y="175.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (41 samples, 0.08%)</title><rect x="90.7741%" y="149" width="0.0799%" height="15" fill="rgb(234,128,8)" fg:x="46578" fg:w="41"/><text x="91.0241%" y="159.50"></text></g><g><title>swiftide-bench`onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda1&apos;(onnxruntime::BroadcastHelper&amp;)::__invoke (41 samples, 0.08%)</title><rect x="90.7741%" y="133" width="0.0799%" height="15" fill="rgb(248,202,8)" fg:x="46578" fg:w="41"/><text x="91.0241%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::Gather::Compute (11 samples, 0.02%)</title><rect x="90.8540%" y="245" width="0.0214%" height="15" fill="rgb(206,104,37)" fg:x="46619" fg:w="11"/><text x="91.1040%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::GatherCopyData&lt;long long&gt; (10 samples, 0.02%)</title><rect x="90.8559%" y="229" width="0.0195%" height="15" fill="rgb(223,8,27)" fg:x="46620" fg:w="10"/><text x="91.1059%" y="239.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (10 samples, 0.02%)</title><rect x="90.8559%" y="213" width="0.0195%" height="15" fill="rgb(216,217,28)" fg:x="46620" fg:w="10"/><text x="91.1059%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (10 samples, 0.02%)</title><rect x="90.8559%" y="197" width="0.0195%" height="15" fill="rgb(249,199,1)" fg:x="46620" fg:w="10"/><text x="91.1059%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (10 samples, 0.02%)</title><rect x="90.8559%" y="181" width="0.0195%" height="15" fill="rgb(240,85,17)" fg:x="46620" fg:w="10"/><text x="91.1059%" y="191.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (9 samples, 0.02%)</title><rect x="90.8579%" y="165" width="0.0175%" height="15" fill="rgb(206,108,45)" fg:x="46621" fg:w="9"/><text x="91.1079%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.02%)</title><rect x="90.8579%" y="149" width="0.0175%" height="15" fill="rgb(245,210,41)" fg:x="46621" fg:w="9"/><text x="91.1079%" y="159.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (30 samples, 0.06%)</title><rect x="90.8754%" y="165" width="0.0585%" height="15" fill="rgb(206,13,37)" fg:x="46630" fg:w="30"/><text x="91.1254%" y="175.50"></text></g><g><title>swiftide-bench`onnxruntime::LayerNormImpl::Compute (89 samples, 0.17%)</title><rect x="90.8754%" y="245" width="0.1734%" height="15" fill="rgb(250,61,18)" fg:x="46630" fg:w="89"/><text x="91.1254%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (89 samples, 0.17%)</title><rect x="90.8754%" y="229" width="0.1734%" height="15" fill="rgb(235,172,48)" fg:x="46630" fg:w="89"/><text x="91.1254%" y="239.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (89 samples, 0.17%)</title><rect x="90.8754%" y="213" width="0.1734%" height="15" fill="rgb(249,201,17)" fg:x="46630" fg:w="89"/><text x="91.1254%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (89 samples, 0.17%)</title><rect x="90.8754%" y="197" width="0.1734%" height="15" fill="rgb(219,208,6)" fg:x="46630" fg:w="89"/><text x="91.1254%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (89 samples, 0.17%)</title><rect x="90.8754%" y="181" width="0.1734%" height="15" fill="rgb(248,31,23)" fg:x="46630" fg:w="89"/><text x="91.1254%" y="191.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (59 samples, 0.11%)</title><rect x="90.9339%" y="165" width="0.1150%" height="15" fill="rgb(245,15,42)" fg:x="46660" fg:w="59"/><text x="91.1839%" y="175.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (59 samples, 0.11%)</title><rect x="90.9339%" y="149" width="0.1150%" height="15" fill="rgb(222,217,39)" fg:x="46660" fg:w="59"/><text x="91.1839%" y="159.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::(anonymous namespace)::ComputeImpl&lt;float, float&gt;(onnxruntime::OpKernelContext*, long long, float, bool)::&apos;lambda&apos;(long)::operator() (59 samples, 0.11%)</title><rect x="90.9339%" y="133" width="0.1150%" height="15" fill="rgb(210,219,27)" fg:x="46660" fg:w="59"/><text x="91.1839%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (379 samples, 0.74%)</title><rect x="91.0489%" y="149" width="0.7386%" height="15" fill="rgb(252,166,36)" fg:x="46719" fg:w="379"/><text x="91.2989%" y="159.50"></text></g><g><title>swiftide-bench`.LAdd.Compute16.x4.BlockBy4Loop (1,458 samples, 2.84%)</title><rect x="91.7875%" y="85" width="2.8414%" height="15" fill="rgb(245,132,34)" fg:x="47098" fg:w="1458"/><text x="92.0375%" y="95.50">sw..</text></g><g><title>swiftide-bench`.LAdd.Output16.x4.Block (11 samples, 0.02%)</title><rect x="94.6289%" y="85" width="0.0214%" height="15" fill="rgb(236,54,3)" fg:x="48556" fg:w="11"/><text x="94.8789%" y="95.50"></text></g><g><title>swiftide-bench`.LAdd.ProcessNextColumnLoop16x4 (9 samples, 0.02%)</title><rect x="94.6504%" y="85" width="0.0175%" height="15" fill="rgb(241,173,43)" fg:x="48567" fg:w="9"/><text x="94.9004%" y="95.50"></text></g><g><title>swiftide-bench`.LZero.Compute16.x4.BlockBy4Loop (1,983 samples, 3.86%)</title><rect x="94.6757%" y="85" width="3.8646%" height="15" fill="rgb(215,190,9)" fg:x="48580" fg:w="1983"/><text x="94.9257%" y="95.50">swif..</text></g><g><title>swiftide-bench`.LZero.Output16.x4.Block (55 samples, 0.11%)</title><rect x="98.5403%" y="85" width="0.1072%" height="15" fill="rgb(242,101,16)" fg:x="50563" fg:w="55"/><text x="98.7903%" y="95.50"></text></g><g><title>swiftide-bench`.LZero.ProcessNextColumnLoop16x4 (19 samples, 0.04%)</title><rect x="98.6475%" y="85" width="0.0370%" height="15" fill="rgb(223,190,21)" fg:x="50618" fg:w="19"/><text x="98.8975%" y="95.50"></text></g><g><title>swiftide-bench`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (20 samples, 0.04%)</title><rect x="98.6943%" y="85" width="0.0390%" height="15" fill="rgb(215,228,25)" fg:x="50642" fg:w="20"/><text x="98.9443%" y="95.50"></text></g><g><title>swiftide-bench`MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*) (3,948 samples, 7.69%)</title><rect x="91.0489%" y="229" width="7.6941%" height="15" fill="rgb(225,36,22)" fg:x="46719" fg:w="3948"/><text x="91.2989%" y="239.50">swiftide-be..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (3,948 samples, 7.69%)</title><rect x="91.0489%" y="213" width="7.6941%" height="15" fill="rgb(251,106,46)" fg:x="46719" fg:w="3948"/><text x="91.2989%" y="223.50">swiftide-be..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (3,948 samples, 7.69%)</title><rect x="91.0489%" y="197" width="7.6941%" height="15" fill="rgb(208,90,1)" fg:x="46719" fg:w="3948"/><text x="91.2989%" y="207.50">swiftide-be..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (3,948 samples, 7.69%)</title><rect x="91.0489%" y="181" width="7.6941%" height="15" fill="rgb(243,10,4)" fg:x="46719" fg:w="3948"/><text x="91.2989%" y="191.50">swiftide-be..</text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (3,948 samples, 7.69%)</title><rect x="91.0489%" y="165" width="7.6941%" height="15" fill="rgb(212,137,27)" fg:x="46719" fg:w="3948"/><text x="91.2989%" y="175.50">swiftide-be..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (3,569 samples, 6.96%)</title><rect x="91.7875%" y="149" width="6.9555%" height="15" fill="rgb(231,220,49)" fg:x="47098" fg:w="3569"/><text x="92.0375%" y="159.50">swiftide-..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (3,569 samples, 6.96%)</title><rect x="91.7875%" y="133" width="6.9555%" height="15" fill="rgb(237,96,20)" fg:x="47098" fg:w="3569"/><text x="92.0375%" y="143.50">swiftide-..</text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (3,569 samples, 6.96%)</title><rect x="91.7875%" y="117" width="6.9555%" height="15" fill="rgb(239,229,30)" fg:x="47098" fg:w="3569"/><text x="92.0375%" y="127.50">swiftide-..</text></g><g><title>swiftide-bench`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (3,569 samples, 6.96%)</title><rect x="91.7875%" y="101" width="6.9555%" height="15" fill="rgb(219,65,33)" fg:x="47098" fg:w="3569"/><text x="92.0375%" y="111.50">swiftide-..</text></g><g><title>swiftide-bench`onnxruntime::MatMul&lt;float&gt;::Compute (3,956 samples, 7.71%)</title><rect x="91.0489%" y="245" width="7.7097%" height="15" fill="rgb(243,134,7)" fg:x="46719" fg:w="3956"/><text x="91.2989%" y="255.50">swiftide-be..</text></g><g><title>swiftide-bench`onnxruntime::OpKernelContext::Output (8 samples, 0.02%)</title><rect x="98.7430%" y="229" width="0.0156%" height="15" fill="rgb(216,177,54)" fg:x="50667" fg:w="8"/><text x="98.9930%" y="239.50"></text></g><g><title>swiftide-bench`onnxruntime::OpKernelContext::OutputMLValue (8 samples, 0.02%)</title><rect x="98.7430%" y="213" width="0.0156%" height="15" fill="rgb(211,160,20)" fg:x="50667" fg:w="8"/><text x="98.9930%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (8 samples, 0.02%)</title><rect x="98.7430%" y="197" width="0.0156%" height="15" fill="rgb(239,85,39)" fg:x="50667" fg:w="8"/><text x="98.9930%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (8 samples, 0.02%)</title><rect x="98.7430%" y="181" width="0.0156%" height="15" fill="rgb(232,125,22)" fg:x="50667" fg:w="8"/><text x="98.9930%" y="191.50"></text></g><g><title>swiftide-bench`onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (8 samples, 0.02%)</title><rect x="98.7430%" y="165" width="0.0156%" height="15" fill="rgb(244,57,34)" fg:x="50667" fg:w="8"/><text x="98.9930%" y="175.50"></text></g><g><title>swiftide-bench`onnxruntime::Tensor::InitOrtValue(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&amp;, std::__1::shared_ptr (7 samples, 0.01%)</title><rect x="98.7449%" y="149" width="0.0136%" height="15" fill="rgb(214,203,32)" fg:x="50668" fg:w="7"/><text x="98.9949%" y="159.50"></text></g><g><title>swiftide-bench`onnxruntime::Tensor::Tensor(onnxruntime::DataTypeImpl const*, onnxruntime::TensorShape const&amp;, std::__1::shared_ptr (7 samples, 0.01%)</title><rect x="98.7449%" y="133" width="0.0136%" height="15" fill="rgb(207,58,43)" fg:x="50668" fg:w="7"/><text x="98.9949%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::Alloc (7 samples, 0.01%)</title><rect x="98.7449%" y="117" width="0.0136%" height="15" fill="rgb(215,193,15)" fg:x="50668" fg:w="7"/><text x="98.9949%" y="127.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::AllocateRawInternal(unsigned long, bool, onnxruntime::Stream*, bool, std::__1::function&lt;void  (7 samples, 0.01%)</title><rect x="98.7449%" y="101" width="0.0136%" height="15" fill="rgb(232,15,44)" fg:x="50668" fg:w="7"/><text x="98.9949%" y="111.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::Extend (7 samples, 0.01%)</title><rect x="98.7449%" y="85" width="0.0136%" height="15" fill="rgb(212,3,48)" fg:x="50668" fg:w="7"/><text x="98.9949%" y="95.50"></text></g><g><title>swiftide-bench`onnxruntime::BFCArena::RegionManager::AddAllocationRegion (7 samples, 0.01%)</title><rect x="98.7449%" y="69" width="0.0136%" height="15" fill="rgb(218,128,7)" fg:x="50668" fg:w="7"/><text x="98.9949%" y="79.50"></text></g><g><title>swiftide-bench`MlasTranspose(unsigned int const*, unsigned int*, unsigned long, unsigned long) (70 samples, 0.14%)</title><rect x="98.7586%" y="213" width="0.1364%" height="15" fill="rgb(226,216,39)" fg:x="50675" fg:w="70"/><text x="99.0086%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (15 samples, 0.03%)</title><rect x="98.8950%" y="117" width="0.0292%" height="15" fill="rgb(243,47,51)" fg:x="50745" fg:w="15"/><text x="99.1450%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.02%)</title><rect x="98.9242%" y="101" width="0.0156%" height="15" fill="rgb(241,183,40)" fg:x="50760" fg:w="8"/><text x="99.1742%" y="111.50"></text></g><g><title>swiftide-bench`onnxruntime::strided_copy_detail::NdCounter::Step (16 samples, 0.03%)</title><rect x="98.9398%" y="101" width="0.0312%" height="15" fill="rgb(231,217,32)" fg:x="50768" fg:w="16"/><text x="99.1898%" y="111.50"></text></g><g><title>swiftide-bench`onnxruntime::Transpose::Compute (134 samples, 0.26%)</title><rect x="98.7586%" y="245" width="0.2611%" height="15" fill="rgb(229,61,38)" fg:x="50675" fg:w="134"/><text x="99.0086%" y="255.50"></text></g><g><title>swiftide-bench`onnxruntime::TransposeImpl(gsl::span (134 samples, 0.26%)</title><rect x="98.7586%" y="229" width="0.2611%" height="15" fill="rgb(225,210,5)" fg:x="50675" fg:w="134"/><text x="99.0086%" y="239.50"></text></g><g><title>swiftide-bench`onnxruntime::TransposeSingleAxisOutwards(gsl::span (64 samples, 0.12%)</title><rect x="98.8950%" y="213" width="0.1247%" height="15" fill="rgb(231,79,45)" fg:x="50745" fg:w="64"/><text x="99.1450%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::DispatchStridedCopy&lt;onnxruntime::TypeList&lt;float, double, long long, unsigned long long, int, unsigned int, short, unsigned short, signed char, unsigned char, onnxruntime::MLFloat16, onnxruntime::BFloat16, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;(onnxruntime::concurrency::ThreadPool*, onnxruntime::Tensor&amp;, long, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, onnxruntime::Tensor const&amp;, long, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator (64 samples, 0.12%)</title><rect x="98.8950%" y="197" width="0.1247%" height="15" fill="rgb(224,100,7)" fg:x="50745" fg:w="64"/><text x="99.1450%" y="207.50"></text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator (64 samples, 0.12%)</title><rect x="98.8950%" y="181" width="0.1247%" height="15" fill="rgb(241,198,18)" fg:x="50745" fg:w="64"/><text x="99.1450%" y="191.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (64 samples, 0.12%)</title><rect x="98.8950%" y="165" width="0.1247%" height="15" fill="rgb(252,97,53)" fg:x="50745" fg:w="64"/><text x="99.1450%" y="175.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (64 samples, 0.12%)</title><rect x="98.8950%" y="149" width="0.1247%" height="15" fill="rgb(220,88,7)" fg:x="50745" fg:w="64"/><text x="99.1450%" y="159.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (64 samples, 0.12%)</title><rect x="98.8950%" y="133" width="0.1247%" height="15" fill="rgb(213,176,14)" fg:x="50745" fg:w="64"/><text x="99.1450%" y="143.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (49 samples, 0.10%)</title><rect x="98.9242%" y="117" width="0.0955%" height="15" fill="rgb(246,73,7)" fg:x="50760" fg:w="49"/><text x="99.1742%" y="127.50"></text></g><g><title>swiftide-bench`void onnxruntime::StridedCopy&lt;unsigned int&gt;(onnxruntime::concurrency::ThreadPool*, unsigned int*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;, onnxruntime::TensorShape const&amp;, unsigned int const*, absl::InlinedVector&lt;long long, 6ul, std::__1::allocator&lt;long long&gt;&gt; const&amp;)::&apos;lambda0&apos;(long, long)::operator() (25 samples, 0.05%)</title><rect x="98.9710%" y="101" width="0.0487%" height="15" fill="rgb(245,64,36)" fg:x="50784" fg:w="25"/><text x="99.2210%" y="111.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (64 samples, 0.12%)</title><rect x="99.0197%" y="133" width="0.1247%" height="15" fill="rgb(245,80,10)" fg:x="50809" fg:w="64"/><text x="99.2697%" y="143.50"></text></g><g><title>swiftide-bench`onnxruntime::common::Status onnxruntime::SoftmaxCPU&lt;float&gt; (301 samples, 0.59%)</title><rect x="99.0197%" y="245" width="0.5866%" height="15" fill="rgb(232,107,50)" fg:x="50809" fg:w="301"/><text x="99.2697%" y="255.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmax(float const*, float*, unsigned long, unsigned long, bool, onnxruntime::concurrency::ThreadPool*) (301 samples, 0.59%)</title><rect x="99.0197%" y="229" width="0.5866%" height="15" fill="rgb(253,3,0)" fg:x="50809" fg:w="301"/><text x="99.2697%" y="239.50"></text></g><g><title>swiftide-bench`MlasExecuteThreaded(void (*)(void*, long), void*, long, onnxruntime::concurrency::ThreadPool*) (301 samples, 0.59%)</title><rect x="99.0197%" y="213" width="0.5866%" height="15" fill="rgb(212,99,53)" fg:x="50809" fg:w="301"/><text x="99.2697%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (301 samples, 0.59%)</title><rect x="99.0197%" y="197" width="0.5866%" height="15" fill="rgb(249,111,54)" fg:x="50809" fg:w="301"/><text x="99.2697%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (301 samples, 0.59%)</title><rect x="99.0197%" y="181" width="0.5866%" height="15" fill="rgb(249,55,30)" fg:x="50809" fg:w="301"/><text x="99.2697%" y="191.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (301 samples, 0.59%)</title><rect x="99.0197%" y="165" width="0.5866%" height="15" fill="rgb(237,47,42)" fg:x="50809" fg:w="301"/><text x="99.2697%" y="175.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (301 samples, 0.59%)</title><rect x="99.0197%" y="149" width="0.5866%" height="15" fill="rgb(211,20,18)" fg:x="50809" fg:w="301"/><text x="99.2697%" y="159.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (237 samples, 0.46%)</title><rect x="99.1444%" y="133" width="0.4619%" height="15" fill="rgb(231,203,46)" fg:x="50873" fg:w="237"/><text x="99.3944%" y="143.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (237 samples, 0.46%)</title><rect x="99.1444%" y="117" width="0.4619%" height="15" fill="rgb(237,142,3)" fg:x="50873" fg:w="237"/><text x="99.3944%" y="127.50"></text></g><g><title>swiftide-bench`MlasComputeSoftmaxThreaded(void*, long) (237 samples, 0.46%)</title><rect x="99.1444%" y="101" width="0.4619%" height="15" fill="rgb(241,107,1)" fg:x="50873" fg:w="237"/><text x="99.3944%" y="111.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (44 samples, 0.09%)</title><rect x="99.6063%" y="149" width="0.0857%" height="15" fill="rgb(229,83,13)" fg:x="51110" fg:w="44"/><text x="99.8563%" y="159.50"></text></g><g><title>all (51,312 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(241,91,40)" fg:x="0" fg:w="51312"/><text x="0.2500%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (51,154 samples, 99.69%)</title><rect x="0.3079%" y="821" width="99.6921%" height="15" fill="rgb(225,3,45)" fg:x="158" fg:w="51154"/><text x="0.5579%" y="831.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (51,154 samples, 99.69%)</title><rect x="0.3079%" y="805" width="99.6921%" height="15" fill="rgb(244,223,14)" fg:x="158" fg:w="51154"/><text x="0.5579%" y="815.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>swiftide-bench`std::sys::pal::unix::thread::Thread::new::thread_start (6,129 samples, 11.94%)</title><rect x="88.0554%" y="789" width="11.9446%" height="15" fill="rgb(224,124,37)" fg:x="45183" fg:w="6129"/><text x="88.3054%" y="799.50">swiftide-bench`std..</text></g><g><title>swiftide-bench`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,129 samples, 11.94%)</title><rect x="88.0554%" y="773" width="11.9446%" height="15" fill="rgb(251,171,30)" fg:x="45183" fg:w="6129"/><text x="88.3054%" y="783.50">swiftide-bench`cor..</text></g><g><title>swiftide-bench`std::sys::backtrace::__rust_begin_short_backtrace (6,129 samples, 11.94%)</title><rect x="88.0554%" y="757" width="11.9446%" height="15" fill="rgb(236,46,54)" fg:x="45183" fg:w="6129"/><text x="88.3054%" y="767.50">swiftide-bench`std..</text></g><g><title>swiftide-bench`tokio::runtime::blocking::pool::Inner::run (5,114 samples, 9.97%)</title><rect x="90.0335%" y="741" width="9.9665%" height="15" fill="rgb(245,213,5)" fg:x="46198" fg:w="5114"/><text x="90.2835%" y="751.50">swiftide-bench..</text></g><g><title>swiftide-bench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,114 samples, 9.97%)</title><rect x="90.0335%" y="725" width="9.9665%" height="15" fill="rgb(230,144,27)" fg:x="46198" fg:w="5114"/><text x="90.2835%" y="735.50">swiftide-bench..</text></g><g><title>swiftide-bench`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5,114 samples, 9.97%)</title><rect x="90.0335%" y="709" width="9.9665%" height="15" fill="rgb(220,86,6)" fg:x="46198" fg:w="5114"/><text x="90.2835%" y="719.50">swiftide-bench..</text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::run (5,113 samples, 9.96%)</title><rect x="90.0355%" y="693" width="9.9645%" height="15" fill="rgb(240,20,13)" fg:x="46199" fg:w="5113"/><text x="90.2855%" y="703.50">swiftide-bench..</text></g><g><title>swiftide-bench`tokio::runtime::context::runtime::enter_runtime (5,113 samples, 9.96%)</title><rect x="90.0355%" y="677" width="9.9645%" height="15" fill="rgb(217,89,34)" fg:x="46199" fg:w="5113"/><text x="90.2855%" y="687.50">swiftide-bench..</text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::Context::run (5,113 samples, 9.96%)</title><rect x="90.0355%" y="661" width="9.9645%" height="15" fill="rgb(229,13,5)" fg:x="46199" fg:w="5113"/><text x="90.2855%" y="671.50">swiftide-bench..</text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (5,112 samples, 9.96%)</title><rect x="90.0374%" y="645" width="9.9626%" height="15" fill="rgb(244,67,35)" fg:x="46200" fg:w="5112"/><text x="90.2874%" y="655.50">swiftide-bench..</text></g><g><title>swiftide-bench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,112 samples, 9.96%)</title><rect x="90.0374%" y="629" width="9.9626%" height="15" fill="rgb(221,40,2)" fg:x="46200" fg:w="5112"/><text x="90.2874%" y="639.50">swiftide-bench..</text></g><g><title>swiftide-bench`swiftide_indexing::pipeline::Pipeline::then_in_batch::_{{closure}}::_{{closure}} (5,109 samples, 9.96%)</title><rect x="90.0433%" y="613" width="9.9567%" height="15" fill="rgb(237,157,21)" fg:x="46203" fg:w="5109"/><text x="90.2933%" y="623.50">swiftide-bench..</text></g><g><title>swiftide-bench`&lt;swiftide_indexing::transformers::embed::Embed as swiftide_core::indexing_traits::BatchableTransformer&gt;::batch_transform::_{{closure}} (5,109 samples, 9.96%)</title><rect x="90.0433%" y="597" width="9.9567%" height="15" fill="rgb(222,94,11)" fg:x="46203" fg:w="5109"/><text x="90.2933%" y="607.50">swiftide-bench..</text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (5,109 samples, 9.96%)</title><rect x="90.0433%" y="581" width="9.9567%" height="15" fill="rgb(249,113,6)" fg:x="46203" fg:w="5109"/><text x="90.2933%" y="591.50">swiftide-bench..</text></g><g><title>swiftide-bench`&lt;alloc::boxed::Box&lt;dyn swiftide_core::indexing_traits::EmbeddingModel&gt; as swiftide_core::indexing_traits::EmbeddingModel&gt;::embed::_{{closure}} (5,109 samples, 9.96%)</title><rect x="90.0433%" y="565" width="9.9567%" height="15" fill="rgb(238,137,36)" fg:x="46203" fg:w="5109"/><text x="90.2933%" y="575.50">swiftide-bench..</text></g><g><title>swiftide-bench`swiftide_integrations::fastembed::embedding_model::_&lt;impl swiftide_core::indexing_traits::EmbeddingModel for swiftide_integrations::fastembed::FastEmbed&gt;::embed::_{{closure}} (5,109 samples, 9.96%)</title><rect x="90.0433%" y="549" width="9.9567%" height="15" fill="rgb(210,102,26)" fg:x="46203" fg:w="5109"/><text x="90.2933%" y="559.50">swiftide-bench..</text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (5,109 samples, 9.96%)</title><rect x="90.0433%" y="533" width="9.9567%" height="15" fill="rgb(218,30,30)" fg:x="46203" fg:w="5109"/><text x="90.2933%" y="543.50">swiftide-bench..</text></g><g><title>swiftide-bench`fastembed::text_embedding::impl::_&lt;impl fastembed::text_embedding::init::TextEmbedding&gt;::embed (5,109 samples, 9.96%)</title><rect x="90.0433%" y="517" width="9.9567%" height="15" fill="rgb(214,67,26)" fg:x="46203" fg:w="5109"/><text x="90.2933%" y="527.50">swiftide-bench..</text></g><g><title>swiftide-bench`rayon::iter::extend::_&lt;impl rayon::iter::ParallelExtend&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::par_extend (5,108 samples, 9.95%)</title><rect x="90.0452%" y="501" width="9.9548%" height="15" fill="rgb(251,9,53)" fg:x="46204" fg:w="5108"/><text x="90.2952%" y="511.50">swiftide-bench..</text></g><g><title>swiftide-bench`rayon::iter::plumbing::bridge_producer_consumer::helper (5,108 samples, 9.95%)</title><rect x="90.0452%" y="485" width="9.9548%" height="15" fill="rgb(228,204,25)" fg:x="46204" fg:w="5108"/><text x="90.2952%" y="495.50">swiftide-bench..</text></g><g><title>swiftide-bench`rayon::iter::plumbing::Producer::fold_with (5,108 samples, 9.95%)</title><rect x="90.0452%" y="469" width="9.9548%" height="15" fill="rgb(207,153,8)" fg:x="46204" fg:w="5108"/><text x="90.2952%" y="479.50">swiftide-bench..</text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5,108 samples, 9.95%)</title><rect x="90.0452%" y="453" width="9.9548%" height="15" fill="rgb(242,9,16)" fg:x="46204" fg:w="5108"/><text x="90.2952%" y="463.50">swiftide-bench..</text></g><g><title>swiftide-bench`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,108 samples, 9.95%)</title><rect x="90.0452%" y="437" width="9.9548%" height="15" fill="rgb(217,211,10)" fg:x="46204" fg:w="5108"/><text x="90.2952%" y="447.50">swiftide-bench..</text></g><g><title>swiftide-bench`ort::session::Session::run (5,104 samples, 9.95%)</title><rect x="90.0530%" y="421" width="9.9470%" height="15" fill="rgb(219,228,52)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="431.50">swiftide-bench..</text></g><g><title>swiftide-bench`OrtApis::Run (5,104 samples, 9.95%)</title><rect x="90.0530%" y="405" width="9.9470%" height="15" fill="rgb(231,92,29)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="415.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Run(OrtRunOptions const&amp;, gsl::span&lt;char const* const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const* const, 18446744073709551615ul&gt;, gsl::span&lt;char const* const, 18446744073709551615ul&gt;, gsl::span (5,104 samples, 9.95%)</title><rect x="90.0530%" y="389" width="9.9470%" height="15" fill="rgb(232,8,23)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="399.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::InferenceSession::Run(OrtRunOptions const&amp;, gsl::span&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;*, std::__1::vector&lt;OrtDevice, std::__1::allocator (5,104 samples, 9.95%)</title><rect x="90.0530%" y="373" width="9.9470%" height="15" fill="rgb(216,211,34)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="383.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::utils::ExecuteGraph(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator (5,104 samples, 9.95%)</title><rect x="90.0530%" y="357" width="9.9470%" height="15" fill="rgb(236,151,0)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="367.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::utils::ExecuteGraph(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator (5,104 samples, 9.95%)</title><rect x="90.0530%" y="341" width="9.9470%" height="15" fill="rgb(209,168,3)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="351.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::utils::ExecuteGraphImpl(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager const&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (5,104 samples, 9.95%)</title><rect x="90.0530%" y="325" width="9.9470%" height="15" fill="rgb(208,129,28)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="335.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::ExecuteThePlan(onnxruntime::SessionState const&amp;, gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;int const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (5,104 samples, 9.95%)</title><rect x="90.0530%" y="309" width="9.9470%" height="15" fill="rgb(229,78,22)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="319.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::RunSince (5,104 samples, 9.95%)</title><rect x="90.0530%" y="293" width="9.9470%" height="15" fill="rgb(228,187,13)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="303.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::LaunchKernelStep::Execute (5,104 samples, 9.95%)</title><rect x="90.0530%" y="277" width="9.9470%" height="15" fill="rgb(240,119,24)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="287.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::ExecuteKernel (5,104 samples, 9.95%)</title><rect x="90.0530%" y="261" width="9.9470%" height="15" fill="rgb(209,194,42)" fg:x="46208" fg:w="5104"/><text x="90.3030%" y="271.50">swiftide-bench..</text></g><g><title>swiftide-bench`onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute (202 samples, 0.39%)</title><rect x="99.6063%" y="245" width="0.3937%" height="15" fill="rgb(247,200,46)" fg:x="51110" fg:w="202"/><text x="99.8563%" y="255.50"></text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos; (202 samples, 0.39%)</title><rect x="99.6063%" y="229" width="0.3937%" height="15" fill="rgb(218,76,16)" fg:x="51110" fg:w="202"/><text x="99.8563%" y="239.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (202 samples, 0.39%)</title><rect x="99.6063%" y="213" width="0.3937%" height="15" fill="rgb(225,21,48)" fg:x="51110" fg:w="202"/><text x="99.8563%" y="223.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (202 samples, 0.39%)</title><rect x="99.6063%" y="197" width="0.3937%" height="15" fill="rgb(239,223,50)" fg:x="51110" fg:w="202"/><text x="99.8563%" y="207.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (202 samples, 0.39%)</title><rect x="99.6063%" y="181" width="0.3937%" height="15" fill="rgb(244,45,21)" fg:x="51110" fg:w="202"/><text x="99.8563%" y="191.50"></text></g><g><title>swiftide-bench`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (202 samples, 0.39%)</title><rect x="99.6063%" y="165" width="0.3937%" height="15" fill="rgb(232,33,43)" fg:x="51110" fg:w="202"/><text x="99.8563%" y="175.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (158 samples, 0.31%)</title><rect x="99.6921%" y="149" width="0.3079%" height="15" fill="rgb(209,8,3)" fg:x="51154" fg:w="158"/><text x="99.9421%" y="159.50"></text></g><g><title>swiftide-bench`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (158 samples, 0.31%)</title><rect x="99.6921%" y="133" width="0.3079%" height="15" fill="rgb(214,25,53)" fg:x="51154" fg:w="158"/><text x="99.9421%" y="143.50"></text></g><g><title>swiftide-bench`void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&gt;(onnxruntime::concurrency::ThreadPool*, long, onnxruntime::contrib::BiasGelu&lt;float, false&gt;::Compute(onnxruntime::OpKernelContext*) const::&apos;lambda0&apos;(long)&amp;&amp;, long)::&apos;lambda&apos;(long)::operator() (158 samples, 0.31%)</title><rect x="99.6921%" y="117" width="0.3079%" height="15" fill="rgb(254,186,54)" fg:x="51154" fg:w="158"/><text x="99.9421%" y="127.50"></text></g><g><title>swiftide-bench`MlasErfKernel (131 samples, 0.26%)</title><rect x="99.7447%" y="101" width="0.2553%" height="15" fill="rgb(208,174,49)" fg:x="51181" fg:w="131"/><text x="99.9947%" y="111.50"></text></g></svg></svg>