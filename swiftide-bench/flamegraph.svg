<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="981.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="111"><g><title>dyld`dyld4::prepare (1 samples, 0.90%)</title><rect x="0.0000%" y="917" width="0.9009%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>dyld`dyld4::ExternallyViewableState::notifyMonitorOfMainCalled (1 samples, 0.90%)</title><rect x="0.0000%" y="901" width="0.9009%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>dyld`dyld4::RemoteNotificationResponder::notifyMonitorOfMainCalled (1 samples, 0.90%)</title><rect x="0.0000%" y="885" width="0.9009%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>dyld`dyld4::RemoteNotificationResponder::sendMessage (1 samples, 0.90%)</title><rect x="0.0000%" y="869" width="0.9009%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>dyld`mach_msg_overwrite (1 samples, 0.90%)</title><rect x="0.0000%" y="853" width="0.9009%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>dyld`mach_msg2_trap (1 samples, 0.90%)</title><rect x="0.0000%" y="837" width="0.9009%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.90%)</title><rect x="0.9009%" y="917" width="0.9009%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="1.1509%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.90%)</title><rect x="0.9009%" y="901" width="0.9009%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="1.1509%" y="911.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.90%)</title><rect x="1.8018%" y="837" width="0.9009%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="2.0518%" y="847.50"></text></g><g><title>swiftide-bench`tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.90%)</title><rect x="1.8018%" y="821" width="0.9009%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="2.0518%" y="831.50"></text></g><g><title>swiftide-bench`std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.90%)</title><rect x="1.8018%" y="805" width="0.9009%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="2.0518%" y="815.50"></text></g><g><title>swiftide-bench`std::sys::pal::unix::thread::Thread::join (1 samples, 0.90%)</title><rect x="1.8018%" y="789" width="0.9009%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="2.0518%" y="799.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (1 samples, 0.90%)</title><rect x="1.8018%" y="773" width="0.9009%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="2.0518%" y="783.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (1 samples, 0.90%)</title><rect x="1.8018%" y="757" width="0.9009%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="2.0518%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.90%)</title><rect x="1.8018%" y="741" width="0.9009%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="2.0518%" y="751.50"></text></g><g><title>swiftide-bench`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.90%)</title><rect x="2.7027%" y="789" width="0.9009%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="2.9527%" y="799.50"></text></g><g><title>swiftide-bench`core::panicking::panic_nounwind_fmt (1 samples, 0.90%)</title><rect x="2.7027%" y="773" width="0.9009%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="2.9527%" y="783.50"></text></g><g><title>swiftide-bench`&lt;std::panicking::begin_panic_handler::FormatStringPayload as core::panic::PanicPayload&gt;::take_box (1 samples, 0.90%)</title><rect x="2.7027%" y="757" width="0.9009%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="2.9527%" y="767.50"></text></g><g><title>swiftide-bench`std::sys::backtrace::output_filename (1 samples, 0.90%)</title><rect x="2.7027%" y="741" width="0.9009%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="2.9527%" y="751.50"></text></g><g><title>swiftide-bench`std::panicking::begin_panic_handler::_{{closure}} (1 samples, 0.90%)</title><rect x="2.7027%" y="725" width="0.9009%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="2.9527%" y="735.50"></text></g><g><title>swiftide-bench`std::panicking::rust_panic_with_hook (1 samples, 0.90%)</title><rect x="2.7027%" y="709" width="0.9009%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="2.9527%" y="719.50"></text></g><g><title>swiftide-bench`rust_panic (1 samples, 0.90%)</title><rect x="2.7027%" y="693" width="0.9009%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="2.9527%" y="703.50"></text></g><g><title>libunwind.dylib`_Unwind_RaiseException (1 samples, 0.90%)</title><rect x="2.7027%" y="677" width="0.9009%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="2.9527%" y="687.50"></text></g><g><title>libunwind.dylib`libunwind::UnwindCursor&lt;libunwind::LocalAddressSpace, libunwind::Registers_arm64&gt;::step (1 samples, 0.90%)</title><rect x="2.7027%" y="661" width="0.9009%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="2.9527%" y="671.50"></text></g><g><title>libunwind.dylib`libunwind::UnwindCursor&lt;libunwind::LocalAddressSpace, libunwind::Registers_arm64&gt;::setInfoBasedOnIPRegister (1 samples, 0.90%)</title><rect x="2.7027%" y="645" width="0.9009%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="2.9527%" y="655.50"></text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::try_flatten_unordered::TryFlattenUnordered&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.90%)</title><rect x="3.6036%" y="789" width="0.9009%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="3.8536%" y="799.50"></text></g><g><title>swiftide-bench`&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.90%)</title><rect x="4.5045%" y="597" width="0.9009%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="4.7545%" y="607.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::stream::flatten_unordered::PollStreamFut&lt;futures_util::future::either::Either&lt;futures_util::stream::try_stream::into_stream::IntoStream&lt;swiftide_core::indexing_stream::IndexingStream&gt;,futures_util::stream::try_stream::try_flatten_unordered::Single&lt;core::result::Result&lt;swiftide_core::node::Node,anyhow::Error&gt;&gt;&gt;&gt;&gt;&gt; (1 samples, 0.90%)</title><rect x="4.5045%" y="581" width="0.9009%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="4.7545%" y="591.50"></text></g><g><title>swiftide-bench`&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnMut1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_mut (1 samples, 0.90%)</title><rect x="5.4054%" y="565" width="0.9009%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="5.6554%" y="575.50"></text></g><g><title>swiftide-bench`tokio::task::spawn::spawn (1 samples, 0.90%)</title><rect x="5.4054%" y="549" width="0.9009%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="5.6554%" y="559.50"></text></g><g><title>swiftide-bench`tokio::runtime::scheduler::Handle::spawn (1 samples, 0.90%)</title><rect x="5.4054%" y="533" width="0.9009%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="5.6554%" y="543.50"></text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (1 samples, 0.90%)</title><rect x="5.4054%" y="517" width="0.9009%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="5.6554%" y="527.50"></text></g><g><title>swiftide-bench`tokio::runtime::context::with_scheduler (1 samples, 0.90%)</title><rect x="5.4054%" y="501" width="0.9009%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="1"/><text x="5.6554%" y="511.50"></text></g><g><title>swiftide-bench`parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.90%)</title><rect x="5.4054%" y="485" width="0.9009%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="5.6554%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.90%)</title><rect x="5.4054%" y="469" width="0.9009%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="5.6554%" y="479.50"></text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 2.70%)</title><rect x="4.5045%" y="789" width="2.7027%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="3"/><text x="4.7545%" y="799.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::stream::flatten_unordered::FlattenUnorderedWithFlowController&lt;St,Fc&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="773" width="2.7027%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="3"/><text x="4.7545%" y="783.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::try_flatten_unordered::NestedTryStreamIntoEitherTryStream&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="757" width="2.7027%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="3"/><text x="4.7545%" y="767.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="741" width="2.7027%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="3"/><text x="4.7545%" y="751.50">sw..</text></g><g><title>swiftide-bench`&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="725" width="2.7027%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="3"/><text x="4.7545%" y="735.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::InspectOk&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="709" width="2.7027%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="3"/><text x="4.7545%" y="719.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::InspectErr&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="693" width="2.7027%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="3"/><text x="4.7545%" y="703.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::stream::flatten_unordered::FlattenUnorderedWithFlowController&lt;St,Fc&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="677" width="2.7027%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="3"/><text x="4.7545%" y="687.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::try_flatten_unordered::NestedTryStreamIntoEitherTryStream&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="661" width="2.7027%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="3"/><text x="4.7545%" y="671.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="645" width="2.7027%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="3"/><text x="4.7545%" y="655.50">sw..</text></g><g><title>swiftide-bench`&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="629" width="2.7027%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="3"/><text x="4.7545%" y="639.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::stream::flatten_unordered::FlattenUnorderedWithFlowController&lt;St,Fc&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 2.70%)</title><rect x="4.5045%" y="613" width="2.7027%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="3"/><text x="4.7545%" y="623.50">sw..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::try_stream::try_flatten_unordered::NestedTryStreamIntoEitherTryStream&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 1.80%)</title><rect x="5.4054%" y="597" width="1.8018%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="2"/><text x="5.6554%" y="607.50">s..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 1.80%)</title><rect x="5.4054%" y="581" width="1.8018%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="2"/><text x="5.6554%" y="591.50">s..</text></g><g><title>swiftide-bench`&lt;futures_util::stream::iter::Iter&lt;I&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.90%)</title><rect x="6.3063%" y="565" width="0.9009%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="1"/><text x="6.5563%" y="575.50"></text></g><g><title>swiftide-bench`&lt;walkdir::IntoIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.90%)</title><rect x="6.3063%" y="549" width="0.9009%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="1"/><text x="6.5563%" y="559.50"></text></g><g><title>swiftide-bench`walkdir::IntoIter::handle_entry (1 samples, 0.90%)</title><rect x="6.3063%" y="533" width="0.9009%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="6.5563%" y="543.50"></text></g><g><title>swiftide-bench`walkdir::IntoIter::push (1 samples, 0.90%)</title><rect x="6.3063%" y="517" width="0.9009%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="1"/><text x="6.5563%" y="527.50"></text></g><g><title>swiftide-bench`std::sys::pal::unix::fs::readdir (1 samples, 0.90%)</title><rect x="6.3063%" y="501" width="0.9009%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="1"/><text x="6.5563%" y="511.50"></text></g><g><title>libsystem_c.dylib`__opendir2 (1 samples, 0.90%)</title><rect x="6.3063%" y="485" width="0.9009%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="1"/><text x="6.5563%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (1 samples, 0.90%)</title><rect x="6.3063%" y="469" width="0.9009%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="1"/><text x="6.5563%" y="479.50"></text></g><g><title>swiftide-bench`clap_builder::derive::Parser::parse (1 samples, 0.90%)</title><rect x="7.2072%" y="789" width="0.9009%" height="15" fill="rgb(217,147,25)" fg:x="8" fg:w="1"/><text x="7.4572%" y="799.50"></text></g><g><title>swiftide-bench`clap_builder::builder::command::Command::_do_parse (1 samples, 0.90%)</title><rect x="7.2072%" y="773" width="0.9009%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="1"/><text x="7.4572%" y="783.50"></text></g><g><title>swiftide-bench`clap_builder::builder::command::Command::_build_self (1 samples, 0.90%)</title><rect x="7.2072%" y="757" width="0.9009%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="1"/><text x="7.4572%" y="767.50"></text></g><g><title>swiftide-bench`qdrant_client::channel_pool::ChannelPool::get_channel::_{{closure}} (1 samples, 0.90%)</title><rect x="8.1081%" y="789" width="0.9009%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="8.3581%" y="799.50"></text></g><g><title>swiftide-bench`&lt;tonic::transport::channel::service::connection::Connection as tower_service::Service&lt;http::request::Request&lt;http_body_util::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,tonic::status::Status&gt;&gt;&gt;&gt;::poll_ready (1 samples, 0.90%)</title><rect x="8.1081%" y="773" width="0.9009%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="1"/><text x="8.3581%" y="783.50"></text></g><g><title>swiftide-bench`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (1 samples, 0.90%)</title><rect x="8.1081%" y="757" width="0.9009%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="1"/><text x="8.3581%" y="767.50"></text></g><g><title>swiftide-bench`&lt;tonic::transport::channel::service::add_origin::AddOrigin&lt;T&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::poll_ready (1 samples, 0.90%)</title><rect x="8.1081%" y="741" width="0.9009%" height="15" fill="rgb(210,229,1)" fg:x="9" fg:w="1"/><text x="8.3581%" y="751.50"></text></g><g><title>swiftide-bench`&lt;tower::util::either::Either&lt;A,B&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.90%)</title><rect x="8.1081%" y="725" width="0.9009%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="1"/><text x="8.3581%" y="735.50"></text></g><g><title>swiftide-bench`&lt;tonic::transport::channel::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.90%)</title><rect x="8.1081%" y="709" width="0.9009%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="8.3581%" y="719.50"></text></g><g><title>swiftide-bench`&lt;tonic::transport::channel::service::connection::MakeSendRequestService&lt;C&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (1 samples, 0.90%)</title><rect x="8.1081%" y="693" width="0.9009%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="8.3581%" y="703.50"></text></g><g><title>swiftide-bench`&lt;tonic::transport::channel::service::connector::Connector&lt;C&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (1 samples, 0.90%)</title><rect x="8.1081%" y="677" width="0.9009%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="8.3581%" y="687.50"></text></g><g><title>swiftide-bench`&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (1 samples, 0.90%)</title><rect x="8.1081%" y="661" width="0.9009%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="1"/><text x="8.3581%" y="671.50"></text></g><g><title>swiftide-bench`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.90%)</title><rect x="8.1081%" y="645" width="0.9009%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="1"/><text x="8.3581%" y="655.50"></text></g><g><title>swiftide-bench`hyper_util::client::legacy::connect::http::connect (1 samples, 0.90%)</title><rect x="8.1081%" y="629" width="0.9009%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="8.3581%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`socket (1 samples, 0.90%)</title><rect x="8.1081%" y="613" width="0.9009%" height="15" fill="rgb(216,154,8)" fg:x="9" fg:w="1"/><text x="8.3581%" y="623.50"></text></g><g><title>CoreFoundation`CFGetTypeID (1 samples, 0.90%)</title><rect x="9.0090%" y="613" width="0.9009%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="9.2590%" y="623.50"></text></g><g><title>CoreFoundation`__CFDataInit (2 samples, 1.80%)</title><rect x="9.9099%" y="613" width="1.8018%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="2"/><text x="10.1599%" y="623.50">C..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 1.80%)</title><rect x="9.9099%" y="597" width="1.8018%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="2"/><text x="10.1599%" y="607.50">l..</text></g><g><title>CoreFoundation`getContentObject (1 samples, 0.90%)</title><rect x="11.7117%" y="517" width="0.9009%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="11.9617%" y="527.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM count] (1 samples, 0.90%)</title><rect x="13.5135%" y="501" width="0.9009%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="1"/><text x="13.7635%" y="511.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.90%)</title><rect x="14.4144%" y="501" width="0.9009%" height="15" fill="rgb(249,43,39)" fg:x="16" fg:w="1"/><text x="14.6644%" y="511.50"></text></g><g><title>CoreFoundation`parseDateTag (1 samples, 0.90%)</title><rect x="15.3153%" y="501" width="0.9009%" height="15" fill="rgb(209,38,44)" fg:x="17" fg:w="1"/><text x="15.5653%" y="511.50"></text></g><g><title>CoreFoundation`CFRelease (1 samples, 0.90%)</title><rect x="16.2162%" y="485" width="0.9009%" height="15" fill="rgb(236,212,23)" fg:x="18" fg:w="1"/><text x="16.4662%" y="495.50"></text></g><g><title>CoreFoundation`CF_IS_OBJC (1 samples, 0.90%)</title><rect x="17.1171%" y="485" width="0.9009%" height="15" fill="rgb(242,79,21)" fg:x="19" fg:w="1"/><text x="17.3671%" y="495.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.90%)</title><rect x="18.0180%" y="485" width="0.9009%" height="15" fill="rgb(211,96,35)" fg:x="20" fg:w="1"/><text x="18.2680%" y="495.50"></text></g><g><title>CoreFoundation`objc_msgSend$hash (1 samples, 0.90%)</title><rect x="18.9189%" y="485" width="0.9009%" height="15" fill="rgb(253,215,40)" fg:x="21" fg:w="1"/><text x="19.1689%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.90%)</title><rect x="23.4234%" y="469" width="0.9009%" height="15" fill="rgb(211,81,21)" fg:x="26" fg:w="1"/><text x="23.6734%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.90%)</title><rect x="24.3243%" y="469" width="0.9009%" height="15" fill="rgb(208,190,38)" fg:x="27" fg:w="1"/><text x="24.5743%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.90%)</title><rect x="25.2252%" y="469" width="0.9009%" height="15" fill="rgb(235,213,38)" fg:x="28" fg:w="1"/><text x="25.4752%" y="479.50"></text></g><g><title>CoreFoundation`parseDataTag (8 samples, 7.21%)</title><rect x="19.8198%" y="485" width="7.2072%" height="15" fill="rgb(237,122,38)" fg:x="22" fg:w="8"/><text x="20.0698%" y="495.50">CoreFounda..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.90%)</title><rect x="26.1261%" y="469" width="0.9009%" height="15" fill="rgb(244,218,35)" fg:x="29" fg:w="1"/><text x="26.3761%" y="479.50"></text></g><g><title>CoreFoundation`CFAllocatorAllocate (1 samples, 0.90%)</title><rect x="27.9279%" y="421" width="0.9009%" height="15" fill="rgb(240,68,47)" fg:x="31" fg:w="1"/><text x="28.1779%" y="431.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (2 samples, 1.80%)</title><rect x="27.9279%" y="437" width="1.8018%" height="15" fill="rgb(210,16,53)" fg:x="31" fg:w="2"/><text x="28.1779%" y="447.50">C..</text></g><g><title>CoreFoundation`_CFGetTSDCreateIfNeeded (1 samples, 0.90%)</title><rect x="28.8288%" y="421" width="0.9009%" height="15" fill="rgb(235,124,12)" fg:x="32" fg:w="1"/><text x="29.0788%" y="431.50"></text></g><g><title>CoreFoundation`__CFTSDGetTable (1 samples, 0.90%)</title><rect x="28.8288%" y="405" width="0.9009%" height="15" fill="rgb(224,169,11)" fg:x="32" fg:w="1"/><text x="29.0788%" y="415.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (3 samples, 2.70%)</title><rect x="27.9279%" y="453" width="2.7027%" height="15" fill="rgb(250,166,2)" fg:x="31" fg:w="3"/><text x="28.1779%" y="463.50">Co..</text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.90%)</title><rect x="29.7297%" y="437" width="0.9009%" height="15" fill="rgb(242,216,29)" fg:x="33" fg:w="1"/><text x="29.9797%" y="447.50"></text></g><g><title>CoreFoundation`__CFStrAllocateMutableContents (1 samples, 0.90%)</title><rect x="29.7297%" y="421" width="0.9009%" height="15" fill="rgb(230,116,27)" fg:x="33" fg:w="1"/><text x="29.9797%" y="431.50"></text></g><g><title>CoreFoundation`CFAllocatorAllocate (1 samples, 0.90%)</title><rect x="29.7297%" y="405" width="0.9009%" height="15" fill="rgb(228,99,48)" fg:x="33" fg:w="1"/><text x="29.9797%" y="415.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (2 samples, 1.80%)</title><rect x="30.6306%" y="453" width="1.8018%" height="15" fill="rgb(253,11,6)" fg:x="34" fg:w="2"/><text x="30.8806%" y="463.50">C..</text></g><g><title>CoreFoundation`__CFSearchStringROM (1 samples, 0.90%)</title><rect x="31.5315%" y="437" width="0.9009%" height="15" fill="rgb(247,143,39)" fg:x="35" fg:w="1"/><text x="31.7815%" y="447.50"></text></g><g><title>CoreFoundation`parseStringTag (6 samples, 5.41%)</title><rect x="27.9279%" y="469" width="5.4054%" height="15" fill="rgb(236,97,10)" fg:x="31" fg:w="6"/><text x="28.1779%" y="479.50">CoreFou..</text></g><g><title>Foundation`-[NSPlaceholderMutableString initWithString:] (1 samples, 0.90%)</title><rect x="32.4324%" y="453" width="0.9009%" height="15" fill="rgb(233,208,19)" fg:x="36" fg:w="1"/><text x="32.6824%" y="463.50"></text></g><g><title>CoreFoundation`CFStringAppend (1 samples, 0.90%)</title><rect x="32.4324%" y="437" width="0.9009%" height="15" fill="rgb(216,164,2)" fg:x="36" fg:w="1"/><text x="32.6824%" y="447.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.90%)</title><rect x="32.4324%" y="421" width="0.9009%" height="15" fill="rgb(220,129,5)" fg:x="36" fg:w="1"/><text x="32.6824%" y="431.50"></text></g><g><title>CoreFoundation`parseXMLElement (8 samples, 7.21%)</title><rect x="27.0270%" y="485" width="7.2072%" height="15" fill="rgb(242,17,10)" fg:x="30" fg:w="8"/><text x="27.2770%" y="495.50">CoreFounda..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.90%)</title><rect x="33.3333%" y="469" width="0.9009%" height="15" fill="rgb(242,107,0)" fg:x="37" fg:w="1"/><text x="33.5833%" y="479.50"></text></g><g><title>CoreFoundation`parseDictTag (21 samples, 18.92%)</title><rect x="16.2162%" y="501" width="18.9189%" height="15" fill="rgb(251,28,31)" fg:x="18" fg:w="21"/><text x="16.4662%" y="511.50">CoreFoundation`parseDictTag</text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.90%)</title><rect x="34.2342%" y="485" width="0.9009%" height="15" fill="rgb(233,223,10)" fg:x="38" fg:w="1"/><text x="34.4842%" y="495.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (1 samples, 0.90%)</title><rect x="38.7387%" y="453" width="0.9009%" height="15" fill="rgb(215,21,27)" fg:x="43" fg:w="1"/><text x="38.9887%" y="463.50"></text></g><g><title>libobjc.A.dylib`object_setClass (1 samples, 0.90%)</title><rect x="38.7387%" y="437" width="0.9009%" height="15" fill="rgb(232,23,21)" fg:x="43" fg:w="1"/><text x="38.9887%" y="447.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (2 samples, 1.80%)</title><rect x="38.7387%" y="469" width="1.8018%" height="15" fill="rgb(244,5,23)" fg:x="43" fg:w="2"/><text x="38.9887%" y="479.50">C..</text></g><g><title>CoreFoundation`__CFStringChangeSizeMultiple (1 samples, 0.90%)</title><rect x="39.6396%" y="453" width="0.9009%" height="15" fill="rgb(226,81,46)" fg:x="44" fg:w="1"/><text x="39.8896%" y="463.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (1 samples, 0.90%)</title><rect x="41.4414%" y="453" width="0.9009%" height="15" fill="rgb(247,70,30)" fg:x="46" fg:w="1"/><text x="41.6914%" y="463.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::initFromData (35 samples, 31.53%)</title><rect x="11.7117%" y="613" width="31.5315%" height="15" fill="rgb(212,68,19)" fg:x="13" fg:w="35"/><text x="11.9617%" y="623.50">Security`Security::KeychainCore::TrustSettings::ini..</text></g><g><title>CoreFoundation`CFPropertyListCreateFromXMLData (35 samples, 31.53%)</title><rect x="11.7117%" y="597" width="31.5315%" height="15" fill="rgb(240,187,13)" fg:x="13" fg:w="35"/><text x="11.9617%" y="607.50">CoreFoundation`CFPropertyListCreateFromXMLData</text></g><g><title>CoreFoundation`_CFPropertyListCreateWithData (35 samples, 31.53%)</title><rect x="11.7117%" y="581" width="31.5315%" height="15" fill="rgb(223,113,26)" fg:x="13" fg:w="35"/><text x="11.9617%" y="591.50">CoreFoundation`_CFPropertyListCreateWithData</text></g><g><title>CoreFoundation`_CFPropertyListCreateFromUTF8Data (35 samples, 31.53%)</title><rect x="11.7117%" y="565" width="31.5315%" height="15" fill="rgb(206,192,2)" fg:x="13" fg:w="35"/><text x="11.9617%" y="575.50">CoreFoundation`_CFPropertyListCreateFromUTF8Data</text></g><g><title>CoreFoundation`parsePListTag (35 samples, 31.53%)</title><rect x="11.7117%" y="549" width="31.5315%" height="15" fill="rgb(241,108,4)" fg:x="13" fg:w="35"/><text x="11.9617%" y="559.50">CoreFoundation`parsePListTag</text></g><g><title>CoreFoundation`parseDictTag (35 samples, 31.53%)</title><rect x="11.7117%" y="533" width="31.5315%" height="15" fill="rgb(247,173,49)" fg:x="13" fg:w="35"/><text x="11.9617%" y="543.50">CoreFoundation`parseDictTag</text></g><g><title>CoreFoundation`parseDictTag (34 samples, 30.63%)</title><rect x="12.6126%" y="517" width="30.6306%" height="15" fill="rgb(224,114,35)" fg:x="14" fg:w="34"/><text x="12.8626%" y="527.50">CoreFoundation`parseDictTag</text></g><g><title>CoreFoundation`parseXMLElement (9 samples, 8.11%)</title><rect x="35.1351%" y="501" width="8.1081%" height="15" fill="rgb(245,159,27)" fg:x="39" fg:w="9"/><text x="35.3851%" y="511.50">CoreFoundat..</text></g><g><title>CoreFoundation`parseStringTag (7 samples, 6.31%)</title><rect x="36.9369%" y="485" width="6.3063%" height="15" fill="rgb(245,172,44)" fg:x="41" fg:w="7"/><text x="37.1869%" y="495.50">CoreFoun..</text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (3 samples, 2.70%)</title><rect x="40.5405%" y="469" width="2.7027%" height="15" fill="rgb(236,23,11)" fg:x="45" fg:w="3"/><text x="40.7905%" y="479.50">Co..</text></g><g><title>CoreFoundation`__CFTSDGetTable (1 samples, 0.90%)</title><rect x="42.3423%" y="453" width="0.9009%" height="15" fill="rgb(205,117,38)" fg:x="47" fg:w="1"/><text x="42.5923%" y="463.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::validatePropList (1 samples, 0.90%)</title><rect x="43.2432%" y="613" width="0.9009%" height="15" fill="rgb(237,72,25)" fg:x="48" fg:w="1"/><text x="43.4932%" y="623.50"></text></g><g><title>CoreFoundation`__CFStringHash (1 samples, 0.90%)</title><rect x="43.2432%" y="597" width="0.9009%" height="15" fill="rgb(244,70,9)" fg:x="48" fg:w="1"/><text x="43.4932%" y="607.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.90%)</title><rect x="44.1441%" y="613" width="0.9009%" height="15" fill="rgb(217,125,39)" fg:x="49" fg:w="1"/><text x="44.3941%" y="623.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (41 samples, 36.94%)</title><rect x="9.0090%" y="629" width="36.9369%" height="15" fill="rgb(235,36,10)" fg:x="10" fg:w="41"/><text x="9.2590%" y="639.50">Security`Security::KeychainCore::TrustSettings::CreateTrustS..</text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.90%)</title><rect x="45.0450%" y="613" width="0.9009%" height="15" fill="rgb(251,123,47)" fg:x="50" fg:w="1"/><text x="45.2950%" y="623.50"></text></g><g><title>CoreFoundation`-[__NSCFString release] (1 samples, 0.90%)</title><rect x="46.8468%" y="565" width="0.9009%" height="15" fill="rgb(221,13,13)" fg:x="52" fg:w="1"/><text x="47.0968%" y="575.50"></text></g><g><title>CoreFoundation`CFAllocatorDeallocate (1 samples, 0.90%)</title><rect x="49.5495%" y="549" width="0.9009%" height="15" fill="rgb(238,131,9)" fg:x="55" fg:w="1"/><text x="49.7995%" y="559.50"></text></g><g><title>CoreFoundation`_CFRelease (3 samples, 2.70%)</title><rect x="50.4505%" y="549" width="2.7027%" height="15" fill="rgb(211,50,8)" fg:x="56" fg:w="3"/><text x="50.7005%" y="559.50">Co..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 1.80%)</title><rect x="51.3514%" y="533" width="1.8018%" height="15" fill="rgb(245,182,24)" fg:x="57" fg:w="2"/><text x="51.6014%" y="543.50">l..</text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (8 samples, 7.21%)</title><rect x="46.8468%" y="581" width="7.2072%" height="15" fill="rgb(242,14,37)" fg:x="52" fg:w="8"/><text x="47.0968%" y="591.50">CoreFounda..</text></g><g><title>CoreFoundation`cow_cleanup (7 samples, 6.31%)</title><rect x="47.7477%" y="565" width="6.3063%" height="15" fill="rgb(246,228,12)" fg:x="53" fg:w="7"/><text x="47.9977%" y="575.50">CoreFoun..</text></g><g><title>libobjc.A.dylib`object_getClass (1 samples, 0.90%)</title><rect x="53.1532%" y="549" width="0.9009%" height="15" fill="rgb(213,55,15)" fg:x="59" fg:w="1"/><text x="53.4032%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.90%)</title><rect x="54.0541%" y="565" width="0.9009%" height="15" fill="rgb(209,9,3)" fg:x="60" fg:w="1"/><text x="54.3041%" y="575.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::~TrustSettings (11 samples, 9.91%)</title><rect x="45.9459%" y="629" width="9.9099%" height="15" fill="rgb(230,59,30)" fg:x="51" fg:w="11"/><text x="46.1959%" y="639.50">Security`Secur..</text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (11 samples, 9.91%)</title><rect x="45.9459%" y="613" width="9.9099%" height="15" fill="rgb(209,121,21)" fg:x="51" fg:w="11"/><text x="46.1959%" y="623.50">CoreFoundation..</text></g><g><title>CoreFoundation`cow_cleanup (11 samples, 9.91%)</title><rect x="45.9459%" y="597" width="9.9099%" height="15" fill="rgb(220,109,13)" fg:x="51" fg:w="11"/><text x="46.1959%" y="607.50">CoreFoundation..</text></g><g><title>CoreFoundation`_CFRelease (2 samples, 1.80%)</title><rect x="54.0541%" y="581" width="1.8018%" height="15" fill="rgb(232,18,1)" fg:x="60" fg:w="2"/><text x="54.3041%" y="591.50">C..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.90%)</title><rect x="54.9550%" y="565" width="0.9009%" height="15" fill="rgb(215,41,42)" fg:x="61" fg:w="1"/><text x="55.2050%" y="575.50"></text></g><g><title>swiftide-bench`swiftide_bench::build_embedding_model (53 samples, 47.75%)</title><rect x="9.0090%" y="789" width="47.7477%" height="15" fill="rgb(224,123,36)" fg:x="10" fg:w="53"/><text x="9.2590%" y="799.50">swiftide-bench`swiftide_bench::build_embedding_model</text></g><g><title>swiftide-bench`swiftide_integrations::openai::OpenAIBuilder::build (53 samples, 47.75%)</title><rect x="9.0090%" y="773" width="47.7477%" height="15" fill="rgb(240,125,3)" fg:x="10" fg:w="53"/><text x="9.2590%" y="783.50">swiftide-bench`swiftide_integrations::openai::OpenAIBuilder::build</text></g><g><title>swiftide-bench`async_openai::client::Client&lt;async_openai::config::OpenAIConfig&gt;::new (53 samples, 47.75%)</title><rect x="9.0090%" y="757" width="47.7477%" height="15" fill="rgb(205,98,50)" fg:x="10" fg:w="53"/><text x="9.2590%" y="767.50">swiftide-bench`async_openai::client::Client&lt;async_openai::config::OpenAIConfig..</text></g><g><title>swiftide-bench`&lt;reqwest::async_impl::client::Client as core::default::Default&gt;::default (53 samples, 47.75%)</title><rect x="9.0090%" y="741" width="47.7477%" height="15" fill="rgb(205,185,37)" fg:x="10" fg:w="53"/><text x="9.2590%" y="751.50">swiftide-bench`&lt;reqwest::async_impl::client::Client as core::default::Default&gt;..</text></g><g><title>swiftide-bench`reqwest::async_impl::client::ClientBuilder::build (53 samples, 47.75%)</title><rect x="9.0090%" y="725" width="47.7477%" height="15" fill="rgb(238,207,15)" fg:x="10" fg:w="53"/><text x="9.2590%" y="735.50">swiftide-bench`reqwest::async_impl::client::ClientBuilder::build</text></g><g><title>swiftide-bench`rustls_native_certs::load_native_certs (53 samples, 47.75%)</title><rect x="9.0090%" y="709" width="47.7477%" height="15" fill="rgb(213,199,42)" fg:x="10" fg:w="53"/><text x="9.2590%" y="719.50">swiftide-bench`rustls_native_certs::load_native_certs</text></g><g><title>swiftide-bench`rustls_native_certs::macos::load_native_certs (53 samples, 47.75%)</title><rect x="9.0090%" y="693" width="47.7477%" height="15" fill="rgb(235,201,11)" fg:x="10" fg:w="53"/><text x="9.2590%" y="703.50">swiftide-bench`rustls_native_certs::macos::load_native_certs</text></g><g><title>swiftide-bench`security_framework::trust_settings::TrustSettings::tls_trust_settings_for_certificate (53 samples, 47.75%)</title><rect x="9.0090%" y="677" width="47.7477%" height="15" fill="rgb(207,46,11)" fg:x="10" fg:w="53"/><text x="9.2590%" y="687.50">swiftide-bench`security_framework::trust_settings::TrustSettings::tls_trust_se..</text></g><g><title>Security`SecTrustSettingsCopyTrustSettings (53 samples, 47.75%)</title><rect x="9.0090%" y="661" width="47.7477%" height="15" fill="rgb(241,35,35)" fg:x="10" fg:w="53"/><text x="9.2590%" y="671.50">Security`SecTrustSettingsCopyTrustSettings</text></g><g><title>Security`tsCopyTrustSettings(__SecCertificate*, SecTrustSettingsDomain, __CFArray const**, __CFDate const**) (53 samples, 47.75%)</title><rect x="9.0090%" y="645" width="47.7477%" height="15" fill="rgb(243,32,47)" fg:x="10" fg:w="53"/><text x="9.2590%" y="655.50">Security`tsCopyTrustSettings(__SecCertificate*, SecTrustSettingsDomain, __CFAr..</text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.90%)</title><rect x="55.8559%" y="629" width="0.9009%" height="15" fill="rgb(247,202,23)" fg:x="62" fg:w="1"/><text x="56.1059%" y="639.50"></text></g><g><title>dyld`start (64 samples, 57.66%)</title><rect x="0.0000%" y="933" width="57.6577%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="64"/><text x="0.2500%" y="943.50">dyld`start</text></g><g><title>swiftide-bench`main (62 samples, 55.86%)</title><rect x="1.8018%" y="917" width="55.8559%" height="15" fill="rgb(243,110,44)" fg:x="2" fg:w="62"/><text x="2.0518%" y="927.50">swiftide-bench`main</text></g><g><title>swiftide-bench`std::rt::lang_start_internal (62 samples, 55.86%)</title><rect x="1.8018%" y="901" width="55.8559%" height="15" fill="rgb(222,74,54)" fg:x="2" fg:w="62"/><text x="2.0518%" y="911.50">swiftide-bench`std::rt::lang_start_internal</text></g><g><title>swiftide-bench`std::rt::lang_start::_{{closure}} (62 samples, 55.86%)</title><rect x="1.8018%" y="885" width="55.8559%" height="15" fill="rgb(216,99,12)" fg:x="2" fg:w="62"/><text x="2.0518%" y="895.50">swiftide-bench`std::rt::lang_start::_{{closure}}</text></g><g><title>swiftide-bench`std::sys::backtrace::__rust_begin_short_backtrace (62 samples, 55.86%)</title><rect x="1.8018%" y="869" width="55.8559%" height="15" fill="rgb(226,22,26)" fg:x="2" fg:w="62"/><text x="2.0518%" y="879.50">swiftide-bench`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>swiftide-bench`swiftide_bench::main (62 samples, 55.86%)</title><rect x="1.8018%" y="853" width="55.8559%" height="15" fill="rgb(217,163,10)" fg:x="2" fg:w="62"/><text x="2.0518%" y="863.50">swiftide-bench`swiftide_bench::main</text></g><g><title>swiftide-bench`tokio::runtime::runtime::Runtime::block_on (61 samples, 54.95%)</title><rect x="2.7027%" y="837" width="54.9550%" height="15" fill="rgb(213,25,53)" fg:x="3" fg:w="61"/><text x="2.9527%" y="847.50">swiftide-bench`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>swiftide-bench`tokio::runtime::context::runtime::enter_runtime (61 samples, 54.95%)</title><rect x="2.7027%" y="821" width="54.9550%" height="15" fill="rgb(252,105,26)" fg:x="3" fg:w="61"/><text x="2.9527%" y="831.50">swiftide-bench`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>swiftide-bench`tokio::runtime::park::CachedParkThread::block_on (61 samples, 54.95%)</title><rect x="2.7027%" y="805" width="54.9550%" height="15" fill="rgb(220,39,43)" fg:x="3" fg:w="61"/><text x="2.9527%" y="815.50">swiftide-bench`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>swiftide-bench`swiftide_indexing::pipeline::Pipeline::from_loader (1 samples, 0.90%)</title><rect x="56.7568%" y="789" width="0.9009%" height="15" fill="rgb(229,68,48)" fg:x="63" fg:w="1"/><text x="57.0068%" y="799.50"></text></g><g><title>swiftide-bench`&lt;swiftide_indexing::loaders::file_loader::FileLoader as swiftide_core::indexing_traits::Loader&gt;::into_stream_boxed (1 samples, 0.90%)</title><rect x="56.7568%" y="773" width="0.9009%" height="15" fill="rgb(252,8,32)" fg:x="63" fg:w="1"/><text x="57.0068%" y="783.50"></text></g><g><title>swiftide-bench`ignore::walk::Walk::new (1 samples, 0.90%)</title><rect x="56.7568%" y="757" width="0.9009%" height="15" fill="rgb(223,20,43)" fg:x="63" fg:w="1"/><text x="57.0068%" y="767.50"></text></g><g><title>swiftide-bench`ignore::walk::WalkBuilder::build (1 samples, 0.90%)</title><rect x="56.7568%" y="741" width="0.9009%" height="15" fill="rgb(229,81,49)" fg:x="63" fg:w="1"/><text x="57.0068%" y="751.50"></text></g><g><title>swiftide-bench`ignore::dir::IgnoreBuilder::build (1 samples, 0.90%)</title><rect x="56.7568%" y="725" width="0.9009%" height="15" fill="rgb(236,28,36)" fg:x="63" fg:w="1"/><text x="57.0068%" y="735.50"></text></g><g><title>swiftide-bench`ignore::gitignore::GitignoreBuilder::build_global (1 samples, 0.90%)</title><rect x="56.7568%" y="709" width="0.9009%" height="15" fill="rgb(249,185,26)" fg:x="63" fg:w="1"/><text x="57.0068%" y="719.50"></text></g><g><title>swiftide-bench`ignore::gitignore::gitconfig_excludes_path (1 samples, 0.90%)</title><rect x="56.7568%" y="693" width="0.9009%" height="15" fill="rgb(249,174,33)" fg:x="63" fg:w="1"/><text x="57.0068%" y="703.50"></text></g><g><title>swiftide-bench`ignore::gitignore::parse_excludes_file (1 samples, 0.90%)</title><rect x="56.7568%" y="677" width="0.9009%" height="15" fill="rgb(233,201,37)" fg:x="63" fg:w="1"/><text x="57.0068%" y="687.50"></text></g><g><title>swiftide-bench`std::sync::once_lock::OnceLock&lt;T&gt;::initialize (1 samples, 0.90%)</title><rect x="56.7568%" y="661" width="0.9009%" height="15" fill="rgb(221,78,26)" fg:x="63" fg:w="1"/><text x="57.0068%" y="671.50"></text></g><g><title>swiftide-bench`std::sys::sync::once::queue::Once::call (1 samples, 0.90%)</title><rect x="56.7568%" y="645" width="0.9009%" height="15" fill="rgb(250,127,30)" fg:x="63" fg:w="1"/><text x="57.0068%" y="655.50"></text></g><g><title>swiftide-bench`std::sync::once::Once::call_once_force::_{{closure}} (1 samples, 0.90%)</title><rect x="56.7568%" y="629" width="0.9009%" height="15" fill="rgb(230,49,44)" fg:x="63" fg:w="1"/><text x="57.0068%" y="639.50"></text></g><g><title>swiftide-bench`regex_automata::meta::regex::Builder::build (1 samples, 0.90%)</title><rect x="56.7568%" y="613" width="0.9009%" height="15" fill="rgb(229,67,23)" fg:x="63" fg:w="1"/><text x="57.0068%" y="623.50"></text></g><g><title>swiftide-bench`regex_syntax::ast::parse::Parser::parse (1 samples, 0.90%)</title><rect x="56.7568%" y="597" width="0.9009%" height="15" fill="rgb(249,83,47)" fg:x="63" fg:w="1"/><text x="57.0068%" y="607.50"></text></g><g><title>swiftide-bench`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.90%)</title><rect x="56.7568%" y="581" width="0.9009%" height="15" fill="rgb(215,43,3)" fg:x="63" fg:w="1"/><text x="57.0068%" y="591.50"></text></g><g><title>swiftide-bench`regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.90%)</title><rect x="56.7568%" y="565" width="0.9009%" height="15" fill="rgb(238,154,13)" fg:x="63" fg:w="1"/><text x="57.0068%" y="575.50"></text></g><g><title>swiftide-bench`regex_syntax::ast::Concat::into_ast (1 samples, 0.90%)</title><rect x="56.7568%" y="549" width="0.9009%" height="15" fill="rgb(219,56,2)" fg:x="63" fg:w="1"/><text x="57.0068%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.90%)</title><rect x="56.7568%" y="533" width="0.9009%" height="15" fill="rgb(233,0,4)" fg:x="63" fg:w="1"/><text x="57.0068%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 1.80%)</title><rect x="57.6577%" y="933" width="1.8018%" height="15" fill="rgb(235,30,7)" fg:x="64" fg:w="2"/><text x="57.9077%" y="943.50">l..</text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke (1 samples, 0.90%)</title><rect x="59.4595%" y="629" width="0.9009%" height="15" fill="rgb(250,79,13)" fg:x="66" fg:w="1"/><text x="59.7095%" y="639.50"></text></g><g><title>Security`SecXPCDictionarySetPolicies (1 samples, 0.90%)</title><rect x="59.4595%" y="613" width="0.9009%" height="15" fill="rgb(211,146,34)" fg:x="66" fg:w="1"/><text x="59.7095%" y="623.50"></text></g><g><title>CoreFoundation`_CFXPCCreateXPCObjectFromCFObject (1 samples, 0.90%)</title><rect x="59.4595%" y="597" width="0.9009%" height="15" fill="rgb(228,22,38)" fg:x="66" fg:w="1"/><text x="59.7095%" y="607.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (1 samples, 0.90%)</title><rect x="59.4595%" y="581" width="0.9009%" height="15" fill="rgb(235,168,5)" fg:x="66" fg:w="1"/><text x="59.7095%" y="591.50"></text></g><g><title>CoreFoundation`__CFXPCDictionaryApplier (1 samples, 0.90%)</title><rect x="59.4595%" y="565" width="0.9009%" height="15" fill="rgb(221,155,16)" fg:x="66" fg:w="1"/><text x="59.7095%" y="575.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_insert (1 samples, 0.90%)</title><rect x="59.4595%" y="549" width="0.9009%" height="15" fill="rgb(215,215,53)" fg:x="66" fg:w="1"/><text x="59.7095%" y="559.50"></text></g><g><title>Security`der_decode_commontime_body (1 samples, 0.90%)</title><rect x="60.3604%" y="501" width="0.9009%" height="15" fill="rgb(223,4,10)" fg:x="67" fg:w="1"/><text x="60.6104%" y="511.50"></text></g><g><title>Security`SecCFCalendarDoWithZuluCalendar (1 samples, 0.90%)</title><rect x="60.3604%" y="485" width="0.9009%" height="15" fill="rgb(234,103,6)" fg:x="67" fg:w="1"/><text x="60.6104%" y="495.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.90%)</title><rect x="60.3604%" y="469" width="0.9009%" height="15" fill="rgb(227,97,0)" fg:x="67" fg:w="1"/><text x="60.6104%" y="479.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.90%)</title><rect x="60.3604%" y="453" width="0.9009%" height="15" fill="rgb(234,150,53)" fg:x="67" fg:w="1"/><text x="60.6104%" y="463.50"></text></g><g><title>Security`__SecCFCalendarDoWithZuluCalendar_block_invoke (1 samples, 0.90%)</title><rect x="60.3604%" y="437" width="0.9009%" height="15" fill="rgb(228,201,54)" fg:x="67" fg:w="1"/><text x="60.6104%" y="447.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.90%)</title><rect x="60.3604%" y="421" width="0.9009%" height="15" fill="rgb(222,22,37)" fg:x="67" fg:w="1"/><text x="60.6104%" y="431.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.90%)</title><rect x="60.3604%" y="405" width="0.9009%" height="15" fill="rgb(237,53,32)" fg:x="67" fg:w="1"/><text x="60.6104%" y="415.50"></text></g><g><title>Security`__SecCFCalendarGetZulu_block_invoke (1 samples, 0.90%)</title><rect x="60.3604%" y="389" width="0.9009%" height="15" fill="rgb(233,25,53)" fg:x="67" fg:w="1"/><text x="60.6104%" y="399.50"></text></g><g><title>Foundation`@objc static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.90%)</title><rect x="60.3604%" y="373" width="0.9009%" height="15" fill="rgb(210,40,34)" fg:x="67" fg:w="1"/><text x="60.6104%" y="383.50"></text></g><g><title>Foundation`specialized static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.90%)</title><rect x="60.3604%" y="357" width="0.9009%" height="15" fill="rgb(241,220,44)" fg:x="67" fg:w="1"/><text x="60.6104%" y="367.50"></text></g><g><title>Foundation`closure #1 in CalendarCache.fixed(_:)partial apply (1 samples, 0.90%)</title><rect x="60.3604%" y="341" width="0.9009%" height="15" fill="rgb(235,28,35)" fg:x="67" fg:w="1"/><text x="60.6104%" y="351.50"></text></g><g><title>Foundation`partial apply for closure #1 in CalendarCache.fixed(_:) (1 samples, 0.90%)</title><rect x="60.3604%" y="325" width="0.9009%" height="15" fill="rgb(210,56,17)" fg:x="67" fg:w="1"/><text x="60.6104%" y="335.50"></text></g><g><title>Foundation`closure #1 in CalendarCache.fixed(_:) (1 samples, 0.90%)</title><rect x="60.3604%" y="309" width="0.9009%" height="15" fill="rgb(224,130,29)" fg:x="67" fg:w="1"/><text x="60.6104%" y="319.50"></text></g><g><title>Foundation`protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarICU (1 samples, 0.90%)</title><rect x="60.3604%" y="293" width="0.9009%" height="15" fill="rgb(235,212,8)" fg:x="67" fg:w="1"/><text x="60.6104%" y="303.50"></text></g><g><title>Foundation`_CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) (1 samples, 0.90%)</title><rect x="60.3604%" y="277" width="0.9009%" height="15" fill="rgb(223,33,50)" fg:x="67" fg:w="1"/><text x="60.6104%" y="287.50"></text></g><g><title>Foundation`specialized static _CalendarICU.icuCalendar(identifier:timeZone:localeIdentifier:localePrefs:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) (1 samples, 0.90%)</title><rect x="60.3604%" y="261" width="0.9009%" height="15" fill="rgb(219,149,13)" fg:x="67" fg:w="1"/><text x="60.6104%" y="271.50"></text></g><g><title>libicucore.A.dylib`ucal_open (1 samples, 0.90%)</title><rect x="60.3604%" y="245" width="0.9009%" height="15" fill="rgb(250,156,29)" fg:x="67" fg:w="1"/><text x="60.6104%" y="255.50"></text></g><g><title>libicucore.A.dylib`icu::Calendar::createInstance (1 samples, 0.90%)</title><rect x="60.3604%" y="229" width="0.9009%" height="15" fill="rgb(216,193,19)" fg:x="67" fg:w="1"/><text x="60.6104%" y="239.50"></text></g><g><title>libicucore.A.dylib`0x000000018c60bc84 (1 samples, 0.90%)</title><rect x="60.3604%" y="213" width="0.9009%" height="15" fill="rgb(216,135,14)" fg:x="67" fg:w="1"/><text x="60.6104%" y="223.50"></text></g><g><title>libicucore.A.dylib`0x000000018c611004 (1 samples, 0.90%)</title><rect x="60.3604%" y="197" width="0.9009%" height="15" fill="rgb(241,47,5)" fg:x="67" fg:w="1"/><text x="60.6104%" y="207.50"></text></g><g><title>libicucore.A.dylib`icu::UnifiedCache::_get (1 samples, 0.90%)</title><rect x="60.3604%" y="181" width="0.9009%" height="15" fill="rgb(233,42,35)" fg:x="67" fg:w="1"/><text x="60.6104%" y="191.50"></text></g><g><title>libicucore.A.dylib`icu::LocaleCacheKey&lt;icu::SharedCalendar&gt;::createObject (1 samples, 0.90%)</title><rect x="60.3604%" y="165" width="0.9009%" height="15" fill="rgb(231,13,6)" fg:x="67" fg:w="1"/><text x="60.6104%" y="175.50"></text></g><g><title>libicucore.A.dylib`icu::Calendar::makeInstance (1 samples, 0.90%)</title><rect x="60.3604%" y="149" width="0.9009%" height="15" fill="rgb(207,181,40)" fg:x="67" fg:w="1"/><text x="60.6104%" y="159.50"></text></g><g><title>libicucore.A.dylib`icu::GregorianCalendar::GregorianCalendar (1 samples, 0.90%)</title><rect x="60.3604%" y="133" width="0.9009%" height="15" fill="rgb(254,173,49)" fg:x="67" fg:w="1"/><text x="60.6104%" y="143.50"></text></g><g><title>libicucore.A.dylib`icu::TimeZone::forLocaleOrDefault (1 samples, 0.90%)</title><rect x="60.3604%" y="117" width="0.9009%" height="15" fill="rgb(221,1,38)" fg:x="67" fg:w="1"/><text x="60.6104%" y="127.50"></text></g><g><title>libicucore.A.dylib`icu::TimeZone::createDefault (1 samples, 0.90%)</title><rect x="60.3604%" y="101" width="0.9009%" height="15" fill="rgb(206,124,46)" fg:x="67" fg:w="1"/><text x="60.6104%" y="111.50"></text></g><g><title>libicucore.A.dylib`0x000000018c71f754 (1 samples, 0.90%)</title><rect x="60.3604%" y="85" width="0.9009%" height="15" fill="rgb(249,21,11)" fg:x="67" fg:w="1"/><text x="60.6104%" y="95.50"></text></g><g><title>libicucore.A.dylib`icu::TimeZone::detectHostTimeZone (1 samples, 0.90%)</title><rect x="60.3604%" y="69" width="0.9009%" height="15" fill="rgb(222,201,40)" fg:x="67" fg:w="1"/><text x="60.6104%" y="79.50"></text></g><g><title>libicucore.A.dylib`uprv_tzname (1 samples, 0.90%)</title><rect x="60.3604%" y="53" width="0.9009%" height="15" fill="rgb(235,61,29)" fg:x="67" fg:w="1"/><text x="60.6104%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__getattrlist (1 samples, 0.90%)</title><rect x="60.3604%" y="37" width="0.9009%" height="15" fill="rgb(219,207,3)" fg:x="67" fg:w="1"/><text x="60.6104%" y="47.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (2 samples, 1.80%)</title><rect x="60.3604%" y="629" width="1.8018%" height="15" fill="rgb(222,56,46)" fg:x="67" fg:w="2"/><text x="60.6104%" y="639.50">S..</text></g><g><title>Security`SecXPCDictionaryCopyDictionaryOptional (2 samples, 1.80%)</title><rect x="60.3604%" y="613" width="1.8018%" height="15" fill="rgb(239,76,54)" fg:x="67" fg:w="2"/><text x="60.6104%" y="623.50">S..</text></g><g><title>Security`SecXPCDictionaryCopyDictionaryAndPossiblyMutateMessage (2 samples, 1.80%)</title><rect x="60.3604%" y="597" width="1.8018%" height="15" fill="rgb(231,124,27)" fg:x="67" fg:w="2"/><text x="60.6104%" y="607.50">S..</text></g><g><title>Security`SecXPCDictionaryCopyPListAndPossiblyMutateMessage (2 samples, 1.80%)</title><rect x="60.3604%" y="581" width="1.8018%" height="15" fill="rgb(249,195,6)" fg:x="67" fg:w="2"/><text x="60.6104%" y="591.50">S..</text></g><g><title>Security`der_decode_plist (2 samples, 1.80%)</title><rect x="60.3604%" y="565" width="1.8018%" height="15" fill="rgb(237,174,47)" fg:x="67" fg:w="2"/><text x="60.6104%" y="575.50">S..</text></g><g><title>Security`der_decode_dictionary (2 samples, 1.80%)</title><rect x="60.3604%" y="549" width="1.8018%" height="15" fill="rgb(206,201,31)" fg:x="67" fg:w="2"/><text x="60.6104%" y="559.50">S..</text></g><g><title>Security`der_decode_plist (2 samples, 1.80%)</title><rect x="60.3604%" y="533" width="1.8018%" height="15" fill="rgb(231,57,52)" fg:x="67" fg:w="2"/><text x="60.6104%" y="543.50">S..</text></g><g><title>Security`der_decode_date (2 samples, 1.80%)</title><rect x="60.3604%" y="517" width="1.8018%" height="15" fill="rgb(248,177,22)" fg:x="67" fg:w="2"/><text x="60.6104%" y="527.50">S..</text></g><g><title>libobjc.A.dylib`_objc_rootAlloc (1 samples, 0.90%)</title><rect x="61.2613%" y="501" width="0.9009%" height="15" fill="rgb(215,211,37)" fg:x="68" fg:w="1"/><text x="61.5113%" y="511.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_msg_create (1 samples, 0.90%)</title><rect x="62.1622%" y="565" width="0.9009%" height="15" fill="rgb(241,128,51)" fg:x="69" fg:w="1"/><text x="62.4122%" y="575.50"></text></g><g><title>libdispatch.dylib`_os_object_alloc_realized (1 samples, 0.90%)</title><rect x="62.1622%" y="549" width="0.9009%" height="15" fill="rgb(227,165,31)" fg:x="69" fg:w="1"/><text x="62.4122%" y="559.50"></text></g><g><title>libobjc.A.dylib`DYLD-STUB$$calloc (1 samples, 0.90%)</title><rect x="62.1622%" y="533" width="0.9009%" height="15" fill="rgb(228,167,24)" fg:x="69" fg:w="1"/><text x="62.4122%" y="543.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (2 samples, 1.80%)</title><rect x="62.1622%" y="597" width="1.8018%" height="15" fill="rgb(228,143,12)" fg:x="69" fg:w="2"/><text x="62.4122%" y="607.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (2 samples, 1.80%)</title><rect x="62.1622%" y="581" width="1.8018%" height="15" fill="rgb(249,149,8)" fg:x="69" fg:w="2"/><text x="62.4122%" y="591.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.90%)</title><rect x="63.0631%" y="565" width="0.9009%" height="15" fill="rgb(243,35,44)" fg:x="70" fg:w="1"/><text x="63.3131%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (1 samples, 0.90%)</title><rect x="63.0631%" y="549" width="0.9009%" height="15" fill="rgb(246,89,9)" fg:x="70" fg:w="1"/><text x="63.3131%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.90%)</title><rect x="63.0631%" y="533" width="0.9009%" height="15" fill="rgb(233,213,13)" fg:x="70" fg:w="1"/><text x="63.3131%" y="543.50"></text></g><g><title>Security`SecTrustEvaluateInternal (6 samples, 5.41%)</title><rect x="59.4595%" y="789" width="5.4054%" height="15" fill="rgb(233,141,41)" fg:x="66" fg:w="6"/><text x="59.7095%" y="799.50">Securit..</text></g><g><title>Security`SecTrustEvaluateIfNecessary (6 samples, 5.41%)</title><rect x="59.4595%" y="773" width="5.4054%" height="15" fill="rgb(239,167,4)" fg:x="66" fg:w="6"/><text x="59.7095%" y="783.50">Securit..</text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (6 samples, 5.41%)</title><rect x="59.4595%" y="757" width="5.4054%" height="15" fill="rgb(209,217,16)" fg:x="66" fg:w="6"/><text x="59.7095%" y="767.50">libdisp..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (6 samples, 5.41%)</title><rect x="59.4595%" y="741" width="5.4054%" height="15" fill="rgb(219,88,35)" fg:x="66" fg:w="6"/><text x="59.7095%" y="751.50">libdisp..</text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (6 samples, 5.41%)</title><rect x="59.4595%" y="725" width="5.4054%" height="15" fill="rgb(220,193,23)" fg:x="66" fg:w="6"/><text x="59.7095%" y="735.50">Securit..</text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (6 samples, 5.41%)</title><rect x="59.4595%" y="709" width="5.4054%" height="15" fill="rgb(230,90,52)" fg:x="66" fg:w="6"/><text x="59.7095%" y="719.50">libsyst..</text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (6 samples, 5.41%)</title><rect x="59.4595%" y="693" width="5.4054%" height="15" fill="rgb(252,106,19)" fg:x="66" fg:w="6"/><text x="59.7095%" y="703.50">Securit..</text></g><g><title>Security`SecOSStatusWith (6 samples, 5.41%)</title><rect x="59.4595%" y="677" width="5.4054%" height="15" fill="rgb(206,74,20)" fg:x="66" fg:w="6"/><text x="59.7095%" y="687.50">Securit..</text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (6 samples, 5.41%)</title><rect x="59.4595%" y="661" width="5.4054%" height="15" fill="rgb(230,138,44)" fg:x="66" fg:w="6"/><text x="59.7095%" y="671.50">Securit..</text></g><g><title>Security`securityd_send_sync_and_do (6 samples, 5.41%)</title><rect x="59.4595%" y="645" width="5.4054%" height="15" fill="rgb(235,182,43)" fg:x="66" fg:w="6"/><text x="59.7095%" y="655.50">Securit..</text></g><g><title>Security`security_fw_send_message_with_reply_sync_inner (3 samples, 2.70%)</title><rect x="62.1622%" y="629" width="2.7027%" height="15" fill="rgb(242,16,51)" fg:x="69" fg:w="3"/><text x="62.4122%" y="639.50">Se..</text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (3 samples, 2.70%)</title><rect x="62.1622%" y="613" width="2.7027%" height="15" fill="rgb(248,9,4)" fg:x="69" fg:w="3"/><text x="62.4122%" y="623.50">li..</text></g><g><title>libxpc.dylib`_xpc_connection_pack_message (1 samples, 0.90%)</title><rect x="63.9640%" y="597" width="0.9009%" height="15" fill="rgb(210,31,22)" fg:x="71" fg:w="1"/><text x="64.2140%" y="607.50"></text></g><g><title>libxpc.dylib`_xpc_serializer_pack (1 samples, 0.90%)</title><rect x="63.9640%" y="581" width="0.9009%" height="15" fill="rgb(239,54,39)" fg:x="71" fg:w="1"/><text x="64.2140%" y="591.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_msg_create (1 samples, 0.90%)</title><rect x="63.9640%" y="565" width="0.9009%" height="15" fill="rgb(230,99,41)" fg:x="71" fg:w="1"/><text x="64.2140%" y="575.50"></text></g><g><title>libdispatch.dylib`_os_object_alloc_realized (1 samples, 0.90%)</title><rect x="63.9640%" y="549" width="0.9009%" height="15" fill="rgb(253,106,12)" fg:x="71" fg:w="1"/><text x="64.2140%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.90%)</title><rect x="63.9640%" y="533" width="0.9009%" height="15" fill="rgb(213,46,41)" fg:x="71" fg:w="1"/><text x="64.2140%" y="543.50"></text></g><g><title>Security`Security::DLDbListCFPref::searchList (1 samples, 0.90%)</title><rect x="64.8649%" y="773" width="0.9009%" height="15" fill="rgb(215,133,35)" fg:x="72" fg:w="1"/><text x="65.1149%" y="783.50"></text></g><g><title>Security`Security::DLDbListCFPref::defaultDLDbIdentifier (1 samples, 0.90%)</title><rect x="64.8649%" y="757" width="0.9009%" height="15" fill="rgb(213,28,5)" fg:x="72" fg:w="1"/><text x="65.1149%" y="767.50"></text></g><g><title>Security`Security::DLDbListCFPref::loginDLDbIdentifier (1 samples, 0.90%)</title><rect x="64.8649%" y="741" width="0.9009%" height="15" fill="rgb(215,77,49)" fg:x="72" fg:w="1"/><text x="65.1149%" y="751.50"></text></g><g><title>Security`Security::DLDbListCFPref::LoginDLDbIdentifier (1 samples, 0.90%)</title><rect x="64.8649%" y="725" width="0.9009%" height="15" fill="rgb(248,100,22)" fg:x="72" fg:w="1"/><text x="65.1149%" y="735.50"></text></g><g><title>Security`Security::DLDbIdentifier::DLDbIdentifier (1 samples, 0.90%)</title><rect x="64.8649%" y="709" width="0.9009%" height="15" fill="rgb(208,67,9)" fg:x="72" fg:w="1"/><text x="65.1149%" y="719.50"></text></g><g><title>Security`Security::DbName::DbName (1 samples, 0.90%)</title><rect x="64.8649%" y="693" width="0.9009%" height="15" fill="rgb(219,133,21)" fg:x="72" fg:w="1"/><text x="65.1149%" y="703.50"></text></g><g><title>Security`Security::DbName::CanonicalizeName (1 samples, 0.90%)</title><rect x="64.8649%" y="677" width="0.9009%" height="15" fill="rgb(246,46,29)" fg:x="72" fg:w="1"/><text x="65.1149%" y="687.50"></text></g><g><title>Security`Security::cached_realpath (1 samples, 0.90%)</title><rect x="64.8649%" y="661" width="0.9009%" height="15" fill="rgb(246,185,52)" fg:x="72" fg:w="1"/><text x="65.1149%" y="671.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.90%)</title><rect x="64.8649%" y="645" width="0.9009%" height="15" fill="rgb(252,136,11)" fg:x="72" fg:w="1"/><text x="65.1149%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.90%)</title><rect x="64.8649%" y="629" width="0.9009%" height="15" fill="rgb(219,138,53)" fg:x="72" fg:w="1"/><text x="65.1149%" y="639.50"></text></g><g><title>Security`invocation function for block in Security::cached_realpath (1 samples, 0.90%)</title><rect x="64.8649%" y="613" width="0.9009%" height="15" fill="rgb(211,51,23)" fg:x="72" fg:w="1"/><text x="65.1149%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__getattrlist (1 samples, 0.90%)</title><rect x="64.8649%" y="597" width="0.9009%" height="15" fill="rgb(247,221,28)" fg:x="72" fg:w="1"/><text x="65.1149%" y="607.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::getSearchList(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (2 samples, 1.80%)</title><rect x="64.8649%" y="789" width="1.8018%" height="15" fill="rgb(251,222,45)" fg:x="72" fg:w="2"/><text x="65.1149%" y="799.50">S..</text></g><g><title>Security`Security::KeychainCore::DynamicDLDBList::searchList (1 samples, 0.90%)</title><rect x="65.7658%" y="773" width="0.9009%" height="15" fill="rgb(217,162,53)" fg:x="73" fg:w="1"/><text x="66.0158%" y="783.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (1 samples, 0.90%)</title><rect x="65.7658%" y="757" width="0.9009%" height="15" fill="rgb(229,93,14)" fg:x="73" fg:w="1"/><text x="66.0158%" y="767.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (1 samples, 0.90%)</title><rect x="65.7658%" y="741" width="0.9009%" height="15" fill="rgb(209,67,49)" fg:x="73" fg:w="1"/><text x="66.0158%" y="751.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (1 samples, 0.90%)</title><rect x="65.7658%" y="725" width="0.9009%" height="15" fill="rgb(213,87,29)" fg:x="73" fg:w="1"/><text x="66.0158%" y="735.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.90%)</title><rect x="65.7658%" y="709" width="0.9009%" height="15" fill="rgb(205,151,52)" fg:x="73" fg:w="1"/><text x="66.0158%" y="719.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (1 samples, 0.90%)</title><rect x="65.7658%" y="693" width="0.9009%" height="15" fill="rgb(253,215,39)" fg:x="73" fg:w="1"/><text x="66.0158%" y="703.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (1 samples, 0.90%)</title><rect x="65.7658%" y="677" width="0.9009%" height="15" fill="rgb(221,220,41)" fg:x="73" fg:w="1"/><text x="66.0158%" y="687.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (1 samples, 0.90%)</title><rect x="65.7658%" y="661" width="0.9009%" height="15" fill="rgb(218,133,21)" fg:x="73" fg:w="1"/><text x="66.0158%" y="671.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (1 samples, 0.90%)</title><rect x="65.7658%" y="645" width="0.9009%" height="15" fill="rgb(221,193,43)" fg:x="73" fg:w="1"/><text x="66.0158%" y="655.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::directDbHand (1 samples, 0.90%)</title><rect x="65.7658%" y="629" width="0.9009%" height="15" fill="rgb(240,128,52)" fg:x="73" fg:w="1"/><text x="66.0158%" y="639.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (1 samples, 0.90%)</title><rect x="65.7658%" y="613" width="0.9009%" height="15" fill="rgb(253,114,12)" fg:x="73" fg:w="1"/><text x="66.0158%" y="623.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.90%)</title><rect x="65.7658%" y="597" width="0.9009%" height="15" fill="rgb(215,223,47)" fg:x="73" fg:w="1"/><text x="66.0158%" y="607.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.90%)</title><rect x="65.7658%" y="581" width="0.9009%" height="15" fill="rgb(248,225,23)" fg:x="73" fg:w="1"/><text x="66.0158%" y="591.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.90%)</title><rect x="65.7658%" y="565" width="0.9009%" height="15" fill="rgb(250,108,0)" fg:x="73" fg:w="1"/><text x="66.0158%" y="575.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.90%)</title><rect x="65.7658%" y="549" width="0.9009%" height="15" fill="rgb(228,208,7)" fg:x="73" fg:w="1"/><text x="66.0158%" y="559.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.90%)</title><rect x="65.7658%" y="533" width="0.9009%" height="15" fill="rgb(244,45,10)" fg:x="73" fg:w="1"/><text x="66.0158%" y="543.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.90%)</title><rect x="65.7658%" y="517" width="0.9009%" height="15" fill="rgb(207,125,25)" fg:x="73" fg:w="1"/><text x="66.0158%" y="527.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.90%)</title><rect x="65.7658%" y="501" width="0.9009%" height="15" fill="rgb(210,195,18)" fg:x="73" fg:w="1"/><text x="66.0158%" y="511.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.90%)</title><rect x="65.7658%" y="485" width="0.9009%" height="15" fill="rgb(249,80,12)" fg:x="73" fg:w="1"/><text x="66.0158%" y="495.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.90%)</title><rect x="65.7658%" y="469" width="0.9009%" height="15" fill="rgb(221,65,9)" fg:x="73" fg:w="1"/><text x="66.0158%" y="479.50"></text></g><g><title>Security`std::__1::pair&lt;std::__1::__tree_iterator&lt;void*, std::__1::__tree_node&lt;void*, void*&gt;*, long&gt;, bool&gt; std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::__emplace_unique_key_args&lt;void*, void* const&amp;&gt; (1 samples, 0.90%)</title><rect x="65.7658%" y="453" width="0.9009%" height="15" fill="rgb(235,49,36)" fg:x="73" fg:w="1"/><text x="66.0158%" y="463.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::make (1 samples, 0.90%)</title><rect x="66.6667%" y="789" width="0.9009%" height="15" fill="rgb(225,32,20)" fg:x="74" fg:w="1"/><text x="66.9167%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::makeKeychain (1 samples, 0.90%)</title><rect x="66.6667%" y="773" width="0.9009%" height="15" fill="rgb(215,141,46)" fg:x="74" fg:w="1"/><text x="66.9167%" y="783.50"></text></g><g><title>Security`Security::KeychainCore::StorageManager::keychain (1 samples, 0.90%)</title><rect x="66.6667%" y="757" width="0.9009%" height="15" fill="rgb(250,160,47)" fg:x="74" fg:w="1"/><text x="66.9167%" y="767.50"></text></g><g><title>Security`Security::DLDbIdentifier::DLDbIdentifier (1 samples, 0.90%)</title><rect x="66.6667%" y="741" width="0.9009%" height="15" fill="rgb(216,222,40)" fg:x="74" fg:w="1"/><text x="66.9167%" y="751.50"></text></g><g><title>Security`Security::DbName::DbName (1 samples, 0.90%)</title><rect x="66.6667%" y="725" width="0.9009%" height="15" fill="rgb(234,217,39)" fg:x="74" fg:w="1"/><text x="66.9167%" y="735.50"></text></g><g><title>Security`Security::DbName::CanonicalizeName (1 samples, 0.90%)</title><rect x="66.6667%" y="709" width="0.9009%" height="15" fill="rgb(207,178,40)" fg:x="74" fg:w="1"/><text x="66.9167%" y="719.50"></text></g><g><title>Security`Security::cached_realpath (1 samples, 0.90%)</title><rect x="66.6667%" y="693" width="0.9009%" height="15" fill="rgb(221,136,13)" fg:x="74" fg:w="1"/><text x="66.9167%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.90%)</title><rect x="66.6667%" y="677" width="0.9009%" height="15" fill="rgb(249,199,10)" fg:x="74" fg:w="1"/><text x="66.9167%" y="687.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.90%)</title><rect x="66.6667%" y="661" width="0.9009%" height="15" fill="rgb(249,222,13)" fg:x="74" fg:w="1"/><text x="66.9167%" y="671.50"></text></g><g><title>Security`invocation function for block in Security::cached_realpath (1 samples, 0.90%)</title><rect x="66.6667%" y="645" width="0.9009%" height="15" fill="rgb(244,185,38)" fg:x="74" fg:w="1"/><text x="66.9167%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`__getattrlist (1 samples, 0.90%)</title><rect x="66.6667%" y="629" width="0.9009%" height="15" fill="rgb(236,202,9)" fg:x="74" fg:w="1"/><text x="66.9167%" y="639.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::CreateTrustSettings (1 samples, 0.90%)</title><rect x="67.5676%" y="789" width="0.9009%" height="15" fill="rgb(250,229,37)" fg:x="75" fg:w="1"/><text x="67.8176%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::TrustSettings::initFromData (1 samples, 0.90%)</title><rect x="67.5676%" y="773" width="0.9009%" height="15" fill="rgb(206,174,23)" fg:x="75" fg:w="1"/><text x="67.8176%" y="783.50"></text></g><g><title>CoreFoundation`CFPropertyListCreateFromXMLData (1 samples, 0.90%)</title><rect x="67.5676%" y="757" width="0.9009%" height="15" fill="rgb(211,33,43)" fg:x="75" fg:w="1"/><text x="67.8176%" y="767.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateWithData (1 samples, 0.90%)</title><rect x="67.5676%" y="741" width="0.9009%" height="15" fill="rgb(245,58,50)" fg:x="75" fg:w="1"/><text x="67.8176%" y="751.50"></text></g><g><title>CoreFoundation`_CFPropertyListCreateFromUTF8Data (1 samples, 0.90%)</title><rect x="67.5676%" y="725" width="0.9009%" height="15" fill="rgb(244,68,36)" fg:x="75" fg:w="1"/><text x="67.8176%" y="735.50"></text></g><g><title>CoreFoundation`parsePListTag (1 samples, 0.90%)</title><rect x="67.5676%" y="709" width="0.9009%" height="15" fill="rgb(232,229,15)" fg:x="75" fg:w="1"/><text x="67.8176%" y="719.50"></text></g><g><title>CoreFoundation`parseDictTag (1 samples, 0.90%)</title><rect x="67.5676%" y="693" width="0.9009%" height="15" fill="rgb(254,30,23)" fg:x="75" fg:w="1"/><text x="67.8176%" y="703.50"></text></g><g><title>CoreFoundation`parseDictTag (1 samples, 0.90%)</title><rect x="67.5676%" y="677" width="0.9009%" height="15" fill="rgb(235,160,14)" fg:x="75" fg:w="1"/><text x="67.8176%" y="687.50"></text></g><g><title>CoreFoundation`parseDictTag (1 samples, 0.90%)</title><rect x="67.5676%" y="661" width="0.9009%" height="15" fill="rgb(212,155,44)" fg:x="75" fg:w="1"/><text x="67.8176%" y="671.50"></text></g><g><title>CoreFoundation`parseXMLElement (1 samples, 0.90%)</title><rect x="67.5676%" y="645" width="0.9009%" height="15" fill="rgb(226,2,50)" fg:x="75" fg:w="1"/><text x="67.8176%" y="655.50"></text></g><g><title>CoreFoundation`parseStringTag (1 samples, 0.90%)</title><rect x="67.5676%" y="629" width="0.9009%" height="15" fill="rgb(234,177,6)" fg:x="75" fg:w="1"/><text x="67.8176%" y="639.50"></text></g><g><title>CoreFoundation`CFStringCreateMutableCopy (1 samples, 0.90%)</title><rect x="67.5676%" y="613" width="0.9009%" height="15" fill="rgb(217,24,9)" fg:x="75" fg:w="1"/><text x="67.8176%" y="623.50"></text></g><g><title>CoreFoundation`CFStringCreateMutable (1 samples, 0.90%)</title><rect x="67.5676%" y="597" width="0.9009%" height="15" fill="rgb(220,13,46)" fg:x="75" fg:w="1"/><text x="67.8176%" y="607.50"></text></g><g><title>CoreFoundation`CFAllocatorAllocate (1 samples, 0.90%)</title><rect x="67.5676%" y="581" width="0.9009%" height="15" fill="rgb(239,221,27)" fg:x="75" fg:w="1"/><text x="67.8176%" y="591.50"></text></g><g><title>Security`SecCertificateCreateWithData (1 samples, 0.90%)</title><rect x="68.4685%" y="773" width="0.9009%" height="15" fill="rgb(222,198,25)" fg:x="76" fg:w="1"/><text x="68.7185%" y="783.50"></text></g><g><title>Security`SecCertificateParse (1 samples, 0.90%)</title><rect x="68.4685%" y="757" width="0.9009%" height="15" fill="rgb(211,99,13)" fg:x="76" fg:w="1"/><text x="68.7185%" y="767.50"></text></g><g><title>CoreFoundation`__CFDataInit (1 samples, 0.90%)</title><rect x="68.4685%" y="741" width="0.9009%" height="15" fill="rgb(232,111,31)" fg:x="76" fg:w="1"/><text x="68.7185%" y="751.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (1 samples, 0.90%)</title><rect x="68.4685%" y="725" width="0.9009%" height="15" fill="rgb(245,82,37)" fg:x="76" fg:w="1"/><text x="68.7185%" y="735.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::get (1 samples, 0.90%)</title><rect x="69.3694%" y="757" width="0.9009%" height="15" fill="rgb(227,149,46)" fg:x="77" fg:w="1"/><text x="69.6194%" y="767.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::get (1 samples, 0.90%)</title><rect x="69.3694%" y="741" width="0.9009%" height="15" fill="rgb(218,36,50)" fg:x="77" fg:w="1"/><text x="69.6194%" y="751.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.90%)</title><rect x="69.3694%" y="725" width="0.9009%" height="15" fill="rgb(226,80,48)" fg:x="77" fg:w="1"/><text x="69.6194%" y="735.50"></text></g><g><title>Security`cssm_DataGetFromUniqueRecordId(cssm_dl_db_handle, cssm_db_unique_record const*, cssm_db_record_attribute_data*, cssm_data*) (1 samples, 0.90%)</title><rect x="69.3694%" y="709" width="0.9009%" height="15" fill="rgb(238,224,15)" fg:x="77" fg:w="1"/><text x="69.6194%" y="719.50"></text></g><g><title>Security`SSDLSession::DataGetFromUniqueRecordId (1 samples, 0.90%)</title><rect x="69.3694%" y="693" width="0.9009%" height="15" fill="rgb(241,136,10)" fg:x="77" fg:w="1"/><text x="69.6194%" y="703.50"></text></g><g><title>Security`CSSM_DL_DataGetFromUniqueRecordId (1 samples, 0.90%)</title><rect x="69.3694%" y="677" width="0.9009%" height="15" fill="rgb(208,32,45)" fg:x="77" fg:w="1"/><text x="69.6194%" y="687.50"></text></g><g><title>libobjc.A.dylib`objc_release (1 samples, 0.90%)</title><rect x="69.3694%" y="661" width="0.9009%" height="15" fill="rgb(207,135,9)" fg:x="77" fg:w="1"/><text x="69.6194%" y="671.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::data (2 samples, 1.80%)</title><rect x="69.3694%" y="773" width="1.8018%" height="15" fill="rgb(206,86,44)" fg:x="77" fg:w="2"/><text x="69.6194%" y="783.50">S..</text></g><g><title>Security`Security::KeychainCore::ItemImpl::dbUniqueRecord (1 samples, 0.90%)</title><rect x="70.2703%" y="757" width="0.9009%" height="15" fill="rgb(245,177,15)" fg:x="78" fg:w="1"/><text x="70.5203%" y="767.50"></text></g><g><title>CoreFoundation`CFRetain (1 samples, 0.90%)</title><rect x="70.2703%" y="741" width="0.9009%" height="15" fill="rgb(206,64,50)" fg:x="78" fg:w="1"/><text x="70.5203%" y="751.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::activate (1 samples, 0.90%)</title><rect x="71.1712%" y="757" width="0.9009%" height="15" fill="rgb(234,36,40)" fg:x="79" fg:w="1"/><text x="71.4212%" y="767.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.90%)</title><rect x="71.1712%" y="741" width="0.9009%" height="15" fill="rgb(213,64,8)" fg:x="79" fg:w="1"/><text x="71.4212%" y="751.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (1 samples, 0.90%)</title><rect x="71.1712%" y="725" width="0.9009%" height="15" fill="rgb(210,75,36)" fg:x="79" fg:w="1"/><text x="71.4212%" y="735.50"></text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (1 samples, 0.90%)</title><rect x="71.1712%" y="709" width="0.9009%" height="15" fill="rgb(229,88,21)" fg:x="79" fg:w="1"/><text x="71.4212%" y="719.50"></text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (1 samples, 0.90%)</title><rect x="71.1712%" y="693" width="0.9009%" height="15" fill="rgb(252,204,47)" fg:x="79" fg:w="1"/><text x="71.4212%" y="703.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::setPointer (1 samples, 0.90%)</title><rect x="71.1712%" y="677" width="0.9009%" height="15" fill="rgb(208,77,27)" fg:x="79" fg:w="1"/><text x="71.4212%" y="687.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.90%)</title><rect x="71.1712%" y="661" width="0.9009%" height="15" fill="rgb(221,76,26)" fg:x="79" fg:w="1"/><text x="71.4212%" y="671.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::~SSDbUniqueRecordImpl (1 samples, 0.90%)</title><rect x="71.1712%" y="645" width="0.9009%" height="15" fill="rgb(225,139,18)" fg:x="79" fg:w="1"/><text x="71.4212%" y="655.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.90%)</title><rect x="71.1712%" y="629" width="0.9009%" height="15" fill="rgb(230,137,11)" fg:x="79" fg:w="1"/><text x="71.4212%" y="639.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.90%)</title><rect x="71.1712%" y="613" width="0.9009%" height="15" fill="rgb(212,28,1)" fg:x="79" fg:w="1"/><text x="71.4212%" y="623.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::handle (1 samples, 0.90%)</title><rect x="71.1712%" y="597" width="0.9009%" height="15" fill="rgb(248,164,17)" fg:x="79" fg:w="1"/><text x="71.4212%" y="607.50"></text></g><g><title>Security`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.90%)</title><rect x="71.1712%" y="581" width="0.9009%" height="15" fill="rgb(222,171,42)" fg:x="79" fg:w="1"/><text x="71.4212%" y="591.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.90%)</title><rect x="72.0721%" y="693" width="0.9009%" height="15" fill="rgb(243,84,45)" fg:x="80" fg:w="1"/><text x="72.3221%" y="703.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.90%)</title><rect x="72.0721%" y="677" width="0.9009%" height="15" fill="rgb(252,49,23)" fg:x="80" fg:w="1"/><text x="72.3221%" y="687.50"></text></g><g><title>Security`SSDLSession::DbOpen (1 samples, 0.90%)</title><rect x="72.0721%" y="661" width="0.9009%" height="15" fill="rgb(215,19,7)" fg:x="80" fg:w="1"/><text x="72.3221%" y="671.50"></text></g><g><title>Security`SSDatabaseImpl::load (1 samples, 0.90%)</title><rect x="72.0721%" y="645" width="0.9009%" height="15" fill="rgb(238,81,41)" fg:x="80" fg:w="1"/><text x="72.3221%" y="655.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::open (1 samples, 0.90%)</title><rect x="72.0721%" y="629" width="0.9009%" height="15" fill="rgb(210,199,37)" fg:x="80" fg:w="1"/><text x="72.3221%" y="639.50"></text></g><g><title>Security`CSSM_DL_DbOpen (1 samples, 0.90%)</title><rect x="72.0721%" y="613" width="0.9009%" height="15" fill="rgb(244,192,49)" fg:x="80" fg:w="1"/><text x="72.3221%" y="623.50"></text></g><g><title>Security`cssm_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (1 samples, 0.90%)</title><rect x="72.0721%" y="597" width="0.9009%" height="15" fill="rgb(226,211,11)" fg:x="80" fg:w="1"/><text x="72.3221%" y="607.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.90%)</title><rect x="72.0721%" y="581" width="0.9009%" height="15" fill="rgb(236,162,54)" fg:x="80" fg:w="1"/><text x="72.3221%" y="591.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.90%)</title><rect x="72.0721%" y="565" width="0.9009%" height="15" fill="rgb(220,229,9)" fg:x="80" fg:w="1"/><text x="72.3221%" y="575.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.90%)</title><rect x="72.0721%" y="549" width="0.9009%" height="15" fill="rgb(250,87,22)" fg:x="80" fg:w="1"/><text x="72.3221%" y="559.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.90%)</title><rect x="72.0721%" y="533" width="0.9009%" height="15" fill="rgb(239,43,17)" fg:x="80" fg:w="1"/><text x="72.3221%" y="543.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.90%)</title><rect x="72.0721%" y="517" width="0.9009%" height="15" fill="rgb(231,177,25)" fg:x="80" fg:w="1"/><text x="72.3221%" y="527.50"></text></g><g><title>Security`Security::MetaRecord::unpackRecord (1 samples, 0.90%)</title><rect x="72.0721%" y="501" width="0.9009%" height="15" fill="rgb(219,179,1)" fg:x="80" fg:w="1"/><text x="72.3221%" y="511.50"></text></g><g><title>Security`Security::MetaAttribute::unpackAttribute (1 samples, 0.90%)</title><rect x="72.0721%" y="485" width="0.9009%" height="15" fill="rgb(238,219,53)" fg:x="80" fg:w="1"/><text x="72.3221%" y="495.50"></text></g><g><title>Security`Security::TypedMetaAttribute&lt;Security::UInt32Value&gt;::unpackValue (1 samples, 0.90%)</title><rect x="72.0721%" y="469" width="0.9009%" height="15" fill="rgb(232,167,36)" fg:x="80" fg:w="1"/><text x="72.3221%" y="479.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.90%)</title><rect x="72.0721%" y="453" width="0.9009%" height="15" fill="rgb(244,19,51)" fg:x="80" fg:w="1"/><text x="72.3221%" y="463.50"></text></g><g><title>Security`Security::TrackingAllocator::malloc (1 samples, 0.90%)</title><rect x="72.0721%" y="437" width="0.9009%" height="15" fill="rgb(224,6,22)" fg:x="80" fg:w="1"/><text x="72.3221%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.90%)</title><rect x="72.0721%" y="421" width="0.9009%" height="15" fill="rgb(224,145,5)" fg:x="80" fg:w="1"/><text x="72.3221%" y="431.50"></text></g><g><title>Security`CSSM_DL_DataGetNext (1 samples, 0.90%)</title><rect x="72.9730%" y="645" width="0.9009%" height="15" fill="rgb(234,130,49)" fg:x="81" fg:w="1"/><text x="73.2230%" y="655.50"></text></g><g><title>Security`cssm_DataGetNext(cssm_dl_db_handle, long, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.90%)</title><rect x="72.9730%" y="629" width="0.9009%" height="15" fill="rgb(254,6,2)" fg:x="81" fg:w="1"/><text x="73.2230%" y="639.50"></text></g><g><title>Security`SSDLSession::DataGetNext (1 samples, 0.90%)</title><rect x="72.9730%" y="613" width="0.9009%" height="15" fill="rgb(208,96,46)" fg:x="81" fg:w="1"/><text x="73.2230%" y="623.50"></text></g><g><title>Security`CSSM_DL_DataGetNext (1 samples, 0.90%)</title><rect x="72.9730%" y="597" width="0.9009%" height="15" fill="rgb(239,3,39)" fg:x="81" fg:w="1"/><text x="73.2230%" y="607.50"></text></g><g><title>Security`cssm_DataGetNext(cssm_dl_db_handle, long, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.90%)</title><rect x="72.9730%" y="581" width="0.9009%" height="15" fill="rgb(233,210,1)" fg:x="81" fg:w="1"/><text x="73.2230%" y="591.50"></text></g><g><title>Security`Security::DatabaseSession::DataGetNext (1 samples, 0.90%)</title><rect x="72.9730%" y="565" width="0.9009%" height="15" fill="rgb(244,137,37)" fg:x="81" fg:w="1"/><text x="73.2230%" y="575.50"></text></g><g><title>Security`Security::AppleDatabase::dataGetNext (1 samples, 0.90%)</title><rect x="72.9730%" y="549" width="0.9009%" height="15" fill="rgb(240,136,2)" fg:x="81" fg:w="1"/><text x="73.2230%" y="559.50"></text></g><g><title>Security`Security::AppleDatabase::createUniqueRecord (1 samples, 0.90%)</title><rect x="72.9730%" y="533" width="0.9009%" height="15" fill="rgb(239,18,37)" fg:x="81" fg:w="1"/><text x="73.2230%" y="543.50"></text></g><g><title>Security`Security::PluginSession::malloc (1 samples, 0.90%)</title><rect x="72.9730%" y="517" width="0.9009%" height="15" fill="rgb(218,185,22)" fg:x="81" fg:w="1"/><text x="73.2230%" y="527.50"></text></g><g><title>Security`Attachment::upcallMalloc (1 samples, 0.90%)</title><rect x="72.9730%" y="501" width="0.9009%" height="15" fill="rgb(225,218,4)" fg:x="81" fg:w="1"/><text x="73.2230%" y="511.50"></text></g><g><title>Security`Security::CssmMemoryFunctionsAllocator::malloc (1 samples, 0.90%)</title><rect x="72.9730%" y="485" width="0.9009%" height="15" fill="rgb(230,182,32)" fg:x="81" fg:w="1"/><text x="73.2230%" y="495.50"></text></g><g><title>Security`Security::PluginSession::malloc (1 samples, 0.90%)</title><rect x="72.9730%" y="469" width="0.9009%" height="15" fill="rgb(242,56,43)" fg:x="81" fg:w="1"/><text x="73.2230%" y="479.50"></text></g><g><title>libc++abi.dylib`__cxxabiv1::__class_type_info::process_static_type_above_dst (1 samples, 0.90%)</title><rect x="72.9730%" y="453" width="0.9009%" height="15" fill="rgb(233,99,24)" fg:x="81" fg:w="1"/><text x="73.2230%" y="463.50"></text></g><g><title>Security`Security::CssmClient::DbImpl::dbBlobVersion (3 samples, 2.70%)</title><rect x="72.0721%" y="757" width="2.7027%" height="15" fill="rgb(234,209,42)" fg:x="80" fg:w="3"/><text x="72.3221%" y="767.50">Se..</text></g><g><title>Security`Security::CssmClient::DbImpl::handle (3 samples, 2.70%)</title><rect x="72.0721%" y="741" width="2.7027%" height="15" fill="rgb(227,7,12)" fg:x="80" fg:w="3"/><text x="72.3221%" y="751.50">Se..</text></g><g><title>Security`Security::CssmClient::DbImpl::activate (3 samples, 2.70%)</title><rect x="72.0721%" y="725" width="2.7027%" height="15" fill="rgb(245,203,43)" fg:x="80" fg:w="3"/><text x="72.3221%" y="735.50">Se..</text></g><g><title>Security`Security::CssmClient::DbImpl::open (3 samples, 2.70%)</title><rect x="72.0721%" y="709" width="2.7027%" height="15" fill="rgb(238,205,33)" fg:x="80" fg:w="3"/><text x="72.3221%" y="719.50">Se..</text></g><g><title>Security`Security::KeychainCore::KeychainImpl::defaultCredentials (2 samples, 1.80%)</title><rect x="72.9730%" y="693" width="1.8018%" height="15" fill="rgb(231,56,7)" fg:x="81" fg:w="2"/><text x="73.2230%" y="703.50">S..</text></g><g><title>Security`Security::KeychainCore::KeychainImpl::keychainSchema (2 samples, 1.80%)</title><rect x="72.9730%" y="677" width="1.8018%" height="15" fill="rgb(244,186,29)" fg:x="81" fg:w="2"/><text x="73.2230%" y="687.50">S..</text></g><g><title>Security`Security::CssmClient::DbDbCursorImpl::next (2 samples, 1.80%)</title><rect x="72.9730%" y="661" width="1.8018%" height="15" fill="rgb(234,111,31)" fg:x="81" fg:w="2"/><text x="73.2230%" y="671.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::setPointer (1 samples, 0.90%)</title><rect x="73.8739%" y="645" width="0.9009%" height="15" fill="rgb(241,149,10)" fg:x="82" fg:w="1"/><text x="74.1239%" y="655.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.90%)</title><rect x="73.8739%" y="629" width="0.9009%" height="15" fill="rgb(249,206,44)" fg:x="82" fg:w="1"/><text x="74.1239%" y="639.50"></text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::~SSDbUniqueRecordImpl (1 samples, 0.90%)</title><rect x="73.8739%" y="613" width="0.9009%" height="15" fill="rgb(251,153,30)" fg:x="82" fg:w="1"/><text x="74.1239%" y="623.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.90%)</title><rect x="73.8739%" y="597" width="0.9009%" height="15" fill="rgb(239,152,38)" fg:x="82" fg:w="1"/><text x="74.1239%" y="607.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.90%)</title><rect x="73.8739%" y="581" width="0.9009%" height="15" fill="rgb(249,139,47)" fg:x="82" fg:w="1"/><text x="74.1239%" y="591.50"></text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (1 samples, 0.90%)</title><rect x="73.8739%" y="565" width="0.9009%" height="15" fill="rgb(244,64,35)" fg:x="82" fg:w="1"/><text x="74.1239%" y="575.50"></text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (1 samples, 0.90%)</title><rect x="73.8739%" y="549" width="0.9009%" height="15" fill="rgb(216,46,15)" fg:x="82" fg:w="1"/><text x="74.1239%" y="559.50"></text></g><g><title>Security`non-virtual thunk to SSDLSession::FreeUniqueRecord (1 samples, 0.90%)</title><rect x="73.8739%" y="533" width="0.9009%" height="15" fill="rgb(250,74,19)" fg:x="82" fg:w="1"/><text x="74.1239%" y="543.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (1 samples, 0.90%)</title><rect x="73.8739%" y="517" width="0.9009%" height="15" fill="rgb(249,42,33)" fg:x="82" fg:w="1"/><text x="74.1239%" y="527.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (1 samples, 0.90%)</title><rect x="73.8739%" y="501" width="0.9009%" height="15" fill="rgb(242,149,17)" fg:x="82" fg:w="1"/><text x="74.1239%" y="511.50"></text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (1 samples, 0.90%)</title><rect x="73.8739%" y="485" width="0.9009%" height="15" fill="rgb(244,29,21)" fg:x="82" fg:w="1"/><text x="74.1239%" y="495.50"></text></g><g><title>Security`SSUniqueRecordImpl::~SSUniqueRecordImpl (1 samples, 0.90%)</title><rect x="73.8739%" y="469" width="0.9009%" height="15" fill="rgb(220,130,37)" fg:x="82" fg:w="1"/><text x="74.1239%" y="479.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (1 samples, 0.90%)</title><rect x="73.8739%" y="453" width="0.9009%" height="15" fill="rgb(211,67,2)" fg:x="82" fg:w="1"/><text x="74.1239%" y="463.50"></text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (1 samples, 0.90%)</title><rect x="73.8739%" y="437" width="0.9009%" height="15" fill="rgb(235,68,52)" fg:x="82" fg:w="1"/><text x="74.1239%" y="447.50"></text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (1 samples, 0.90%)</title><rect x="73.8739%" y="421" width="0.9009%" height="15" fill="rgb(246,142,3)" fg:x="82" fg:w="1"/><text x="74.1239%" y="431.50"></text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (1 samples, 0.90%)</title><rect x="73.8739%" y="405" width="0.9009%" height="15" fill="rgb(241,25,7)" fg:x="82" fg:w="1"/><text x="74.1239%" y="415.50"></text></g><g><title>Security`Security::DatabaseSession::FreeUniqueRecord (1 samples, 0.90%)</title><rect x="73.8739%" y="389" width="0.9009%" height="15" fill="rgb(242,119,39)" fg:x="82" fg:w="1"/><text x="74.1239%" y="399.50"></text></g><g><title>Security`secLogObjForScope (1 samples, 0.90%)</title><rect x="73.8739%" y="373" width="0.9009%" height="15" fill="rgb(241,98,45)" fg:x="82" fg:w="1"/><text x="74.1239%" y="383.50"></text></g><g><title>Security`secLogObjForCFScope (1 samples, 0.90%)</title><rect x="73.8739%" y="357" width="0.9009%" height="15" fill="rgb(254,28,30)" fg:x="82" fg:w="1"/><text x="74.1239%" y="367.50"></text></g><g><title>CoreFoundation`CFDictionaryGetValue (1 samples, 0.90%)</title><rect x="73.8739%" y="341" width="0.9009%" height="15" fill="rgb(241,142,54)" fg:x="82" fg:w="1"/><text x="74.1239%" y="351.50"></text></g><g><title>CoreFoundation`___CFBasicHashFindBucket_Linear (1 samples, 0.90%)</title><rect x="73.8739%" y="325" width="0.9009%" height="15" fill="rgb(222,85,15)" fg:x="82" fg:w="1"/><text x="74.1239%" y="335.50"></text></g><g><title>CoreFoundation`CFStringHashISOLatin1CString (1 samples, 0.90%)</title><rect x="73.8739%" y="309" width="0.9009%" height="15" fill="rgb(210,85,47)" fg:x="82" fg:w="1"/><text x="74.1239%" y="319.50"></text></g><g><title>CoreFoundation`_CFRelease (1 samples, 0.90%)</title><rect x="74.7748%" y="533" width="0.9009%" height="15" fill="rgb(224,206,25)" fg:x="83" fg:w="1"/><text x="75.0248%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (19 samples, 17.12%)</title><rect x="59.4595%" y="933" width="17.1171%" height="15" fill="rgb(243,201,19)" fg:x="66" fg:w="19"/><text x="59.7095%" y="943.50">libsystem_pthread.dylib`sta..</text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (19 samples, 17.12%)</title><rect x="59.4595%" y="917" width="17.1171%" height="15" fill="rgb(236,59,4)" fg:x="66" fg:w="19"/><text x="59.7095%" y="927.50">libsystem_pthread.dylib`_pt..</text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (19 samples, 17.12%)</title><rect x="59.4595%" y="901" width="17.1171%" height="15" fill="rgb(254,179,45)" fg:x="66" fg:w="19"/><text x="59.7095%" y="911.50">libdispatch.dylib`_dispatch..</text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain_deferred_wlh (19 samples, 17.12%)</title><rect x="59.4595%" y="885" width="17.1171%" height="15" fill="rgb(226,14,10)" fg:x="66" fg:w="19"/><text x="59.7095%" y="895.50">libdispatch.dylib`_dispatch..</text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (19 samples, 17.12%)</title><rect x="59.4595%" y="869" width="17.1171%" height="15" fill="rgb(244,27,41)" fg:x="66" fg:w="19"/><text x="59.7095%" y="879.50">libdispatch.dylib`_dispatch..</text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (19 samples, 17.12%)</title><rect x="59.4595%" y="853" width="17.1171%" height="15" fill="rgb(235,35,32)" fg:x="66" fg:w="19"/><text x="59.7095%" y="863.50">libdispatch.dylib`_dispatch..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (19 samples, 17.12%)</title><rect x="59.4595%" y="837" width="17.1171%" height="15" fill="rgb(218,68,31)" fg:x="66" fg:w="19"/><text x="59.7095%" y="847.50">libdispatch.dylib`_dispatch..</text></g><g><title>libdispatch.dylib`_dispatch_block_async_invoke2 (19 samples, 17.12%)</title><rect x="59.4595%" y="821" width="17.1171%" height="15" fill="rgb(207,120,37)" fg:x="66" fg:w="19"/><text x="59.7095%" y="831.50">libdispatch.dylib`_dispatch..</text></g><g><title>Security`__SecTrustSettingsCopyCertificates_block_invoke_2 (19 samples, 17.12%)</title><rect x="59.4595%" y="805" width="17.1171%" height="15" fill="rgb(227,98,0)" fg:x="66" fg:w="19"/><text x="59.7095%" y="815.50">Security`__SecTrustSettings..</text></g><g><title>Security`Security::KeychainCore::TrustSettings::findQualifiedCerts(std::__1::vector&lt;Security::KeychainCore::Keychain, std::__1::allocator (9 samples, 8.11%)</title><rect x="68.4685%" y="789" width="8.1081%" height="15" fill="rgb(207,7,3)" fg:x="76" fg:w="9"/><text x="68.7185%" y="799.50">Security`Se..</text></g><g><title>Security`Security::KeychainCore::KCCursorImpl::next (6 samples, 5.41%)</title><rect x="71.1712%" y="773" width="5.4054%" height="15" fill="rgb(206,98,19)" fg:x="79" fg:w="6"/><text x="71.4212%" y="783.50">Securit..</text></g><g><title>Security`Security::SecPointerBase::operator= (2 samples, 1.80%)</title><rect x="74.7748%" y="757" width="1.8018%" height="15" fill="rgb(217,5,26)" fg:x="83" fg:w="2"/><text x="75.0248%" y="767.50">S..</text></g><g><title>CoreFoundation`_CFRelease (2 samples, 1.80%)</title><rect x="74.7748%" y="741" width="1.8018%" height="15" fill="rgb(235,190,38)" fg:x="83" fg:w="2"/><text x="75.0248%" y="751.50">C..</text></g><g><title>Security`Security::CFClass::refCountForType (2 samples, 1.80%)</title><rect x="74.7748%" y="725" width="1.8018%" height="15" fill="rgb(247,86,24)" fg:x="83" fg:w="2"/><text x="75.0248%" y="735.50">S..</text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (2 samples, 1.80%)</title><rect x="74.7748%" y="709" width="1.8018%" height="15" fill="rgb(205,101,16)" fg:x="83" fg:w="2"/><text x="75.0248%" y="719.50">S..</text></g><g><title>Security`Security::KeychainCore::Certificate::~Certificate (2 samples, 1.80%)</title><rect x="74.7748%" y="693" width="1.8018%" height="15" fill="rgb(246,168,33)" fg:x="83" fg:w="2"/><text x="75.0248%" y="703.50">S..</text></g><g><title>Security`Security::KeychainCore::ItemImpl::~ItemImpl (2 samples, 1.80%)</title><rect x="74.7748%" y="677" width="1.8018%" height="15" fill="rgb(231,114,1)" fg:x="83" fg:w="2"/><text x="75.0248%" y="687.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::~RefPointer (2 samples, 1.80%)</title><rect x="74.7748%" y="661" width="1.8018%" height="15" fill="rgb(207,184,53)" fg:x="83" fg:w="2"/><text x="75.0248%" y="671.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release (2 samples, 1.80%)</title><rect x="74.7748%" y="645" width="1.8018%" height="15" fill="rgb(224,95,51)" fg:x="83" fg:w="2"/><text x="75.0248%" y="655.50">S..</text></g><g><title>Security`Security::RefPointer&lt;Security::CssmClient::ObjectImpl&gt;::release_internal (2 samples, 1.80%)</title><rect x="74.7748%" y="629" width="1.8018%" height="15" fill="rgb(212,188,45)" fg:x="83" fg:w="2"/><text x="75.0248%" y="639.50">S..</text></g><g><title>Security`Security::CssmClient::SSDbUniqueRecordImpl::~SSDbUniqueRecordImpl (2 samples, 1.80%)</title><rect x="74.7748%" y="613" width="1.8018%" height="15" fill="rgb(223,154,38)" fg:x="83" fg:w="2"/><text x="75.0248%" y="623.50">S..</text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::~DbUniqueRecordImpl (2 samples, 1.80%)</title><rect x="74.7748%" y="597" width="1.8018%" height="15" fill="rgb(251,22,52)" fg:x="83" fg:w="2"/><text x="75.0248%" y="607.50">S..</text></g><g><title>Security`Security::CssmClient::DbUniqueRecordImpl::deactivate (2 samples, 1.80%)</title><rect x="74.7748%" y="581" width="1.8018%" height="15" fill="rgb(229,209,22)" fg:x="83" fg:w="2"/><text x="75.0248%" y="591.50">S..</text></g><g><title>Security`CSSM_DL_FreeUniqueRecord (2 samples, 1.80%)</title><rect x="74.7748%" y="565" width="1.8018%" height="15" fill="rgb(234,138,34)" fg:x="83" fg:w="2"/><text x="75.0248%" y="575.50">S..</text></g><g><title>Security`cssm_FreeUniqueRecord(cssm_dl_db_handle, cssm_db_unique_record*) (2 samples, 1.80%)</title><rect x="74.7748%" y="549" width="1.8018%" height="15" fill="rgb(212,95,11)" fg:x="83" fg:w="2"/><text x="75.0248%" y="559.50">S..</text></g><g><title>libobjc.A.dylib`objc_msgSend (1 samples, 0.90%)</title><rect x="75.6757%" y="533" width="0.9009%" height="15" fill="rgb(240,179,47)" fg:x="84" fg:w="1"/><text x="75.9257%" y="543.50"></text></g><g><title>swiftide-bench`parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.90%)</title><rect x="76.5766%" y="837" width="0.9009%" height="15" fill="rgb(240,163,11)" fg:x="85" fg:w="1"/><text x="76.8266%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.90%)</title><rect x="76.5766%" y="821" width="0.9009%" height="15" fill="rgb(236,37,12)" fg:x="85" fg:w="1"/><text x="76.8266%" y="831.50"></text></g><g><title>Network`nw_path_libinfo_path_check (1 samples, 0.90%)</title><rect x="77.4775%" y="725" width="0.9009%" height="15" fill="rgb(232,164,16)" fg:x="86" fg:w="1"/><text x="77.7275%" y="735.50"></text></g><g><title>Network`nw_parameters_create_legacy_tcp_socket (1 samples, 0.90%)</title><rect x="77.4775%" y="709" width="0.9009%" height="15" fill="rgb(244,205,15)" fg:x="86" fg:w="1"/><text x="77.7275%" y="719.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.90%)</title><rect x="77.4775%" y="693" width="0.9009%" height="15" fill="rgb(223,117,47)" fg:x="86" fg:w="1"/><text x="77.7275%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.90%)</title><rect x="77.4775%" y="677" width="0.9009%" height="15" fill="rgb(244,107,35)" fg:x="86" fg:w="1"/><text x="77.7275%" y="687.50"></text></g><g><title>Network`__nw_protocol_setup_tcp_definition_block_invoke (1 samples, 0.90%)</title><rect x="77.4775%" y="661" width="0.9009%" height="15" fill="rgb(205,140,8)" fg:x="86" fg:w="1"/><text x="77.7275%" y="671.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.90%)</title><rect x="77.4775%" y="645" width="0.9009%" height="15" fill="rgb(228,84,46)" fg:x="86" fg:w="1"/><text x="77.7275%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.90%)</title><rect x="77.4775%" y="629" width="0.9009%" height="15" fill="rgb(254,188,9)" fg:x="86" fg:w="1"/><text x="77.7275%" y="639.50"></text></g><g><title>Network`__nw_protocol_get_tcp_identifier_block_invoke (1 samples, 0.90%)</title><rect x="77.4775%" y="613" width="0.9009%" height="15" fill="rgb(206,112,54)" fg:x="86" fg:w="1"/><text x="77.7275%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.90%)</title><rect x="77.4775%" y="597" width="0.9009%" height="15" fill="rgb(216,84,49)" fg:x="86" fg:w="1"/><text x="77.7275%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.90%)</title><rect x="77.4775%" y="581" width="0.9009%" height="15" fill="rgb(214,194,35)" fg:x="86" fg:w="1"/><text x="77.7275%" y="591.50"></text></g><g><title>Network`__nw_protocol_get_tcp_image_block_invoke (1 samples, 0.90%)</title><rect x="77.4775%" y="565" width="0.9009%" height="15" fill="rgb(249,28,3)" fg:x="86" fg:w="1"/><text x="77.7275%" y="575.50"></text></g><g><title>dyld`dyld4::APIs::dlopen_from (1 samples, 0.90%)</title><rect x="77.4775%" y="549" width="0.9009%" height="15" fill="rgb(222,56,52)" fg:x="86" fg:w="1"/><text x="77.7275%" y="559.50"></text></g><g><title>dyld`dyld4::APIs::dlopen_from(char const*, int, void*)::$_1::operator() (1 samples, 0.90%)</title><rect x="77.4775%" y="533" width="0.9009%" height="15" fill="rgb(245,217,50)" fg:x="86" fg:w="1"/><text x="77.7275%" y="543.50"></text></g><g><title>dyld`dyld4::Loader::getLoader (1 samples, 0.90%)</title><rect x="77.4775%" y="517" width="0.9009%" height="15" fill="rgb(213,201,24)" fg:x="86" fg:w="1"/><text x="77.7275%" y="527.50"></text></g><g><title>dyld`dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void  (1 samples, 0.90%)</title><rect x="77.4775%" y="501" width="0.9009%" height="15" fill="rgb(248,116,28)" fg:x="86" fg:w="1"/><text x="77.7275%" y="511.50"></text></g><g><title>dyld`dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool, bool&amp;, void  (1 samples, 0.90%)</title><rect x="77.4775%" y="485" width="0.9009%" height="15" fill="rgb(219,72,43)" fg:x="86" fg:w="1"/><text x="77.7275%" y="495.50"></text></g><g><title>dyld`dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void  (1 samples, 0.90%)</title><rect x="77.4775%" y="469" width="0.9009%" height="15" fill="rgb(209,138,14)" fg:x="86" fg:w="1"/><text x="77.7275%" y="479.50"></text></g><g><title>dyld`invocation function for block in dyld4::Loader::getLoader (1 samples, 0.90%)</title><rect x="77.4775%" y="453" width="0.9009%" height="15" fill="rgb(222,18,33)" fg:x="86" fg:w="1"/><text x="77.7275%" y="463.50"></text></g><g><title>dyld`dyld4::Loader::makeDyldCacheLoader (1 samples, 0.90%)</title><rect x="77.4775%" y="437" width="0.9009%" height="15" fill="rgb(213,199,7)" fg:x="86" fg:w="1"/><text x="77.7275%" y="447.50"></text></g><g><title>dyld`dyld4::RuntimeState::findPrebuiltLoader (1 samples, 0.90%)</title><rect x="77.4775%" y="421" width="0.9009%" height="15" fill="rgb(250,110,10)" fg:x="86" fg:w="1"/><text x="77.7275%" y="431.50"></text></g><g><title>dyld`dyld4::PrebuiltLoader::isValid (1 samples, 0.90%)</title><rect x="77.4775%" y="405" width="0.9009%" height="15" fill="rgb(248,123,6)" fg:x="86" fg:w="1"/><text x="77.7275%" y="415.50"></text></g><g><title>swiftide-bench`&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (2 samples, 1.80%)</title><rect x="77.4775%" y="789" width="1.8018%" height="15" fill="rgb(206,91,31)" fg:x="86" fg:w="2"/><text x="77.7275%" y="799.50">s..</text></g><g><title>swiftide-bench`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (2 samples, 1.80%)</title><rect x="77.4775%" y="773" width="1.8018%" height="15" fill="rgb(211,154,13)" fg:x="86" fg:w="2"/><text x="77.7275%" y="783.50">s..</text></g><g><title>libsystem_info.dylib`getaddrinfo (2 samples, 1.80%)</title><rect x="77.4775%" y="757" width="1.8018%" height="15" fill="rgb(225,148,7)" fg:x="86" fg:w="2"/><text x="77.7275%" y="767.50">l..</text></g><g><title>libsystem_info.dylib`si_addrinfo (2 samples, 1.80%)</title><rect x="77.4775%" y="741" width="1.8018%" height="15" fill="rgb(220,160,43)" fg:x="86" fg:w="2"/><text x="77.7275%" y="751.50">l..</text></g><g><title>libsystem_info.dylib`search_addrinfo (1 samples, 0.90%)</title><rect x="78.3784%" y="725" width="0.9009%" height="15" fill="rgb(213,52,39)" fg:x="87" fg:w="1"/><text x="78.6284%" y="735.50"></text></g><g><title>libsystem_info.dylib`mdns_addrinfo (1 samples, 0.90%)</title><rect x="78.3784%" y="709" width="0.9009%" height="15" fill="rgb(243,137,7)" fg:x="87" fg:w="1"/><text x="78.6284%" y="719.50"></text></g><g><title>libsystem_info.dylib`_mdns_search_ex (1 samples, 0.90%)</title><rect x="78.3784%" y="693" width="0.9009%" height="15" fill="rgb(230,79,13)" fg:x="87" fg:w="1"/><text x="78.6284%" y="703.50"></text></g><g><title>libsystem_info.dylib`_mdns_query_start (1 samples, 0.90%)</title><rect x="78.3784%" y="677" width="0.9009%" height="15" fill="rgb(247,105,23)" fg:x="87" fg:w="1"/><text x="78.6284%" y="687.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceQueryRecordInternal (1 samples, 0.90%)</title><rect x="78.3784%" y="661" width="0.9009%" height="15" fill="rgb(223,179,41)" fg:x="87" fg:w="1"/><text x="78.6284%" y="671.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock (1 samples, 0.90%)</title><rect x="78.3784%" y="645" width="0.9009%" height="15" fill="rgb(218,9,34)" fg:x="87" fg:w="1"/><text x="78.6284%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`kevent (3 samples, 2.70%)</title><rect x="79.2793%" y="677" width="2.7027%" height="15" fill="rgb(222,106,8)" fg:x="88" fg:w="3"/><text x="79.5293%" y="687.50">li..</text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (4 samples, 3.60%)</title><rect x="79.2793%" y="741" width="3.6036%" height="15" fill="rgb(211,220,0)" fg:x="88" fg:w="4"/><text x="79.5293%" y="751.50">swif..</text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::park::Parker::park (4 samples, 3.60%)</title><rect x="79.2793%" y="725" width="3.6036%" height="15" fill="rgb(229,52,16)" fg:x="88" fg:w="4"/><text x="79.5293%" y="735.50">swif..</text></g><g><title>swiftide-bench`tokio::runtime::time::Driver::park_internal (4 samples, 3.60%)</title><rect x="79.2793%" y="709" width="3.6036%" height="15" fill="rgb(212,155,18)" fg:x="88" fg:w="4"/><text x="79.5293%" y="719.50">swif..</text></g><g><title>swiftide-bench`tokio::runtime::io::driver::Driver::turn (4 samples, 3.60%)</title><rect x="79.2793%" y="693" width="3.6036%" height="15" fill="rgb(242,21,14)" fg:x="88" fg:w="4"/><text x="79.5293%" y="703.50">swif..</text></g><g><title>swiftide-bench`mio::poll::Poll::poll (1 samples, 0.90%)</title><rect x="81.9820%" y="677" width="0.9009%" height="15" fill="rgb(222,19,48)" fg:x="91" fg:w="1"/><text x="82.2320%" y="687.50"></text></g><g><title>swiftide-bench`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.90%)</title><rect x="82.8829%" y="709" width="0.9009%" height="15" fill="rgb(232,45,27)" fg:x="92" fg:w="1"/><text x="83.1329%" y="719.50"></text></g><g><title>swiftide-bench`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.90%)</title><rect x="82.8829%" y="693" width="0.9009%" height="15" fill="rgb(249,103,42)" fg:x="92" fg:w="1"/><text x="83.1329%" y="703.50"></text></g><g><title>swiftide-bench`&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.90%)</title><rect x="82.8829%" y="677" width="0.9009%" height="15" fill="rgb(246,81,33)" fg:x="92" fg:w="1"/><text x="83.1329%" y="687.50"></text></g><g><title>swiftide-bench`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (1 samples, 0.90%)</title><rect x="82.8829%" y="661" width="0.9009%" height="15" fill="rgb(252,33,42)" fg:x="92" fg:w="1"/><text x="83.1329%" y="671.50"></text></g><g><title>swiftide-bench`&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write_vectored (1 samples, 0.90%)</title><rect x="82.8829%" y="645" width="0.9009%" height="15" fill="rgb(209,212,41)" fg:x="92" fg:w="1"/><text x="83.1329%" y="655.50"></text></g><g><title>swiftide-bench`&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.90%)</title><rect x="82.8829%" y="629" width="0.9009%" height="15" fill="rgb(207,154,6)" fg:x="92" fg:w="1"/><text x="83.1329%" y="639.50"></text></g><g><title>swiftide-bench`rustls::vecbuf::ChunkVecBuffer::write_to (1 samples, 0.90%)</title><rect x="82.8829%" y="613" width="0.9009%" height="15" fill="rgb(223,64,47)" fg:x="92" fg:w="1"/><text x="83.1329%" y="623.50"></text></g><g><title>swiftide-bench`&lt;tokio_rustls::common::SyncWriteAdapter&lt;T&gt; as std::io::Write&gt;::write_vectored (1 samples, 0.90%)</title><rect x="82.8829%" y="597" width="0.9009%" height="15" fill="rgb(211,161,38)" fg:x="92" fg:w="1"/><text x="83.1329%" y="607.50"></text></g><g><title>swiftide-bench`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1 samples, 0.90%)</title><rect x="82.8829%" y="581" width="0.9009%" height="15" fill="rgb(219,138,40)" fg:x="92" fg:w="1"/><text x="83.1329%" y="591.50"></text></g><g><title>swiftide-bench`tokio::runtime::io::registration::Registration::poll_io (1 samples, 0.90%)</title><rect x="82.8829%" y="565" width="0.9009%" height="15" fill="rgb(241,228,46)" fg:x="92" fg:w="1"/><text x="83.1329%" y="575.50"></text></g><g><title>swiftide-bench`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (1 samples, 0.90%)</title><rect x="82.8829%" y="549" width="0.9009%" height="15" fill="rgb(223,209,38)" fg:x="92" fg:w="1"/><text x="83.1329%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`writev (1 samples, 0.90%)</title><rect x="82.8829%" y="533" width="0.9009%" height="15" fill="rgb(236,164,45)" fg:x="92" fg:w="1"/><text x="83.1329%" y="543.50"></text></g><g><title>swiftide-bench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 1.80%)</title><rect x="82.8829%" y="725" width="1.8018%" height="15" fill="rgb(231,15,5)" fg:x="92" fg:w="2"/><text x="83.1329%" y="735.50">s..</text></g><g><title>swiftide-bench`&lt;tonic::transport::channel::service::connection::MakeSendRequestService&lt;C&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}}::_{{closure}} (1 samples, 0.90%)</title><rect x="83.7838%" y="709" width="0.9009%" height="15" fill="rgb(252,35,15)" fg:x="93" fg:w="1"/><text x="84.0338%" y="719.50"></text></g><g><title>swiftide-bench`hyper::proto::h2::client::ClientTask&lt;B,E,T&gt;::poll_pipe (1 samples, 0.90%)</title><rect x="83.7838%" y="693" width="0.9009%" height="15" fill="rgb(248,181,18)" fg:x="93" fg:w="1"/><text x="84.0338%" y="703.50"></text></g><g><title>swiftide-bench`&lt;tonic::codec::encode::EncodeBody&lt;S&gt; as http_body::Body&gt;::poll_frame (1 samples, 0.90%)</title><rect x="83.7838%" y="677" width="0.9009%" height="15" fill="rgb(233,39,42)" fg:x="93" fg:w="1"/><text x="84.0338%" y="687.50"></text></g><g><title>swiftide-bench`itertools::Itertools::sorted (2 samples, 1.80%)</title><rect x="84.6847%" y="613" width="1.8018%" height="15" fill="rgb(238,110,33)" fg:x="94" fg:w="2"/><text x="84.9347%" y="623.50">s..</text></g><g><title>swiftide-bench`core::slice::sort::stable::driftsort_main (2 samples, 1.80%)</title><rect x="84.6847%" y="597" width="1.8018%" height="15" fill="rgb(233,195,10)" fg:x="94" fg:w="2"/><text x="84.9347%" y="607.50">s..</text></g><g><title>swiftide-bench`core::slice::sort::stable::drift::sort (2 samples, 1.80%)</title><rect x="84.6847%" y="581" width="1.8018%" height="15" fill="rgb(254,105,3)" fg:x="94" fg:w="2"/><text x="84.9347%" y="591.50">s..</text></g><g><title>swiftide-bench`core::slice::sort::stable::quicksort::quicksort (2 samples, 1.80%)</title><rect x="84.6847%" y="565" width="1.8018%" height="15" fill="rgb(221,225,9)" fg:x="94" fg:w="2"/><text x="84.9347%" y="575.50">s..</text></g><g><title>swiftide-bench`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.90%)</title><rect x="85.5856%" y="549" width="0.9009%" height="15" fill="rgb(224,227,45)" fg:x="95" fg:w="1"/><text x="85.8356%" y="559.50"></text></g><g><title>swiftide-bench`text_splitter::chunk_size::MemoizedChunkSizer&lt;Sizer&gt;::check_capacity (1 samples, 0.90%)</title><rect x="86.4865%" y="613" width="0.9009%" height="15" fill="rgb(229,198,43)" fg:x="96" fg:w="1"/><text x="86.7365%" y="623.50"></text></g><g><title>swiftide-bench`core::str::count::do_count_chars (1 samples, 0.90%)</title><rect x="86.4865%" y="597" width="0.9009%" height="15" fill="rgb(206,209,35)" fg:x="96" fg:w="1"/><text x="86.7365%" y="607.50"></text></g><g><title>swiftide-bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 3.60%)</title><rect x="84.6847%" y="645" width="3.6036%" height="15" fill="rgb(245,195,53)" fg:x="94" fg:w="4"/><text x="84.9347%" y="655.50">swif..</text></g><g><title>swiftide-bench`&lt;text_splitter::splitter::TextChunks&lt;Sizer,Level&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 3.60%)</title><rect x="84.6847%" y="629" width="3.6036%" height="15" fill="rgb(240,92,26)" fg:x="94" fg:w="4"/><text x="84.9347%" y="639.50">swif..</text></g><g><title>swiftide-bench`text_splitter::chunk_size::MemoizedChunkSizer&lt;Sizer&gt;::find_correct_level (1 samples, 0.90%)</title><rect x="87.3874%" y="613" width="0.9009%" height="15" fill="rgb(207,40,23)" fg:x="97" fg:w="1"/><text x="87.6374%" y="623.50"></text></g><g><title>swiftide-bench`&lt;itertools::adaptors::coalesce::CoalesceBy&lt;I,F,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.90%)</title><rect x="87.3874%" y="597" width="0.9009%" height="15" fill="rgb(223,111,35)" fg:x="97" fg:w="1"/><text x="87.6374%" y="607.50"></text></g><g><title>swiftide-bench`&lt;pulldown_cmark::parse::OffsetIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.90%)</title><rect x="88.2883%" y="645" width="0.9009%" height="15" fill="rgb(229,147,28)" fg:x="98" fg:w="1"/><text x="88.5383%" y="655.50"></text></g><g><title>swiftide-bench`pulldown_cmark::parse::Parser&lt;F&gt;::handle_inline_pass1 (1 samples, 0.90%)</title><rect x="88.2883%" y="629" width="0.9009%" height="15" fill="rgb(211,29,28)" fg:x="98" fg:w="1"/><text x="88.5383%" y="639.50"></text></g><g><title>swiftide-bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 5.41%)</title><rect x="84.6847%" y="661" width="5.4054%" height="15" fill="rgb(228,72,33)" fg:x="94" fg:w="6"/><text x="84.9347%" y="671.50">swiftid..</text></g><g><title>swiftide-bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.90%)</title><rect x="89.1892%" y="645" width="0.9009%" height="15" fill="rgb(205,214,31)" fg:x="99" fg:w="1"/><text x="89.4392%" y="655.50"></text></g><g><title>swiftide-bench`alloc::raw_vec::finish_grow (1 samples, 0.90%)</title><rect x="89.1892%" y="629" width="0.9009%" height="15" fill="rgb(224,111,15)" fg:x="99" fg:w="1"/><text x="89.4392%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.90%)</title><rect x="89.1892%" y="613" width="0.9009%" height="15" fill="rgb(253,21,26)" fg:x="99" fg:w="1"/><text x="89.4392%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.90%)</title><rect x="89.1892%" y="597" width="0.9009%" height="15" fill="rgb(245,139,43)" fg:x="99" fg:w="1"/><text x="89.4392%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.90%)</title><rect x="89.1892%" y="581" width="0.9009%" height="15" fill="rgb(252,170,7)" fg:x="99" fg:w="1"/><text x="89.4392%" y="591.50"></text></g><g><title>swiftide-bench`swiftide_indexing::pipeline::Pipeline::then_chunk::_{{closure}}::_{{closure}} (7 samples, 6.31%)</title><rect x="84.6847%" y="709" width="6.3063%" height="15" fill="rgb(231,118,14)" fg:x="94" fg:w="7"/><text x="84.9347%" y="719.50">swiftide..</text></g><g><title>swiftide-bench`&lt;swiftide_indexing::transformers::chunk_markdown::ChunkMarkdown as swiftide_core::indexing_traits::ChunkerTransformer&gt;::transform_node::_{{closure}} (7 samples, 6.31%)</title><rect x="84.6847%" y="693" width="6.3063%" height="15" fill="rgb(238,83,0)" fg:x="94" fg:w="7"/><text x="84.9347%" y="703.50">swiftide..</text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 6.31%)</title><rect x="84.6847%" y="677" width="6.3063%" height="15" fill="rgb(221,39,39)" fg:x="94" fg:w="7"/><text x="84.9347%" y="687.50">swiftide..</text></g><g><title>swiftide-bench`pulldown_cmark::parse::Parser::new_ext (1 samples, 0.90%)</title><rect x="90.0901%" y="661" width="0.9009%" height="15" fill="rgb(222,119,46)" fg:x="100" fg:w="1"/><text x="90.3401%" y="671.50"></text></g><g><title>swiftide-bench`pulldown_cmark::firstpass::run_first_pass (1 samples, 0.90%)</title><rect x="90.0901%" y="645" width="0.9009%" height="15" fill="rgb(222,165,49)" fg:x="100" fg:w="1"/><text x="90.3401%" y="655.50"></text></g><g><title>swiftide-bench`pulldown_cmark::firstpass::FirstPass::parse_line (1 samples, 0.90%)</title><rect x="90.0901%" y="629" width="0.9009%" height="15" fill="rgb(219,113,52)" fg:x="100" fg:w="1"/><text x="90.3401%" y="639.50"></text></g><g><title>swiftide-bench`&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (4 samples, 3.60%)</title><rect x="90.9910%" y="485" width="3.6036%" height="15" fill="rgb(214,7,15)" fg:x="101" fg:w="4"/><text x="91.2410%" y="495.50">swif..</text></g><g><title>swiftide-bench`tokio::net::tcp::socket::TcpSocket::connect::_{{closure}} (4 samples, 3.60%)</title><rect x="90.9910%" y="469" width="3.6036%" height="15" fill="rgb(235,32,4)" fg:x="101" fg:w="4"/><text x="91.2410%" y="479.50">swif..</text></g><g><title>libsystem_kernel.dylib`__connect (4 samples, 3.60%)</title><rect x="90.9910%" y="453" width="3.6036%" height="15" fill="rgb(238,90,54)" fg:x="101" fg:w="4"/><text x="91.2410%" y="463.50">libs..</text></g><g><title>swiftide-bench`ring_core_0_17_8_bn_mul_mont (1 samples, 0.90%)</title><rect x="94.5946%" y="293" width="0.9009%" height="15" fill="rgb(213,208,19)" fg:x="105" fg:w="1"/><text x="94.8446%" y="303.50"></text></g><g><title>swiftide-bench`core::ops::function::FnOnce::call_once (2 samples, 1.80%)</title><rect x="94.5946%" y="309" width="1.8018%" height="15" fill="rgb(233,156,4)" fg:x="105" fg:w="2"/><text x="94.8446%" y="319.50">s..</text></g><g><title>swiftide-bench`ring_core_0_17_8_p384_point_mul (1 samples, 0.90%)</title><rect x="95.4955%" y="293" width="0.9009%" height="15" fill="rgb(207,194,5)" fg:x="106" fg:w="1"/><text x="95.7455%" y="303.50"></text></g><g><title>swiftide-bench`nistz384_point_double (1 samples, 0.90%)</title><rect x="95.4955%" y="277" width="0.9009%" height="15" fill="rgb(206,111,30)" fg:x="106" fg:w="1"/><text x="95.7455%" y="287.50"></text></g><g><title>swiftide-bench`ring_core_0_17_8_bn_mul_mont (1 samples, 0.90%)</title><rect x="95.4955%" y="261" width="0.9009%" height="15" fill="rgb(243,70,54)" fg:x="106" fg:w="1"/><text x="95.7455%" y="271.50"></text></g><g><title>swiftide-bench`ring_core_0_17_8_p256_point_mul (1 samples, 0.90%)</title><rect x="96.3964%" y="293" width="0.9009%" height="15" fill="rgb(242,28,8)" fg:x="107" fg:w="1"/><text x="96.6464%" y="303.50"></text></g><g><title>swiftide-bench`_ecp_nistz256_mul_mont (1 samples, 0.90%)</title><rect x="96.3964%" y="277" width="0.9009%" height="15" fill="rgb(219,106,18)" fg:x="107" fg:w="1"/><text x="96.6464%" y="287.50"></text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (17 samples, 15.32%)</title><rect x="82.8829%" y="741" width="15.3153%" height="15" fill="rgb(244,222,10)" fg:x="92" fg:w="17"/><text x="83.1329%" y="751.50">swiftide-bench`tokio::r..</text></g><g><title>swiftide-bench`tokio::runtime::task::raw::poll (15 samples, 13.51%)</title><rect x="84.6847%" y="725" width="13.5135%" height="15" fill="rgb(236,179,52)" fg:x="94" fg:w="15"/><text x="84.9347%" y="735.50">swiftide-bench`tokio..</text></g><g><title>swiftide-bench`swiftide_indexing::pipeline::Pipeline::then_in_batch::_{{closure}}::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="709" width="7.2072%" height="15" fill="rgb(213,23,39)" fg:x="101" fg:w="8"/><text x="91.2410%" y="719.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;swiftide_indexing::transformers::embed::Embed as swiftide_core::indexing_traits::BatchableTransformer&gt;::batch_transform::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="693" width="7.2072%" height="15" fill="rgb(238,48,10)" fg:x="101" fg:w="8"/><text x="91.2410%" y="703.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 7.21%)</title><rect x="90.9910%" y="677" width="7.2072%" height="15" fill="rgb(251,196,23)" fg:x="101" fg:w="8"/><text x="91.2410%" y="687.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;alloc::boxed::Box&lt;dyn swiftide_core::indexing_traits::EmbeddingModel&gt; as swiftide_core::indexing_traits::EmbeddingModel&gt;::embed::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="661" width="7.2072%" height="15" fill="rgb(250,152,24)" fg:x="101" fg:w="8"/><text x="91.2410%" y="671.50">swiftide-b..</text></g><g><title>swiftide-bench`swiftide_integrations::openai::embed::_&lt;impl swiftide_core::indexing_traits::EmbeddingModel for swiftide_integrations::openai::OpenAI&gt;::embed::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="645" width="7.2072%" height="15" fill="rgb(209,150,17)" fg:x="101" fg:w="8"/><text x="91.2410%" y="655.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (8 samples, 7.21%)</title><rect x="90.9910%" y="629" width="7.2072%" height="15" fill="rgb(234,202,34)" fg:x="101" fg:w="8"/><text x="91.2410%" y="639.50">swiftide-b..</text></g><g><title>swiftide-bench`hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="613" width="7.2072%" height="15" fill="rgb(253,148,53)" fg:x="101" fg:w="8"/><text x="91.2410%" y="623.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (8 samples, 7.21%)</title><rect x="90.9910%" y="597" width="7.2072%" height="15" fill="rgb(218,129,16)" fg:x="101" fg:w="8"/><text x="91.2410%" y="607.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 7.21%)</title><rect x="90.9910%" y="581" width="7.2072%" height="15" fill="rgb(216,85,19)" fg:x="101" fg:w="8"/><text x="91.2410%" y="591.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 7.21%)</title><rect x="90.9910%" y="565" width="7.2072%" height="15" fill="rgb(235,228,7)" fg:x="101" fg:w="8"/><text x="91.2410%" y="575.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (8 samples, 7.21%)</title><rect x="90.9910%" y="549" width="7.2072%" height="15" fill="rgb(245,175,0)" fg:x="101" fg:w="8"/><text x="91.2410%" y="559.50">swiftide-b..</text></g><g><title>swiftide-bench`reqwest::connect::with_timeout::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="533" width="7.2072%" height="15" fill="rgb(208,168,36)" fg:x="101" fg:w="8"/><text x="91.2410%" y="543.50">swiftide-b..</text></g><g><title>swiftide-bench`reqwest::connect::Connector::connect_with_maybe_proxy::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="517" width="7.2072%" height="15" fill="rgb(246,171,24)" fg:x="101" fg:w="8"/><text x="91.2410%" y="527.50">swiftide-b..</text></g><g><title>swiftide-bench`&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (8 samples, 7.21%)</title><rect x="90.9910%" y="501" width="7.2072%" height="15" fill="rgb(215,142,24)" fg:x="101" fg:w="8"/><text x="91.2410%" y="511.50">swiftide-b..</text></g><g><title>swiftide-bench`tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (4 samples, 3.60%)</title><rect x="94.5946%" y="485" width="3.6036%" height="15" fill="rgb(250,187,7)" fg:x="105" fg:w="4"/><text x="94.8446%" y="495.50">swif..</text></g><g><title>swiftide-bench`rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (4 samples, 3.60%)</title><rect x="94.5946%" y="469" width="3.6036%" height="15" fill="rgb(228,66,33)" fg:x="105" fg:w="4"/><text x="94.8446%" y="479.50">swif..</text></g><g><title>swiftide-bench`rustls::common_state::CommonState::process_main_protocol (4 samples, 3.60%)</title><rect x="94.5946%" y="453" width="3.6036%" height="15" fill="rgb(234,215,21)" fg:x="105" fg:w="4"/><text x="94.8446%" y="463.50">swif..</text></g><g><title>swiftide-bench`&lt;rustls::client::tls13::ExpectCertificateVerify as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (4 samples, 3.60%)</title><rect x="94.5946%" y="437" width="3.6036%" height="15" fill="rgb(222,191,20)" fg:x="105" fg:w="4"/><text x="94.8446%" y="447.50">swif..</text></g><g><title>swiftide-bench`&lt;rustls::webpki::server_verifier::WebPkiServerVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (4 samples, 3.60%)</title><rect x="94.5946%" y="421" width="3.6036%" height="15" fill="rgb(245,79,54)" fg:x="105" fg:w="4"/><text x="94.8446%" y="431.50">swif..</text></g><g><title>swiftide-bench`webpki::end_entity::EndEntityCert::verify_for_usage (4 samples, 3.60%)</title><rect x="94.5946%" y="405" width="3.6036%" height="15" fill="rgb(240,10,37)" fg:x="105" fg:w="4"/><text x="94.8446%" y="415.50">swif..</text></g><g><title>swiftide-bench`webpki::verify_cert::ChainOptions::build_chain (4 samples, 3.60%)</title><rect x="94.5946%" y="389" width="3.6036%" height="15" fill="rgb(214,192,32)" fg:x="105" fg:w="4"/><text x="94.8446%" y="399.50">swif..</text></g><g><title>swiftide-bench`webpki::verify_cert::ChainOptions::build_chain_inner (4 samples, 3.60%)</title><rect x="94.5946%" y="373" width="3.6036%" height="15" fill="rgb(209,36,54)" fg:x="105" fg:w="4"/><text x="94.8446%" y="383.50">swif..</text></g><g><title>swiftide-bench`webpki::verify_cert::ChainOptions::build_chain_inner (4 samples, 3.60%)</title><rect x="94.5946%" y="357" width="3.6036%" height="15" fill="rgb(220,10,11)" fg:x="105" fg:w="4"/><text x="94.8446%" y="367.50">swif..</text></g><g><title>swiftide-bench`webpki::signed_data::verify_signed_data (4 samples, 3.60%)</title><rect x="94.5946%" y="341" width="3.6036%" height="15" fill="rgb(221,106,17)" fg:x="105" fg:w="4"/><text x="94.8446%" y="351.50">swif..</text></g><g><title>swiftide-bench`&lt;ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm as ring::signature::VerificationAlgorithm&gt;::verify (4 samples, 3.60%)</title><rect x="94.5946%" y="325" width="3.6036%" height="15" fill="rgb(251,142,44)" fg:x="105" fg:w="4"/><text x="94.8446%" y="335.50">swif..</text></g><g><title>swiftide-bench`ring::ec::suite_b::ops::p256::twin_mul_nistz256 (2 samples, 1.80%)</title><rect x="96.3964%" y="309" width="1.8018%" height="15" fill="rgb(238,13,15)" fg:x="107" fg:w="2"/><text x="96.6464%" y="319.50">s..</text></g><g><title>swiftide-bench`ring_core_0_17_8_p256_point_mul_base_vartime (1 samples, 0.90%)</title><rect x="97.2973%" y="293" width="0.9009%" height="15" fill="rgb(208,107,27)" fg:x="108" fg:w="1"/><text x="97.5473%" y="303.50"></text></g><g><title>swiftide-bench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::shutdown (1 samples, 0.90%)</title><rect x="98.1982%" y="725" width="0.9009%" height="15" fill="rgb(205,136,37)" fg:x="109" fg:w="1"/><text x="98.4482%" y="735.50"></text></g><g><title>swiftide-bench`tokio::runtime::task::harness::cancel_task (1 samples, 0.90%)</title><rect x="98.1982%" y="709" width="0.9009%" height="15" fill="rgb(250,205,27)" fg:x="109" fg:w="1"/><text x="98.4482%" y="719.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;&gt;&gt; (1 samples, 0.90%)</title><rect x="98.1982%" y="693" width="0.9009%" height="15" fill="rgb(210,80,43)" fg:x="109" fg:w="1"/><text x="98.4482%" y="703.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;futures_util::future::future::Map&lt;futures_util::future::try_future::MapErr&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;reqwest::connect::Conn,reqwest::async_impl::body::Body&gt;,hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,hyper_util::client::legacy::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::Body&gt;::connect_to::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.90%)</title><rect x="98.1982%" y="677" width="0.9009%" height="15" fill="rgb(247,160,36)" fg:x="109" fg:w="1"/><text x="98.4482%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.90%)</title><rect x="98.1982%" y="661" width="0.9009%" height="15" fill="rgb(234,13,49)" fg:x="109" fg:w="1"/><text x="98.4482%" y="671.50"></text></g><g><title>all (111 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(234,122,0)" fg:x="0" fg:w="111"/><text x="0.2500%" y="959.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (26 samples, 23.42%)</title><rect x="76.5766%" y="933" width="23.4234%" height="15" fill="rgb(207,146,38)" fg:x="85" fg:w="26"/><text x="76.8266%" y="943.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (26 samples, 23.42%)</title><rect x="76.5766%" y="917" width="23.4234%" height="15" fill="rgb(207,177,25)" fg:x="85" fg:w="26"/><text x="76.8266%" y="927.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>swiftide-bench`std::sys::pal::unix::thread::Thread::new::thread_start (26 samples, 23.42%)</title><rect x="76.5766%" y="901" width="23.4234%" height="15" fill="rgb(211,178,42)" fg:x="85" fg:w="26"/><text x="76.8266%" y="911.50">swiftide-bench`std::sys::pal::unix::t..</text></g><g><title>swiftide-bench`core::ops::function::FnOnce::call_once{{vtable.shim}} (26 samples, 23.42%)</title><rect x="76.5766%" y="885" width="23.4234%" height="15" fill="rgb(230,69,54)" fg:x="85" fg:w="26"/><text x="76.8266%" y="895.50">swiftide-bench`core::ops::function::F..</text></g><g><title>swiftide-bench`std::sys::backtrace::__rust_begin_short_backtrace (26 samples, 23.42%)</title><rect x="76.5766%" y="869" width="23.4234%" height="15" fill="rgb(214,135,41)" fg:x="85" fg:w="26"/><text x="76.8266%" y="879.50">swiftide-bench`std::sys::backtrace::_..</text></g><g><title>swiftide-bench`tokio::runtime::blocking::pool::Inner::run (26 samples, 23.42%)</title><rect x="76.5766%" y="853" width="23.4234%" height="15" fill="rgb(237,67,25)" fg:x="85" fg:w="26"/><text x="76.8266%" y="863.50">swiftide-bench`tokio::runtime::blocki..</text></g><g><title>swiftide-bench`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (25 samples, 22.52%)</title><rect x="77.4775%" y="837" width="22.5225%" height="15" fill="rgb(222,189,50)" fg:x="86" fg:w="25"/><text x="77.7275%" y="847.50">swiftide-bench`tokio::runtime::task:..</text></g><g><title>swiftide-bench`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (25 samples, 22.52%)</title><rect x="77.4775%" y="821" width="22.5225%" height="15" fill="rgb(245,148,34)" fg:x="86" fg:w="25"/><text x="77.7275%" y="831.50">swiftide-bench`tokio::runtime::task:..</text></g><g><title>swiftide-bench`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 22.52%)</title><rect x="77.4775%" y="805" width="22.5225%" height="15" fill="rgb(222,29,6)" fg:x="86" fg:w="25"/><text x="77.7275%" y="815.50">swiftide-bench`&lt;tokio::runtime::bloc..</text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::run (23 samples, 20.72%)</title><rect x="79.2793%" y="789" width="20.7207%" height="15" fill="rgb(221,189,43)" fg:x="88" fg:w="23"/><text x="79.5293%" y="799.50">swiftide-bench`tokio::runtime::sc..</text></g><g><title>swiftide-bench`tokio::runtime::context::runtime::enter_runtime (23 samples, 20.72%)</title><rect x="79.2793%" y="773" width="20.7207%" height="15" fill="rgb(207,36,27)" fg:x="88" fg:w="23"/><text x="79.5293%" y="783.50">swiftide-bench`tokio::runtime::co..</text></g><g><title>swiftide-bench`tokio::runtime::scheduler::multi_thread::worker::Context::run (23 samples, 20.72%)</title><rect x="79.2793%" y="757" width="20.7207%" height="15" fill="rgb(217,90,24)" fg:x="88" fg:w="23"/><text x="79.5293%" y="767.50">swiftide-bench`tokio::runtime::sc..</text></g><g><title>swiftide-bench`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (2 samples, 1.80%)</title><rect x="98.1982%" y="741" width="1.8018%" height="15" fill="rgb(224,66,35)" fg:x="109" fg:w="2"/><text x="98.4482%" y="751.50">s..</text></g><g><title>swiftide-bench`tokio::runtime::task::raw::shutdown (1 samples, 0.90%)</title><rect x="99.0991%" y="725" width="0.9009%" height="15" fill="rgb(221,13,50)" fg:x="110" fg:w="1"/><text x="99.3491%" y="735.50"></text></g><g><title>swiftide-bench`tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.90%)</title><rect x="99.0991%" y="709" width="0.9009%" height="15" fill="rgb(236,68,49)" fg:x="110" fg:w="1"/><text x="99.3491%" y="719.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;swiftide_indexing::pipeline::Pipeline::then_in_batch&lt;swiftide_indexing::transformers::embed::Embed&gt;::{{closure}}::{{closure}}&gt; (1 samples, 0.90%)</title><rect x="99.0991%" y="693" width="0.9009%" height="15" fill="rgb(229,146,28)" fg:x="110" fg:w="1"/><text x="99.3491%" y="703.50"></text></g><g><title>swiftide-bench`core::ptr::drop_in_place&lt;&lt;swiftide_indexing::transformers::embed::Embed as swiftide_core::indexing_traits::BatchableTransformer&gt;::batch_transform::{{closure}}&gt; (1 samples, 0.90%)</title><rect x="99.0991%" y="677" width="0.9009%" height="15" fill="rgb(225,31,38)" fg:x="110" fg:w="1"/><text x="99.3491%" y="687.50"></text></g><g><title>swiftide-bench`tracing::instrument::_::_&lt;impl core::ops::drop::Drop for tracing::instrument::Instrumented&lt;T&gt;&gt;::drop (1 samples, 0.90%)</title><rect x="99.0991%" y="661" width="0.9009%" height="15" fill="rgb(250,208,3)" fg:x="110" fg:w="1"/><text x="99.3491%" y="671.50"></text></g><g><title>swiftide-bench`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.90%)</title><rect x="99.0991%" y="645" width="0.9009%" height="15" fill="rgb(246,54,23)" fg:x="110" fg:w="1"/><text x="99.3491%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.90%)</title><rect x="99.0991%" y="629" width="0.9009%" height="15" fill="rgb(243,76,11)" fg:x="110" fg:w="1"/><text x="99.3491%" y="639.50"></text></g></svg></svg>